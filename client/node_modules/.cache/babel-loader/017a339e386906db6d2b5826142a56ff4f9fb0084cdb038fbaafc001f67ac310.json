{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport axios from 'axios';\nimport bcrypt from 'bcryptjs'; // Импорт bcrypt для хеширования пароля\n\n// Достаём переменную из окружения\nconst apiBaseUrl = 'http://localhost:5001/api';\nconsole.log(apiBaseUrl);\n// Используем переменную\nconsole.log(apiBaseUrl); // \nconst useRegistration = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    email: '',\n    firstName: '',\n    lastName: '',\n    password: ''\n  });\n  const [loading, setLoading] = useState(false); // Состояние загрузки\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setLoading(true); // Начинаем загрузку\n    setError(''); // Сбрасываем ошибки\n    setMessage(''); // Сбрасываем сообщения\n\n    // Хешируем пароль перед отправкой\n    const hashedPassword = bcrypt.hashSync(formData.password, bcrypt.genSaltSync(10));\n    try {\n      const response = await axios.post(`${apiBaseUrl}/`, {\n        email: formData.email,\n        firstName: formData.firstName,\n        lastName: formData.lastName,\n        password: hashedPassword\n      });\n      setMessage(response.data.message); // Успешное сообщение\n      setLoading(false); // Заканчиваем загрузку\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Ошибка регистрации');\n      setLoading(false); // Заканчиваем загрузку в случае ошибки\n    }\n  };\n  return {\n    formData,\n    handleChange,\n    handleSubmit,\n    loading,\n    message,\n    error\n  };\n};\n_s(useRegistration, \"fEdn0gFq87aqBwIqUY87PbJBtSM=\");\nexport default useRegistration;","map":{"version":3,"names":["useState","axios","bcrypt","apiBaseUrl","console","log","useRegistration","_s","formData","setFormData","email","firstName","lastName","password","loading","setLoading","message","setMessage","error","setError","handleChange","e","name","value","target","handleSubmit","preventDefault","hashedPassword","hashSync","genSaltSync","response","post","data","err","_err$response","_err$response$data"],"sources":["/Users/glebch/workprojects/baumna/client/src/hooks/useAuth.js"],"sourcesContent":["import { useState } from 'react';\nimport axios from 'axios';\nimport bcrypt from 'bcryptjs'; // Импорт bcrypt для хеширования пароля\n\n\n// Достаём переменную из окружения\nconst apiBaseUrl = 'http://localhost:5001/api'\nconsole.log(apiBaseUrl)\n// Используем переменную\nconsole.log(apiBaseUrl);  // \nconst useRegistration = () => {\n  const [formData, setFormData] = useState({\n    email: '',\n    firstName: '',\n    lastName: '',\n    password: '',\n  });\n\n  const [loading, setLoading] = useState(false); // Состояние загрузки\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true); // Начинаем загрузку\n    setError(''); // Сбрасываем ошибки\n    setMessage(''); // Сбрасываем сообщения\n\n    // Хешируем пароль перед отправкой\n    const hashedPassword = bcrypt.hashSync(formData.password, bcrypt.genSaltSync(10));\n\n    try {\n      const response = await axios.post(`${apiBaseUrl}/`, {\n        email: formData.email,\n        firstName: formData.firstName,\n        lastName: formData.lastName,\n        password: hashedPassword,\n      });\n      setMessage(response.data.message); // Успешное сообщение\n      setLoading(false); // Заканчиваем загрузку\n    } catch (err) {\n      setError(err.response?.data?.message || 'Ошибка регистрации');\n      setLoading(false); // Заканчиваем загрузку в случае ошибки\n    }\n  };\n\n  return {\n    formData,\n    handleChange,\n    handleSubmit,\n    loading,\n    message,\n    error,\n  };\n};\n\nexport default useRegistration;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,UAAU,CAAC,CAAC;;AAG/B;AACA,MAAMC,UAAU,GAAG,2BAA2B;AAC9CC,OAAO,CAACC,GAAG,CAACF,UAAU,CAAC;AACvB;AACAC,OAAO,CAACC,GAAG,CAACF,UAAU,CAAC,CAAC,CAAE;AAC1B,MAAMG,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC;IACvCU,KAAK,EAAE,EAAE;IACTC,SAAS,EAAE,EAAE;IACbC,QAAQ,EAAE,EAAE;IACZC,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMoB,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAChCf,WAAW,CAAC;MACV,GAAGD,QAAQ;MACX,CAACc,IAAI,GAAGC;IACV,CAAC,CAAC;EACJ,CAAC;EAED,MAAME,YAAY,GAAG,MAAOJ,CAAC,IAAK;IAChCA,CAAC,CAACK,cAAc,CAAC,CAAC;IAClBX,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IAClBI,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IACdF,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEhB;IACA,MAAMU,cAAc,GAAGzB,MAAM,CAAC0B,QAAQ,CAACpB,QAAQ,CAACK,QAAQ,EAAEX,MAAM,CAAC2B,WAAW,CAAC,EAAE,CAAC,CAAC;IAEjF,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM7B,KAAK,CAAC8B,IAAI,CAAC,GAAG5B,UAAU,GAAG,EAAE;QAClDO,KAAK,EAAEF,QAAQ,CAACE,KAAK;QACrBC,SAAS,EAAEH,QAAQ,CAACG,SAAS;QAC7BC,QAAQ,EAAEJ,QAAQ,CAACI,QAAQ;QAC3BC,QAAQ,EAAEc;MACZ,CAAC,CAAC;MACFV,UAAU,CAACa,QAAQ,CAACE,IAAI,CAAChB,OAAO,CAAC,CAAC,CAAC;MACnCD,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,OAAOkB,GAAG,EAAE;MAAA,IAAAC,aAAA,EAAAC,kBAAA;MACZhB,QAAQ,CAAC,EAAAe,aAAA,GAAAD,GAAG,CAACH,QAAQ,cAAAI,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcF,IAAI,cAAAG,kBAAA,uBAAlBA,kBAAA,CAAoBnB,OAAO,KAAI,oBAAoB,CAAC;MAC7DD,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB;EACF,CAAC;EAED,OAAO;IACLP,QAAQ;IACRY,YAAY;IACZK,YAAY;IACZX,OAAO;IACPE,OAAO;IACPE;EACF,CAAC;AACH,CAAC;AAACX,EAAA,CApDID,eAAe;AAsDrB,eAAeA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}