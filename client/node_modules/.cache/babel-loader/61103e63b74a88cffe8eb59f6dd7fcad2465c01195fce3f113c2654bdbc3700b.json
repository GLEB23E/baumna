{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/glebch/workprojects/baumna/client/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListIndexesCursor = void 0;\nconst execute_operation_1 = require(\"../operations/execute_operation\");\nconst indexes_1 = require(\"../operations/indexes\");\nconst abstract_cursor_1 = require(\"./abstract_cursor\");\n/** @public */\nclass ListIndexesCursor extends abstract_cursor_1.AbstractCursor {\n  constructor(collection, options) {\n    super(collection.client, collection.s.namespace, options);\n    this.parent = collection;\n    this.options = options;\n  }\n  clone() {\n    return new ListIndexesCursor(this.parent, _objectSpread(_objectSpread({}, this.options), this.cursorOptions));\n  }\n  /** @internal */\n  async _initialize(session) {\n    const operation = new indexes_1.ListIndexesOperation(this.parent, _objectSpread(_objectSpread(_objectSpread({}, this.cursorOptions), this.options), {}, {\n      session\n    }));\n    const response = await (0, execute_operation_1.executeOperation)(this.parent.client, operation, this.timeoutContext);\n    return {\n      server: operation.server,\n      session,\n      response\n    };\n  }\n}\nexports.ListIndexesCursor = ListIndexesCursor;","map":{"version":3,"names":["execute_operation_1","require","indexes_1","abstract_cursor_1","ListIndexesCursor","AbstractCursor","constructor","collection","options","client","s","namespace","parent","clone","_objectSpread","cursorOptions","_initialize","session","operation","ListIndexesOperation","response","executeOperation","timeoutContext","server","exports"],"sources":["/Users/glebch/workprojects/baumna/client/node_modules/mongodb/src/cursor/list_indexes_cursor.ts"],"sourcesContent":["import type { Collection } from '../collection';\nimport { executeOperation } from '../operations/execute_operation';\nimport { ListIndexesOperation, type ListIndexesOptions } from '../operations/indexes';\nimport type { ClientSession } from '../sessions';\nimport { AbstractCursor, type InitialCursorResponse } from './abstract_cursor';\n\n/** @public */\nexport class ListIndexesCursor extends AbstractCursor {\n  parent: Collection;\n  options?: ListIndexesOptions;\n\n  constructor(collection: Collection, options?: ListIndexesOptions) {\n    super(collection.client, collection.s.namespace, options);\n    this.parent = collection;\n    this.options = options;\n  }\n\n  clone(): ListIndexesCursor {\n    return new ListIndexesCursor(this.parent, {\n      ...this.options,\n      ...this.cursorOptions\n    });\n  }\n\n  /** @internal */\n  async _initialize(session: ClientSession | undefined): Promise<InitialCursorResponse> {\n    const operation = new ListIndexesOperation(this.parent, {\n      ...this.cursorOptions,\n      ...this.options,\n      session\n    });\n\n    const response = await executeOperation(this.parent.client, operation, this.timeoutContext);\n\n    return { server: operation.server, session, response };\n  }\n}\n"],"mappings":";;;;;;;AACA,MAAAA,mBAAA,GAAAC,OAAA;AACA,MAAAC,SAAA,GAAAD,OAAA;AAEA,MAAAE,iBAAA,GAAAF,OAAA;AAEA;AACA,MAAaG,iBAAkB,SAAQD,iBAAA,CAAAE,cAAc;EAInDC,YAAYC,UAAsB,EAAEC,OAA4B;IAC9D,KAAK,CAACD,UAAU,CAACE,MAAM,EAAEF,UAAU,CAACG,CAAC,CAACC,SAAS,EAAEH,OAAO,CAAC;IACzD,IAAI,CAACI,MAAM,GAAGL,UAAU;IACxB,IAAI,CAACC,OAAO,GAAGA,OAAO;EACxB;EAEAK,KAAKA,CAAA;IACH,OAAO,IAAIT,iBAAiB,CAAC,IAAI,CAACQ,MAAM,EAAAE,aAAA,CAAAA,aAAA,KACnC,IAAI,CAACN,OAAO,GACZ,IAAI,CAACO,aAAa,CACtB,CAAC;EACJ;EAEA;EACA,MAAMC,WAAWA,CAACC,OAAkC;IAClD,MAAMC,SAAS,GAAG,IAAIhB,SAAA,CAAAiB,oBAAoB,CAAC,IAAI,CAACP,MAAM,EAAAE,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACjD,IAAI,CAACC,aAAa,GAClB,IAAI,CAACP,OAAO;MACfS;IAAO,EACR,CAAC;IAEF,MAAMG,QAAQ,GAAG,MAAM,IAAApB,mBAAA,CAAAqB,gBAAgB,EAAC,IAAI,CAACT,MAAM,CAACH,MAAM,EAAES,SAAS,EAAE,IAAI,CAACI,cAAc,CAAC;IAE3F,OAAO;MAAEC,MAAM,EAAEL,SAAS,CAACK,MAAM;MAAEN,OAAO;MAAEG;IAAQ,CAAE;EACxD;;AA5BFI,OAAA,CAAApB,iBAAA,GAAAA,iBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}