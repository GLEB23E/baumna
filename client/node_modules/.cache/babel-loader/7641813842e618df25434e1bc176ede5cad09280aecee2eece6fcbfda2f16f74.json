{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/glebch/workprojects/baumna/client/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _awaitAsyncGenerator = require(\"/Users/glebch/workprojects/baumna/client/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\nvar _wrapAsyncGenerator = require(\"/Users/glebch/workprojects/baumna/client/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChangeStream = void 0;\nconst collection_1 = require(\"./collection\");\nconst constants_1 = require(\"./constants\");\nconst abstract_cursor_1 = require(\"./cursor/abstract_cursor\");\nconst change_stream_cursor_1 = require(\"./cursor/change_stream_cursor\");\nconst db_1 = require(\"./db\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst mongo_types_1 = require(\"./mongo_types\");\nconst resource_management_1 = require(\"./resource_management\");\nconst timeout_1 = require(\"./timeout\");\nconst utils_1 = require(\"./utils\");\nconst CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument', 'fullDocumentBeforeChange', 'showExpandedEvents'];\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\nconst CHANGE_STREAM_EVENTS = [constants_1.RESUME_TOKEN_CHANGED, constants_1.END, constants_1.CLOSE];\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n  /** @internal */\n  async asyncDispose() {\n    await this.close();\n  }\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  constructor(parent) {\n    let pipeline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super();\n    this.pipeline = pipeline;\n    this.options = _objectSpread({}, options);\n    let serverSelectionTimeoutMS;\n    delete this.options.writeConcern;\n    if (parent instanceof collection_1.Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n      serverSelectionTimeoutMS = parent.s.db.client.options.serverSelectionTimeoutMS;\n    } else if (parent instanceof db_1.Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n      serverSelectionTimeoutMS = parent.client.options.serverSelectionTimeoutMS;\n    } else if (parent instanceof mongo_client_1.MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n      serverSelectionTimeoutMS = parent.options.serverSelectionTimeoutMS;\n    } else {\n      throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n    }\n    this.contextOwner = Symbol();\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n    if (!this.options.readPreference && parent.readPreference) {\n      this.options.readPreference = parent.readPreference;\n    }\n    // Create contained Change Stream cursor\n    this.cursor = this._createChangeStreamCursor(options);\n    this.isClosed = false;\n    this.mode = false;\n    // Listen for any `change` listeners being added to ChangeStream\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        this._streamEvents(this.cursor);\n      }\n    });\n    this.on('removeListener', eventName => {\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        var _this$cursorStream;\n        (_this$cursorStream = this.cursorStream) === null || _this$cursorStream === void 0 || _this$cursorStream.removeAllListeners('data');\n      }\n    });\n    if (this.options.timeoutMS != null) {\n      this.timeoutContext = new timeout_1.CSOTTimeoutContext({\n        timeoutMS: this.options.timeoutMS,\n        serverSelectionTimeoutMS\n      });\n    }\n  }\n  /** The cached resume token that is used to resume after the most recently returned change. */\n  get resumeToken() {\n    var _this$cursor;\n    return (_this$cursor = this.cursor) === null || _this$cursor === void 0 ? void 0 : _this$cursor.resumeToken;\n  }\n  /** Check if there is any document still available in the Change Stream */\n  async hasNext() {\n    var _this$timeoutContext;\n    this._setIsIterator();\n    // Change streams must resume indefinitely while each resume event succeeds.\n    // This loop continues until either a change event is received or until a resume attempt\n    // fails.\n    (_this$timeoutContext = this.timeoutContext) === null || _this$timeoutContext === void 0 || _this$timeoutContext.refresh();\n    try {\n      while (true) {\n        try {\n          const hasNext = await this.cursor.hasNext();\n          return hasNext;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error, this.cursor.id != null);\n          } catch (error) {\n            if (error instanceof error_1.MongoOperationTimeoutError && this.cursor.id == null) {\n              throw error;\n            }\n            try {\n              await this.close();\n            } catch (error) {\n              (0, utils_1.squashError)(error);\n            }\n            throw error;\n          }\n        }\n      }\n    } finally {\n      var _this$timeoutContext2;\n      (_this$timeoutContext2 = this.timeoutContext) === null || _this$timeoutContext2 === void 0 || _this$timeoutContext2.clear();\n    }\n  }\n  /** Get the next available document from the Change Stream. */\n  async next() {\n    var _this$timeoutContext3;\n    this._setIsIterator();\n    // Change streams must resume indefinitely while each resume event succeeds.\n    // This loop continues until either a change event is received or until a resume attempt\n    // fails.\n    (_this$timeoutContext3 = this.timeoutContext) === null || _this$timeoutContext3 === void 0 || _this$timeoutContext3.refresh();\n    try {\n      while (true) {\n        try {\n          const change = await this.cursor.next();\n          const processedChange = this._processChange(change !== null && change !== void 0 ? change : null);\n          return processedChange;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error, this.cursor.id != null);\n          } catch (error) {\n            if (error instanceof error_1.MongoOperationTimeoutError && this.cursor.id == null) {\n              throw error;\n            }\n            try {\n              await this.close();\n            } catch (error) {\n              (0, utils_1.squashError)(error);\n            }\n            throw error;\n          }\n        }\n      }\n    } finally {\n      var _this$timeoutContext4;\n      (_this$timeoutContext4 = this.timeoutContext) === null || _this$timeoutContext4 === void 0 || _this$timeoutContext4.clear();\n    }\n  }\n  /**\n   * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n   */\n  async tryNext() {\n    var _this$timeoutContext5;\n    this._setIsIterator();\n    // Change streams must resume indefinitely while each resume event succeeds.\n    // This loop continues until either a change event is received or until a resume attempt\n    // fails.\n    (_this$timeoutContext5 = this.timeoutContext) === null || _this$timeoutContext5 === void 0 || _this$timeoutContext5.refresh();\n    try {\n      while (true) {\n        try {\n          const change = await this.cursor.tryNext();\n          return change !== null && change !== void 0 ? change : null;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error, this.cursor.id != null);\n          } catch (error) {\n            if (error instanceof error_1.MongoOperationTimeoutError && this.cursor.id == null) throw error;\n            try {\n              await this.close();\n            } catch (error) {\n              (0, utils_1.squashError)(error);\n            }\n            throw error;\n          }\n        }\n      }\n    } finally {\n      var _this$timeoutContext6;\n      (_this$timeoutContext6 = this.timeoutContext) === null || _this$timeoutContext6 === void 0 || _this$timeoutContext6.clear();\n    }\n  }\n  [Symbol.asyncIterator]() {\n    var _this = this;\n    return _wrapAsyncGenerator(function* () {\n      if (_this.closed) {\n        return;\n      }\n      try {\n        // Change streams run indefinitely as long as errors are resumable\n        // So the only loop breaking condition is if `next()` throws\n        while (true) {\n          yield yield _awaitAsyncGenerator(_this.next());\n        }\n      } finally {\n        try {\n          yield _awaitAsyncGenerator(_this.close());\n        } catch (error) {\n          (0, utils_1.squashError)(error);\n        }\n      }\n    })();\n  }\n  /** Is the cursor closed */\n  get closed() {\n    return this.isClosed || this.cursor.closed;\n  }\n  /**\n   * Frees the internal resources used by the change stream.\n   */\n  async close() {\n    var _this$timeoutContext7;\n    (_this$timeoutContext7 = this.timeoutContext) === null || _this$timeoutContext7 === void 0 || _this$timeoutContext7.clear();\n    this.timeoutContext = undefined;\n    this.isClosed = true;\n    const cursor = this.cursor;\n    try {\n      await cursor.close();\n    } finally {\n      this._endStream();\n    }\n  }\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   *\n   * NOTE: When using a Stream to process change stream events, the stream will\n   * NOT automatically resume in the case a resumable error is encountered.\n   *\n   * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n   */\n  stream(options) {\n    if (this.closed) {\n      throw new error_1.MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n    }\n    this.streamOptions = options;\n    return this.cursor.stream(options);\n  }\n  /** @internal */\n  _setIsEmitter() {\n    if (this.mode === 'iterator') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n    }\n    this.mode = 'emitter';\n  }\n  /** @internal */\n  _setIsIterator() {\n    if (this.mode === 'emitter') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n    }\n    this.mode = 'iterator';\n  }\n  /**\n   * Create a new change stream cursor based on self's configuration\n   * @internal\n   */\n  _createChangeStreamCursor(options) {\n    const changeStreamStageOptions = (0, utils_1.filterOptions)(options, CHANGE_STREAM_OPTIONS);\n    if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n      changeStreamStageOptions.allChangesForCluster = true;\n    }\n    const pipeline = [{\n      $changeStream: changeStreamStageOptions\n    }, ...this.pipeline];\n    const client = this.type === CHANGE_DOMAIN_TYPES.CLUSTER ? this.parent : this.type === CHANGE_DOMAIN_TYPES.DATABASE ? this.parent.client : this.type === CHANGE_DOMAIN_TYPES.COLLECTION ? this.parent.client : null;\n    if (client == null) {\n      // This should never happen because of the assertion in the constructor\n      throw new error_1.MongoRuntimeError(\"Changestream type should only be one of cluster, database, collection. Found \".concat(this.type.toString()));\n    }\n    const changeStreamCursor = new change_stream_cursor_1.ChangeStreamCursor(client, this.namespace, pipeline, _objectSpread(_objectSpread({}, options), {}, {\n      timeoutContext: this.timeoutContext ? new abstract_cursor_1.CursorTimeoutContext(this.timeoutContext, this.contextOwner) : undefined\n    }));\n    for (const event of CHANGE_STREAM_EVENTS) {\n      changeStreamCursor.on(event, e => this.emit(event, e));\n    }\n    if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n      this._streamEvents(changeStreamCursor);\n    }\n    return changeStreamCursor;\n  }\n  /** @internal */\n  _closeEmitterModeWithError(error) {\n    this.emit(ChangeStream.ERROR, error);\n    this.close().then(undefined, utils_1.squashError);\n  }\n  /** @internal */\n  _streamEvents(cursor) {\n    var _this$cursorStream2;\n    this._setIsEmitter();\n    const stream = (_this$cursorStream2 = this.cursorStream) !== null && _this$cursorStream2 !== void 0 ? _this$cursorStream2 : cursor.stream();\n    this.cursorStream = stream;\n    stream.on('data', change => {\n      var _this$timeoutContext8;\n      try {\n        const processedChange = this._processChange(change);\n        this.emit(ChangeStream.CHANGE, processedChange);\n      } catch (error) {\n        this.emit(ChangeStream.ERROR, error);\n      }\n      (_this$timeoutContext8 = this.timeoutContext) === null || _this$timeoutContext8 === void 0 || _this$timeoutContext8.refresh();\n    });\n    stream.on('error', error => this._processErrorStreamMode(error, this.cursor.id != null));\n  }\n  /** @internal */\n  _endStream() {\n    const cursorStream = this.cursorStream;\n    if (cursorStream) {\n      ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n      cursorStream.destroy();\n    }\n    this.cursorStream = undefined;\n  }\n  /** @internal */\n  _processChange(change) {\n    if (this.isClosed) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n    }\n    // a null change means the cursor has been notified, implicitly closing the change stream\n    if (change == null) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n    }\n    if (change && !change._id) {\n      throw new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n    }\n    // cache the resume token\n    this.cursor.cacheResumeToken(change._id);\n    // wipe the startAtOperationTime if there was one so that there won't be a conflict\n    // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n    this.options.startAtOperationTime = undefined;\n    return change;\n  }\n  /** @internal */\n  _processErrorStreamMode(changeStreamError, cursorInitialized) {\n    // If the change stream has been closed explicitly, do not process error.\n    if (this.isClosed) return;\n    if (cursorInitialized && ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion) || changeStreamError instanceof error_1.MongoOperationTimeoutError)) {\n      this._endStream();\n      this.cursor.close().then(() => this._resume(changeStreamError), e => {\n        (0, utils_1.squashError)(e);\n        return this._resume(changeStreamError);\n      }).then(() => {\n        if (changeStreamError instanceof error_1.MongoOperationTimeoutError) this.emit(ChangeStream.ERROR, changeStreamError);\n      }, () => this._closeEmitterModeWithError(changeStreamError));\n    } else {\n      this._closeEmitterModeWithError(changeStreamError);\n    }\n  }\n  /** @internal */\n  async _processErrorIteratorMode(changeStreamError, cursorInitialized) {\n    if (this.isClosed) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n    }\n    if (cursorInitialized && ((0, error_1.isResumableError)(changeStreamError, this.cursor.maxWireVersion) || changeStreamError instanceof error_1.MongoOperationTimeoutError)) {\n      try {\n        await this.cursor.close();\n      } catch (error) {\n        (0, utils_1.squashError)(error);\n      }\n      await this._resume(changeStreamError);\n      if (changeStreamError instanceof error_1.MongoOperationTimeoutError) throw changeStreamError;\n    } else {\n      try {\n        await this.close();\n      } catch (error) {\n        (0, utils_1.squashError)(error);\n      }\n      throw changeStreamError;\n    }\n  }\n  async _resume(changeStreamError) {\n    var _this$timeoutContext9;\n    (_this$timeoutContext9 = this.timeoutContext) === null || _this$timeoutContext9 === void 0 || _this$timeoutContext9.refresh();\n    const topology = (0, utils_1.getTopology)(this.parent);\n    try {\n      await topology.selectServer(this.cursor.readPreference, {\n        operationName: 'reconnect topology in change stream',\n        timeoutContext: this.timeoutContext\n      });\n      this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n    } catch (_unused) {\n      // if the topology can't reconnect, close the stream\n      await this.close();\n      throw changeStreamError;\n    }\n  }\n}\nexports.ChangeStream = ChangeStream;\n/** @event */\nChangeStream.RESPONSE = constants_1.RESPONSE;\n/** @event */\nChangeStream.MORE = constants_1.MORE;\n/** @event */\nChangeStream.INIT = constants_1.INIT;\n/** @event */\nChangeStream.CLOSE = constants_1.CLOSE;\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\nChangeStream.CHANGE = constants_1.CHANGE;\n/** @event */\nChangeStream.END = constants_1.END;\n/** @event */\nChangeStream.ERROR = constants_1.ERROR;\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\nChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;\n(0, resource_management_1.configureResourceManagement)(ChangeStream.prototype);","map":{"version":3,"names":["collection_1","require","constants_1","abstract_cursor_1","change_stream_cursor_1","db_1","error_1","mongo_client_1","mongo_types_1","resource_management_1","timeout_1","utils_1","CHANGE_STREAM_OPTIONS","CHANGE_DOMAIN_TYPES","COLLECTION","Symbol","DATABASE","CLUSTER","CHANGE_STREAM_EVENTS","RESUME_TOKEN_CHANGED","END","CLOSE","NO_RESUME_TOKEN_ERROR","CHANGESTREAM_CLOSED_ERROR","ChangeStream","TypedEventEmitter","asyncDispose","close","constructor","parent","pipeline","arguments","length","undefined","options","_objectSpread","serverSelectionTimeoutMS","writeConcern","Collection","type","s","db","client","Db","MongoClient","MongoChangeStreamError","contextOwner","namespace","readPreference","cursor","_createChangeStreamCursor","isClosed","mode","on","eventName","listenerCount","_streamEvents","_this$cursorStream","cursorStream","removeAllListeners","timeoutMS","timeoutContext","CSOTTimeoutContext","resumeToken","_this$cursor","hasNext","_this$timeoutContext","_setIsIterator","refresh","error","_processErrorIteratorMode","id","MongoOperationTimeoutError","squashError","_this$timeoutContext2","clear","next","_this$timeoutContext3","change","processedChange","_processChange","_this$timeoutContext4","tryNext","_this$timeoutContext5","_this$timeoutContext6","asyncIterator","_this","_wrapAsyncGenerator","closed","_awaitAsyncGenerator","_this$timeoutContext7","_endStream","stream","streamOptions","_setIsEmitter","MongoAPIError","changeStreamStageOptions","filterOptions","allChangesForCluster","$changeStream","MongoRuntimeError","concat","toString","changeStreamCursor","ChangeStreamCursor","CursorTimeoutContext","event","e","emit","CHANGE","_closeEmitterModeWithError","ERROR","then","_this$cursorStream2","_this$timeoutContext8","_processErrorStreamMode","forEach","destroy","_id","cacheResumeToken","startAtOperationTime","changeStreamError","cursorInitialized","isResumableError","maxWireVersion","_resume","_this$timeoutContext9","topology","getTopology","selectServer","operationName","resumeOptions","_unused","exports","RESPONSE","MORE","INIT","configureResourceManagement","prototype"],"sources":["/Users/glebch/workprojects/baumna/client/node_modules/mongodb/src/change_stream.ts"],"sourcesContent":["import type { Readable } from 'stream';\n\nimport type { Binary, Document, Timestamp } from './bson';\nimport { Collection } from './collection';\nimport { CHANGE, CLOSE, END, ERROR, INIT, MORE, RESPONSE, RESUME_TOKEN_CHANGED } from './constants';\nimport { type CursorStreamOptions, CursorTimeoutContext } from './cursor/abstract_cursor';\nimport { ChangeStreamCursor, type ChangeStreamCursorOptions } from './cursor/change_stream_cursor';\nimport { Db } from './db';\nimport {\n  type AnyError,\n  isResumableError,\n  MongoAPIError,\n  MongoChangeStreamError,\n  MongoOperationTimeoutError,\n  MongoRuntimeError\n} from './error';\nimport { MongoClient } from './mongo_client';\nimport { type InferIdType, TypedEventEmitter } from './mongo_types';\nimport type { AggregateOptions } from './operations/aggregate';\nimport type { CollationOptions, OperationParent } from './operations/command';\nimport type { ReadPreference } from './read_preference';\nimport { type AsyncDisposable, configureResourceManagement } from './resource_management';\nimport type { ServerSessionId } from './sessions';\nimport { CSOTTimeoutContext, type TimeoutContext } from './timeout';\nimport { filterOptions, getTopology, type MongoDBNamespace, squashError } from './utils';\n\nconst CHANGE_STREAM_OPTIONS = [\n  'resumeAfter',\n  'startAfter',\n  'startAtOperationTime',\n  'fullDocument',\n  'fullDocumentBeforeChange',\n  'showExpandedEvents'\n] as const;\n\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\n\nconst CHANGE_STREAM_EVENTS = [RESUME_TOKEN_CHANGED, END, CLOSE] as const;\n\nconst NO_RESUME_TOKEN_ERROR =\n  'A change stream document has been received that lacks a resume token (_id).';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n\n/**\n * @public\n * @deprecated Please use the ChangeStreamCursorOptions type instead.\n */\nexport interface ResumeOptions {\n  startAtOperationTime?: Timestamp;\n  batchSize?: number;\n  maxAwaitTimeMS?: number;\n  collation?: CollationOptions;\n  readPreference?: ReadPreference;\n  resumeAfter?: ResumeToken;\n  startAfter?: ResumeToken;\n  fullDocument?: string;\n}\n\n/**\n * Represents the logical starting point for a new ChangeStream or resuming a ChangeStream on the server.\n * @see https://www.mongodb.com/docs/manual/changeStreams/#std-label-change-stream-resume\n * @public\n */\nexport type ResumeToken = unknown;\n\n/**\n * Represents a specific point in time on a server. Can be retrieved by using `db.command()`\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/method/db.runCommand/#response\n */\nexport type OperationTime = Timestamp;\n\n/**\n * Options that can be passed to a ChangeStream. Note that startAfter, resumeAfter, and startAtOperationTime are all mutually exclusive, and the server will error if more than one is specified.\n * @public\n */\nexport interface ChangeStreamOptions extends Omit<AggregateOptions, 'writeConcern'> {\n  /**\n   * Allowed values: 'updateLookup', 'whenAvailable', 'required'.\n   *\n   * When set to 'updateLookup', the change notification for partial updates\n   * will include both a delta describing the changes to the document as well\n   * as a copy of the entire document that was changed from some time after\n   * the change occurred.\n   *\n   * When set to 'whenAvailable', configures the change stream to return the\n   * post-image of the modified document for replace and update change events\n   * if the post-image for this event is available.\n   *\n   * When set to 'required', the same behavior as 'whenAvailable' except that\n   * an error is raised if the post-image is not available.\n   */\n  fullDocument?: string;\n\n  /**\n   * Allowed values: 'whenAvailable', 'required', 'off'.\n   *\n   * The default is to not send a value, which is equivalent to 'off'.\n   *\n   * When set to 'whenAvailable', configures the change stream to return the\n   * pre-image of the modified document for replace, update, and delete change\n   * events if it is available.\n   *\n   * When set to 'required', the same behavior as 'whenAvailable' except that\n   * an error is raised if the pre-image is not available.\n   */\n  fullDocumentBeforeChange?: string;\n  /** The maximum amount of time for the server to wait on new documents to satisfy a change stream query. */\n  maxAwaitTimeMS?: number;\n  /**\n   * Allows you to start a changeStream after a specified event.\n   * @see https://www.mongodb.com/docs/manual/changeStreams/#resumeafter-for-change-streams\n   */\n  resumeAfter?: ResumeToken;\n  /**\n   * Similar to resumeAfter, but will allow you to start after an invalidated event.\n   * @see https://www.mongodb.com/docs/manual/changeStreams/#startafter-for-change-streams\n   */\n  startAfter?: ResumeToken;\n  /** Will start the changeStream after the specified operationTime. */\n  startAtOperationTime?: OperationTime;\n  /**\n   * The number of documents to return per batch.\n   * @see https://www.mongodb.com/docs/manual/reference/command/aggregate\n   */\n  batchSize?: number;\n\n  /**\n   * When enabled, configures the change stream to include extra change events.\n   *\n   * - createIndexes\n   * - dropIndexes\n   * - modify\n   * - create\n   * - shardCollection\n   * - reshardCollection\n   * - refineCollectionShardKey\n   */\n  showExpandedEvents?: boolean;\n}\n\n/** @public */\nexport interface ChangeStreamNameSpace {\n  db: string;\n  coll: string;\n}\n\n/** @public */\nexport interface ChangeStreamDocumentKey<TSchema extends Document = Document> {\n  /**\n   * For unsharded collections this contains a single field `_id`.\n   * For sharded collections, this will contain all the components of the shard key\n   */\n  documentKey: { _id: InferIdType<TSchema>; [shardKey: string]: any };\n}\n\n/** @public */\nexport interface ChangeStreamSplitEvent {\n  /** Which fragment of the change this is. */\n  fragment: number;\n  /** The total number of fragments. */\n  of: number;\n}\n\n/** @public */\nexport interface ChangeStreamDocumentCommon {\n  /**\n   * The id functions as an opaque token for use when resuming an interrupted\n   * change stream.\n   */\n  _id: ResumeToken;\n  /**\n   * The timestamp from the oplog entry associated with the event.\n   * For events that happened as part of a multi-document transaction, the associated change stream\n   * notifications will have the same clusterTime value, namely the time when the transaction was committed.\n   * On a sharded cluster, events that occur on different shards can have the same clusterTime but be\n   * associated with different transactions or even not be associated with any transaction.\n   * To identify events for a single transaction, you can use the combination of lsid and txnNumber in the change stream event document.\n   */\n  clusterTime?: Timestamp;\n\n  /**\n   * The transaction number.\n   * Only present if the operation is part of a multi-document transaction.\n   *\n   * **NOTE:** txnNumber can be a Long if promoteLongs is set to false\n   */\n  txnNumber?: number;\n\n  /**\n   * The identifier for the session associated with the transaction.\n   * Only present if the operation is part of a multi-document transaction.\n   */\n  lsid?: ServerSessionId;\n\n  /**\n   * When the change stream's backing aggregation pipeline contains the $changeStreamSplitLargeEvent\n   * stage, events larger than 16MB will be split into multiple events and contain the\n   * following information about which fragment the current event is.\n   */\n  splitEvent?: ChangeStreamSplitEvent;\n}\n\n/** @public */\nexport interface ChangeStreamDocumentCollectionUUID {\n  /**\n   * The UUID (Binary subtype 4) of the collection that the operation was performed on.\n   *\n   * Only present when the `showExpandedEvents` flag is enabled.\n   *\n   * **NOTE:** collectionUUID will be converted to a NodeJS Buffer if the promoteBuffers\n   *    flag is enabled.\n   *\n   * @sinceServerVersion 6.1.0\n   */\n  collectionUUID: Binary;\n}\n\n/** @public */\nexport interface ChangeStreamDocumentOperationDescription {\n  /**\n   * An description of the operation.\n   *\n   * Only present when the `showExpandedEvents` flag is enabled.\n   *\n   * @sinceServerVersion 6.1.0\n   */\n  operationDescription?: Document;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#insert-event\n */\nexport interface ChangeStreamInsertDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema>,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'insert';\n  /** This key will contain the document being inserted */\n  fullDocument: TSchema;\n  /** Namespace the insert event occurred on */\n  ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#update-event\n */\nexport interface ChangeStreamUpdateDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema>,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'update';\n  /**\n   * This is only set if `fullDocument` is set to `'updateLookup'`\n   * Contains the point-in-time post-image of the modified document if the\n   * post-image is available and either 'required' or 'whenAvailable' was\n   * specified for the 'fullDocument' option when creating the change stream.\n   */\n  fullDocument?: TSchema;\n  /** Contains a description of updated and removed fields in this operation */\n  updateDescription: UpdateDescription<TSchema>;\n  /** Namespace the update event occurred on */\n  ns: ChangeStreamNameSpace;\n  /**\n   * Contains the pre-image of the modified or deleted document if the\n   * pre-image is available for the change event and either 'required' or\n   * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\n   * when creating the change stream. If 'whenAvailable' was specified but the\n   * pre-image is unavailable, this will be explicitly set to null.\n   */\n  fullDocumentBeforeChange?: TSchema;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#replace-event\n */\nexport interface ChangeStreamReplaceDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema> {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'replace';\n  /** The fullDocument of a replace event represents the document after the insert of the replacement document */\n  fullDocument: TSchema;\n  /** Namespace the replace event occurred on */\n  ns: ChangeStreamNameSpace;\n  /**\n   * Contains the pre-image of the modified or deleted document if the\n   * pre-image is available for the change event and either 'required' or\n   * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\n   * when creating the change stream. If 'whenAvailable' was specified but the\n   * pre-image is unavailable, this will be explicitly set to null.\n   */\n  fullDocumentBeforeChange?: TSchema;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#delete-event\n */\nexport interface ChangeStreamDeleteDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema>,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'delete';\n  /** Namespace the delete event occurred on */\n  ns: ChangeStreamNameSpace;\n  /**\n   * Contains the pre-image of the modified or deleted document if the\n   * pre-image is available for the change event and either 'required' or\n   * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\n   * when creating the change stream. If 'whenAvailable' was specified but the\n   * pre-image is unavailable, this will be explicitly set to null.\n   */\n  fullDocumentBeforeChange?: TSchema;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#drop-event\n */\nexport interface ChangeStreamDropDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'drop';\n  /** Namespace the drop event occurred on */\n  ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#rename-event\n */\nexport interface ChangeStreamRenameDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'rename';\n  /** The new name for the `ns.coll` collection */\n  to: { db: string; coll: string };\n  /** The \"from\" namespace that the rename occurred on */\n  ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#dropdatabase-event\n */\nexport interface ChangeStreamDropDatabaseDocument extends ChangeStreamDocumentCommon {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'dropDatabase';\n  /** The database dropped */\n  ns: { db: string };\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#invalidate-event\n */\nexport interface ChangeStreamInvalidateDocument extends ChangeStreamDocumentCommon {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'invalidate';\n}\n\n/**\n * Only present when the `showExpandedEvents` flag is enabled.\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/createIndexes/#mongodb-data-createIndexes\n */\nexport interface ChangeStreamCreateIndexDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'createIndexes';\n}\n\n/**\n * Only present when the `showExpandedEvents` flag is enabled.\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/dropIndexes/#mongodb-data-dropIndexes\n */\nexport interface ChangeStreamDropIndexDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'dropIndexes';\n}\n\n/**\n * Only present when the `showExpandedEvents` flag is enabled.\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/modify/#mongodb-data-modify\n */\nexport interface ChangeStreamCollModDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'modify';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/create/#mongodb-data-create\n */\nexport interface ChangeStreamCreateDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'create';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/shardCollection/#mongodb-data-shardCollection\n */\nexport interface ChangeStreamShardCollectionDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'shardCollection';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/reshardCollection/#mongodb-data-reshardCollection\n */\nexport interface ChangeStreamReshardCollectionDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'reshardCollection';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/refineCollectionShardKey/#mongodb-data-refineCollectionShardKey\n */\nexport interface ChangeStreamRefineCollectionShardKeyDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'refineCollectionShardKey';\n}\n\n/** @public */\nexport type ChangeStreamDocument<TSchema extends Document = Document> =\n  | ChangeStreamInsertDocument<TSchema>\n  | ChangeStreamUpdateDocument<TSchema>\n  | ChangeStreamReplaceDocument<TSchema>\n  | ChangeStreamDeleteDocument<TSchema>\n  | ChangeStreamDropDocument\n  | ChangeStreamRenameDocument\n  | ChangeStreamDropDatabaseDocument\n  | ChangeStreamInvalidateDocument\n  | ChangeStreamCreateIndexDocument\n  | ChangeStreamCreateDocument\n  | ChangeStreamCollModDocument\n  | ChangeStreamDropIndexDocument\n  | ChangeStreamShardCollectionDocument\n  | ChangeStreamReshardCollectionDocument\n  | ChangeStreamRefineCollectionShardKeyDocument;\n\n/** @public */\nexport interface UpdateDescription<TSchema extends Document = Document> {\n  /**\n   * A document containing key:value pairs of names of the fields that were\n   * changed, and the new value for those fields.\n   */\n  updatedFields?: Partial<TSchema>;\n\n  /**\n   * An array of field names that were removed from the document.\n   */\n  removedFields?: string[];\n\n  /**\n   * An array of documents which record array truncations performed with pipeline-based updates using one or more of the following stages:\n   * - $addFields\n   * - $set\n   * - $replaceRoot\n   * - $replaceWith\n   */\n  truncatedArrays?: Array<{\n    /** The name of the truncated field. */\n    field: string;\n    /** The number of elements in the truncated array. */\n    newSize: number;\n  }>;\n\n  /**\n   * A document containing additional information about any ambiguous update paths from the update event.  The document\n   * maps the full ambiguous update path to an array containing the actual resolved components of the path.  For example,\n   * given a document shaped like `{ a: { '0': 0 } }`, and an update of `{ $inc: 'a.0' }`, disambiguated paths would look like\n   * the following:\n   *\n   * ```\n   *   {\n   *     'a.0': ['a', '0']\n   *   }\n   * ```\n   *\n   * This field is only present when there are ambiguous paths that are updated as a part of the update event and `showExpandedEvents`\n   * is enabled for the change stream.\n   * @sinceServerVersion 6.1.0\n   */\n  disambiguatedPaths?: Document;\n}\n\n/** @public */\nexport type ChangeStreamEvents<\n  TSchema extends Document = Document,\n  TChange extends Document = ChangeStreamDocument<TSchema>\n> = {\n  resumeTokenChanged(token: ResumeToken): void;\n  init(response: any): void;\n  more(response?: any): void;\n  response(): void;\n  end(): void;\n  error(error: Error): void;\n  change(change: TChange): void;\n  /**\n   * @remarks Note that the `close` event is currently emitted whenever the internal `ChangeStreamCursor`\n   * instance is closed, which can occur multiple times for a given `ChangeStream` instance.\n   *\n   * TODO(NODE-6434): address this issue in NODE-6434\n   */\n  close(): void;\n};\n\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nexport class ChangeStream<\n    TSchema extends Document = Document,\n    TChange extends Document = ChangeStreamDocument<TSchema>\n  >\n  extends TypedEventEmitter<ChangeStreamEvents<TSchema, TChange>>\n  implements AsyncDisposable\n{\n  /**\n   * @beta\n   * @experimental\n   * An alias for {@link ChangeStream.close|ChangeStream.close()}.\n   */\n  declare [Symbol.asyncDispose]: () => Promise<void>;\n  /** @internal */\n  async asyncDispose() {\n    await this.close();\n  }\n\n  pipeline: Document[];\n  /**\n   * @remarks WriteConcern can still be present on the options because\n   * we inherit options from the client/db/collection.  The\n   * key must be present on the options in order to delete it.\n   * This allows typescript to delete the key but will\n   * not allow a writeConcern to be assigned as a property on options.\n   */\n  options: ChangeStreamOptions & { writeConcern?: never };\n  parent: MongoClient | Db | Collection;\n  namespace: MongoDBNamespace;\n  type: symbol;\n  /** @internal */\n  private cursor: ChangeStreamCursor<TSchema, TChange>;\n  streamOptions?: CursorStreamOptions;\n  /** @internal */\n  private cursorStream?: Readable & AsyncIterable<TChange>;\n  /** @internal */\n  private isClosed: boolean;\n  /** @internal */\n  private mode: false | 'iterator' | 'emitter';\n\n  /** @event */\n  static readonly RESPONSE = RESPONSE;\n  /** @event */\n  static readonly MORE = MORE;\n  /** @event */\n  static readonly INIT = INIT;\n  /** @event */\n  static readonly CLOSE = CLOSE;\n  /**\n   * Fired for each new matching change in the specified namespace. Attaching a `change`\n   * event listener to a Change Stream will switch the stream into flowing mode. Data will\n   * then be passed as soon as it is available.\n   * @event\n   */\n  static readonly CHANGE = CHANGE;\n  /** @event */\n  static readonly END = END;\n  /** @event */\n  static readonly ERROR = ERROR;\n  /**\n   * Emitted each time the change stream stores a new resume token.\n   * @event\n   */\n  static readonly RESUME_TOKEN_CHANGED = RESUME_TOKEN_CHANGED;\n\n  private timeoutContext?: TimeoutContext;\n  /**\n   * Note that this property is here to uniquely identify a ChangeStream instance as the owner of\n   * the {@link CursorTimeoutContext} instance (see {@link ChangeStream._createChangeStreamCursor}) to ensure\n   * that {@link AbstractCursor.close} does not mutate the timeoutContext.\n   */\n  private contextOwner: symbol;\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  constructor(\n    parent: OperationParent,\n    pipeline: Document[] = [],\n    options: ChangeStreamOptions = {}\n  ) {\n    super();\n\n    this.pipeline = pipeline;\n    this.options = { ...options };\n    let serverSelectionTimeoutMS: number;\n    delete this.options.writeConcern;\n\n    if (parent instanceof Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n      serverSelectionTimeoutMS = parent.s.db.client.options.serverSelectionTimeoutMS;\n    } else if (parent instanceof Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n      serverSelectionTimeoutMS = parent.client.options.serverSelectionTimeoutMS;\n    } else if (parent instanceof MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n      serverSelectionTimeoutMS = parent.options.serverSelectionTimeoutMS;\n    } else {\n      throw new MongoChangeStreamError(\n        'Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient'\n      );\n    }\n\n    this.contextOwner = Symbol();\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n    if (!this.options.readPreference && parent.readPreference) {\n      this.options.readPreference = parent.readPreference;\n    }\n\n    // Create contained Change Stream cursor\n    this.cursor = this._createChangeStreamCursor(options);\n\n    this.isClosed = false;\n    this.mode = false;\n\n    // Listen for any `change` listeners being added to ChangeStream\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        this._streamEvents(this.cursor);\n      }\n    });\n\n    this.on('removeListener', eventName => {\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        this.cursorStream?.removeAllListeners('data');\n      }\n    });\n\n    if (this.options.timeoutMS != null) {\n      this.timeoutContext = new CSOTTimeoutContext({\n        timeoutMS: this.options.timeoutMS,\n        serverSelectionTimeoutMS\n      });\n    }\n  }\n\n  /** The cached resume token that is used to resume after the most recently returned change. */\n  get resumeToken(): ResumeToken {\n    return this.cursor?.resumeToken;\n  }\n\n  /** Check if there is any document still available in the Change Stream */\n  async hasNext(): Promise<boolean> {\n    this._setIsIterator();\n    // Change streams must resume indefinitely while each resume event succeeds.\n    // This loop continues until either a change event is received or until a resume attempt\n    // fails.\n\n    this.timeoutContext?.refresh();\n    try {\n      while (true) {\n        try {\n          const hasNext = await this.cursor.hasNext();\n          return hasNext;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error, this.cursor.id != null);\n          } catch (error) {\n            if (error instanceof MongoOperationTimeoutError && this.cursor.id == null) {\n              throw error;\n            }\n            try {\n              await this.close();\n            } catch (error) {\n              squashError(error);\n            }\n            throw error;\n          }\n        }\n      }\n    } finally {\n      this.timeoutContext?.clear();\n    }\n  }\n\n  /** Get the next available document from the Change Stream. */\n  async next(): Promise<TChange> {\n    this._setIsIterator();\n    // Change streams must resume indefinitely while each resume event succeeds.\n    // This loop continues until either a change event is received or until a resume attempt\n    // fails.\n    this.timeoutContext?.refresh();\n\n    try {\n      while (true) {\n        try {\n          const change = await this.cursor.next();\n          const processedChange = this._processChange(change ?? null);\n          return processedChange;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error, this.cursor.id != null);\n          } catch (error) {\n            if (error instanceof MongoOperationTimeoutError && this.cursor.id == null) {\n              throw error;\n            }\n            try {\n              await this.close();\n            } catch (error) {\n              squashError(error);\n            }\n            throw error;\n          }\n        }\n      }\n    } finally {\n      this.timeoutContext?.clear();\n    }\n  }\n\n  /**\n   * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n   */\n  async tryNext(): Promise<TChange | null> {\n    this._setIsIterator();\n    // Change streams must resume indefinitely while each resume event succeeds.\n    // This loop continues until either a change event is received or until a resume attempt\n    // fails.\n    this.timeoutContext?.refresh();\n\n    try {\n      while (true) {\n        try {\n          const change = await this.cursor.tryNext();\n          return change ?? null;\n        } catch (error) {\n          try {\n            await this._processErrorIteratorMode(error, this.cursor.id != null);\n          } catch (error) {\n            if (error instanceof MongoOperationTimeoutError && this.cursor.id == null) throw error;\n            try {\n              await this.close();\n            } catch (error) {\n              squashError(error);\n            }\n            throw error;\n          }\n        }\n      }\n    } finally {\n      this.timeoutContext?.clear();\n    }\n  }\n\n  async *[Symbol.asyncIterator](): AsyncGenerator<TChange, void, void> {\n    if (this.closed) {\n      return;\n    }\n\n    try {\n      // Change streams run indefinitely as long as errors are resumable\n      // So the only loop breaking condition is if `next()` throws\n      while (true) {\n        yield await this.next();\n      }\n    } finally {\n      try {\n        await this.close();\n      } catch (error) {\n        squashError(error);\n      }\n    }\n  }\n\n  /** Is the cursor closed */\n  public get closed(): boolean {\n    return this.isClosed || this.cursor.closed;\n  }\n\n  /**\n   * Frees the internal resources used by the change stream.\n   */\n  async close(): Promise<void> {\n    this.timeoutContext?.clear();\n    this.timeoutContext = undefined;\n    this.isClosed = true;\n\n    const cursor = this.cursor;\n    try {\n      await cursor.close();\n    } finally {\n      this._endStream();\n    }\n  }\n\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   *\n   * NOTE: When using a Stream to process change stream events, the stream will\n   * NOT automatically resume in the case a resumable error is encountered.\n   *\n   * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n   */\n  stream(options?: CursorStreamOptions): Readable & AsyncIterable<TChange> {\n    if (this.closed) {\n      throw new MongoChangeStreamError(CHANGESTREAM_CLOSED_ERROR);\n    }\n\n    this.streamOptions = options;\n    return this.cursor.stream(options);\n  }\n\n  /** @internal */\n  private _setIsEmitter(): void {\n    if (this.mode === 'iterator') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new MongoAPIError(\n        'ChangeStream cannot be used as an EventEmitter after being used as an iterator'\n      );\n    }\n    this.mode = 'emitter';\n  }\n\n  /** @internal */\n  private _setIsIterator(): void {\n    if (this.mode === 'emitter') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new MongoAPIError(\n        'ChangeStream cannot be used as an iterator after being used as an EventEmitter'\n      );\n    }\n    this.mode = 'iterator';\n  }\n\n  /**\n   * Create a new change stream cursor based on self's configuration\n   * @internal\n   */\n  private _createChangeStreamCursor(\n    options: ChangeStreamOptions | ChangeStreamCursorOptions\n  ): ChangeStreamCursor<TSchema, TChange> {\n    const changeStreamStageOptions = filterOptions(options, CHANGE_STREAM_OPTIONS);\n    if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n      changeStreamStageOptions.allChangesForCluster = true;\n    }\n    const pipeline = [{ $changeStream: changeStreamStageOptions }, ...this.pipeline];\n\n    const client: MongoClient | null =\n      this.type === CHANGE_DOMAIN_TYPES.CLUSTER\n        ? (this.parent as MongoClient)\n        : this.type === CHANGE_DOMAIN_TYPES.DATABASE\n          ? (this.parent as Db).client\n          : this.type === CHANGE_DOMAIN_TYPES.COLLECTION\n            ? (this.parent as Collection).client\n            : null;\n\n    if (client == null) {\n      // This should never happen because of the assertion in the constructor\n      throw new MongoRuntimeError(\n        `Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`\n      );\n    }\n\n    const changeStreamCursor = new ChangeStreamCursor<TSchema, TChange>(\n      client,\n      this.namespace,\n      pipeline,\n      {\n        ...options,\n        timeoutContext: this.timeoutContext\n          ? new CursorTimeoutContext(this.timeoutContext, this.contextOwner)\n          : undefined\n      }\n    );\n\n    for (const event of CHANGE_STREAM_EVENTS) {\n      changeStreamCursor.on(event, e => this.emit(event, e));\n    }\n\n    if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n      this._streamEvents(changeStreamCursor);\n    }\n\n    return changeStreamCursor;\n  }\n\n  /** @internal */\n  private _closeEmitterModeWithError(error: AnyError): void {\n    this.emit(ChangeStream.ERROR, error);\n\n    this.close().then(undefined, squashError);\n  }\n\n  /** @internal */\n  private _streamEvents(cursor: ChangeStreamCursor<TSchema, TChange>): void {\n    this._setIsEmitter();\n    const stream = this.cursorStream ?? cursor.stream();\n    this.cursorStream = stream;\n    stream.on('data', change => {\n      try {\n        const processedChange = this._processChange(change);\n        this.emit(ChangeStream.CHANGE, processedChange);\n      } catch (error) {\n        this.emit(ChangeStream.ERROR, error);\n      }\n      this.timeoutContext?.refresh();\n    });\n    stream.on('error', error => this._processErrorStreamMode(error, this.cursor.id != null));\n  }\n\n  /** @internal */\n  private _endStream(): void {\n    const cursorStream = this.cursorStream;\n    if (cursorStream) {\n      ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n      cursorStream.destroy();\n    }\n\n    this.cursorStream = undefined;\n  }\n\n  /** @internal */\n  private _processChange(change: TChange | null): TChange {\n    if (this.isClosed) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n    }\n\n    // a null change means the cursor has been notified, implicitly closing the change stream\n    if (change == null) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR);\n    }\n\n    if (change && !change._id) {\n      throw new MongoChangeStreamError(NO_RESUME_TOKEN_ERROR);\n    }\n\n    // cache the resume token\n    this.cursor.cacheResumeToken(change._id);\n\n    // wipe the startAtOperationTime if there was one so that there won't be a conflict\n    // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n    this.options.startAtOperationTime = undefined;\n\n    return change;\n  }\n\n  /** @internal */\n  private _processErrorStreamMode(changeStreamError: AnyError, cursorInitialized: boolean) {\n    // If the change stream has been closed explicitly, do not process error.\n    if (this.isClosed) return;\n\n    if (\n      cursorInitialized &&\n      (isResumableError(changeStreamError, this.cursor.maxWireVersion) ||\n        changeStreamError instanceof MongoOperationTimeoutError)\n    ) {\n      this._endStream();\n\n      this.cursor\n        .close()\n        .then(\n          () => this._resume(changeStreamError),\n          e => {\n            squashError(e);\n            return this._resume(changeStreamError);\n          }\n        )\n        .then(\n          () => {\n            if (changeStreamError instanceof MongoOperationTimeoutError)\n              this.emit(ChangeStream.ERROR, changeStreamError);\n          },\n          () => this._closeEmitterModeWithError(changeStreamError)\n        );\n    } else {\n      this._closeEmitterModeWithError(changeStreamError);\n    }\n  }\n\n  /** @internal */\n  private async _processErrorIteratorMode(changeStreamError: AnyError, cursorInitialized: boolean) {\n    if (this.isClosed) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      throw new MongoAPIError(CHANGESTREAM_CLOSED_ERROR);\n    }\n\n    if (\n      cursorInitialized &&\n      (isResumableError(changeStreamError, this.cursor.maxWireVersion) ||\n        changeStreamError instanceof MongoOperationTimeoutError)\n    ) {\n      try {\n        await this.cursor.close();\n      } catch (error) {\n        squashError(error);\n      }\n\n      await this._resume(changeStreamError);\n\n      if (changeStreamError instanceof MongoOperationTimeoutError) throw changeStreamError;\n    } else {\n      try {\n        await this.close();\n      } catch (error) {\n        squashError(error);\n      }\n\n      throw changeStreamError;\n    }\n  }\n\n  private async _resume(changeStreamError: AnyError) {\n    this.timeoutContext?.refresh();\n    const topology = getTopology(this.parent);\n    try {\n      await topology.selectServer(this.cursor.readPreference, {\n        operationName: 'reconnect topology in change stream',\n        timeoutContext: this.timeoutContext\n      });\n      this.cursor = this._createChangeStreamCursor(this.cursor.resumeOptions);\n    } catch {\n      // if the topology can't reconnect, close the stream\n      await this.close();\n      throw changeStreamError;\n    }\n  }\n}\n\nconfigureResourceManagement(ChangeStream.prototype);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}