{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/glebch/workprojects/baumna/client/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerSessionPool = exports.ServerSession = exports.ClientSession = void 0;\nexports.maybeClearPinnedConnection = maybeClearPinnedConnection;\nexports.applySession = applySession;\nexports.updateSessionFromResponse = updateSessionFromResponse;\nconst bson_1 = require(\"./bson\");\nconst metrics_1 = require(\"./cmap/metrics\");\nconst shared_1 = require(\"./cmap/wire_protocol/shared\");\nconst constants_1 = require(\"./constants\");\nconst error_1 = require(\"./error\");\nconst mongo_types_1 = require(\"./mongo_types\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst resource_management_1 = require(\"./resource_management\");\nconst common_1 = require(\"./sdam/common\");\nconst timeout_1 = require(\"./timeout\");\nconst transactions_1 = require(\"./transactions\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\nconst minWireVersionForShardedTransactions = 8;\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\nclass ClientSession extends mongo_types_1.TypedEventEmitter {\n  /**\n   * Create a client session.\n   * @internal\n   * @param client - The current client\n   * @param sessionPool - The server session pool (Internal Class)\n   * @param options - Optional settings\n   * @param clientOptions - Optional settings provided when creating a MongoClient\n   */\n  constructor(client, sessionPool, options, clientOptions) {\n    var _options$defaultTimeo, _client$s$options, _options$causalConsis;\n    super();\n    /** @internal */\n    this.timeoutContext = null;\n    if (client == null) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError('ClientSession requires a MongoClient');\n    }\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError('ClientSession requires a ServerSessionPool');\n    }\n    options = options !== null && options !== void 0 ? options : {};\n    this.snapshotEnabled = options.snapshot === true;\n    if (options.causalConsistency === true && this.snapshotEnabled) {\n      throw new error_1.MongoInvalidArgumentError('Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive');\n    }\n    this.client = client;\n    this.sessionPool = sessionPool;\n    this.hasEnded = false;\n    this.clientOptions = clientOptions;\n    this.timeoutMS = (_options$defaultTimeo = options.defaultTimeoutMS) !== null && _options$defaultTimeo !== void 0 ? _options$defaultTimeo : (_client$s$options = client.s.options) === null || _client$s$options === void 0 ? void 0 : _client$s$options.timeoutMS;\n    this.explicit = !!options.explicit;\n    this._serverSession = this.explicit ? this.sessionPool.acquire() : null;\n    this.txnNumberIncrement = 0;\n    const defaultCausalConsistencyValue = this.explicit && options.snapshot !== true;\n    this.supports = {\n      // if we can enable causal consistency, do so by default\n      causalConsistency: (_options$causalConsis = options.causalConsistency) !== null && _options$causalConsis !== void 0 ? _options$causalConsis : defaultCausalConsistencyValue\n    };\n    this.clusterTime = options.initialClusterTime;\n    this.operationTime = undefined;\n    this.owner = options.owner;\n    this.defaultTransactionOptions = _objectSpread({}, options.defaultTransactionOptions);\n    this.transaction = new transactions_1.Transaction();\n  }\n  /** The server id associated with this session */\n  get id() {\n    var _this$serverSession;\n    return (_this$serverSession = this.serverSession) === null || _this$serverSession === void 0 ? void 0 : _this$serverSession.id;\n  }\n  get serverSession() {\n    let serverSession = this._serverSession;\n    if (serverSession == null) {\n      if (this.explicit) {\n        throw new error_1.MongoRuntimeError('Unexpected null serverSession for an explicit session');\n      }\n      if (this.hasEnded) {\n        throw new error_1.MongoRuntimeError('Unexpected null serverSession for an ended implicit session');\n      }\n      serverSession = this.sessionPool.acquire();\n      this._serverSession = serverSession;\n    }\n    return serverSession;\n  }\n  get loadBalanced() {\n    var _this$client$topology;\n    return ((_this$client$topology = this.client.topology) === null || _this$client$topology === void 0 ? void 0 : _this$client$topology.description.type) === common_1.TopologyType.LoadBalanced;\n  }\n  /** @internal */\n  pin(conn) {\n    if (this.pinnedConnection) {\n      throw TypeError('Cannot pin multiple connections to the same session');\n    }\n    this.pinnedConnection = conn;\n    conn.emit(constants_1.PINNED, this.inTransaction() ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n  }\n  /** @internal */\n  unpin(options) {\n    if (this.loadBalanced) {\n      return maybeClearPinnedConnection(this, options);\n    }\n    this.transaction.unpinServer();\n  }\n  get isPinned() {\n    return this.loadBalanced ? !!this.pinnedConnection : this.transaction.isPinned;\n  }\n  /**\n   * Frees any client-side resources held by the current session.  If a session is in a transaction,\n   * the transaction is aborted.\n   *\n   * Does not end the session on the server.\n   *\n   * @param options - Optional settings. Currently reserved for future use\n   */\n  async endSession(options) {\n    try {\n      if (this.inTransaction()) {\n        await this.abortTransaction(_objectSpread(_objectSpread({}, options), {}, {\n          throwTimeout: true\n        }));\n      }\n    } catch (error) {\n      // spec indicates that we should ignore all errors for `endSessions`\n      if (error.name === 'MongoOperationTimeoutError') throw error;\n      (0, utils_1.squashError)(error);\n    } finally {\n      if (!this.hasEnded) {\n        const serverSession = this.serverSession;\n        if (serverSession != null) {\n          // release the server session back to the pool\n          this.sessionPool.release(serverSession);\n          // Store a clone of the server session for reference (debugging)\n          this._serverSession = new ServerSession(serverSession);\n        }\n        // mark the session as ended, and emit a signal\n        this.hasEnded = true;\n        this.emit('ended', this);\n      }\n      maybeClearPinnedConnection(this, _objectSpread({\n        force: true\n      }, options));\n    }\n  }\n  /** @internal */\n  async asyncDispose() {\n    await this.endSession({\n      force: true\n    });\n  }\n  /**\n   * Advances the operationTime for a ClientSession.\n   *\n   * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n   */\n  advanceOperationTime(operationTime) {\n    if (this.operationTime == null) {\n      this.operationTime = operationTime;\n      return;\n    }\n    if (operationTime.greaterThan(this.operationTime)) {\n      this.operationTime = operationTime;\n    }\n  }\n  /**\n   * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n   *\n   * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n   */\n  advanceClusterTime(clusterTime) {\n    var _clusterTime$signatur, _clusterTime$signatur2;\n    if (!clusterTime || typeof clusterTime !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('input cluster time must be an object');\n    }\n    if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n      throw new error_1.MongoInvalidArgumentError('input cluster time \"clusterTime\" property must be a valid BSON Timestamp');\n    }\n    if (!clusterTime.signature || ((_clusterTime$signatur = clusterTime.signature.hash) === null || _clusterTime$signatur === void 0 ? void 0 : _clusterTime$signatur._bsontype) !== 'Binary' || typeof clusterTime.signature.keyId !== 'bigint' && typeof clusterTime.signature.keyId !== 'number' && ((_clusterTime$signatur2 = clusterTime.signature.keyId) === null || _clusterTime$signatur2 === void 0 ? void 0 : _clusterTime$signatur2._bsontype) !== 'Long' // apparently we decode the key to number?\n    ) {\n      throw new error_1.MongoInvalidArgumentError('input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId');\n    }\n    (0, common_1._advanceClusterTime)(this, clusterTime);\n  }\n  /**\n   * Used to determine if this session equals another\n   *\n   * @param session - The session to compare to\n   */\n  equals(session) {\n    if (!(session instanceof ClientSession)) {\n      return false;\n    }\n    if (this.id == null || session.id == null) {\n      return false;\n    }\n    return utils_1.ByteUtils.equals(this.id.id.buffer, session.id.id.buffer);\n  }\n  /**\n   * Increment the transaction number on the internal ServerSession\n   *\n   * @privateRemarks\n   * This helper increments a value stored on the client session that will be\n   * added to the serverSession's txnNumber upon applying it to a command.\n   * This is because the serverSession is lazily acquired after a connection is obtained\n   */\n  incrementTransactionNumber() {\n    this.txnNumberIncrement += 1;\n  }\n  /** @returns whether this session is currently in a transaction or not */\n  inTransaction() {\n    return this.transaction.isActive;\n  }\n  /**\n   * Starts a new transaction with the given options.\n   *\n   * @remarks\n   * **IMPORTANT**: Running operations in parallel is not supported during a transaction. The use of `Promise.all`,\n   * `Promise.allSettled`, `Promise.race`, etc to parallelize operations inside a transaction is\n   * undefined behaviour.\n   *\n   * @param options - Options for the transaction\n   */\n  startTransaction(options) {\n    var _ref, _options$readConcern, _this$clientOptions, _ref2, _options$writeConcern, _this$clientOptions2, _ref3, _options$readPreferen, _this$clientOptions3, _options$maxCommitTim;\n    if (this.snapshotEnabled) {\n      throw new error_1.MongoCompatibilityError('Transactions are not supported in snapshot sessions');\n    }\n    if (this.inTransaction()) {\n      throw new error_1.MongoTransactionError('Transaction already in progress');\n    }\n    if (this.isPinned && this.transaction.isCommitted) {\n      this.unpin();\n    }\n    const topologyMaxWireVersion = (0, utils_1.maxWireVersion)(this.client.topology);\n    if ((0, shared_1.isSharded)(this.client.topology) && topologyMaxWireVersion != null && topologyMaxWireVersion < minWireVersionForShardedTransactions) {\n      throw new error_1.MongoCompatibilityError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n    }\n    this.commitAttempted = false;\n    // increment txnNumber\n    this.incrementTransactionNumber();\n    // create transaction state\n    this.transaction = new transactions_1.Transaction({\n      readConcern: (_ref = (_options$readConcern = options === null || options === void 0 ? void 0 : options.readConcern) !== null && _options$readConcern !== void 0 ? _options$readConcern : this.defaultTransactionOptions.readConcern) !== null && _ref !== void 0 ? _ref : (_this$clientOptions = this.clientOptions) === null || _this$clientOptions === void 0 ? void 0 : _this$clientOptions.readConcern,\n      writeConcern: (_ref2 = (_options$writeConcern = options === null || options === void 0 ? void 0 : options.writeConcern) !== null && _options$writeConcern !== void 0 ? _options$writeConcern : this.defaultTransactionOptions.writeConcern) !== null && _ref2 !== void 0 ? _ref2 : (_this$clientOptions2 = this.clientOptions) === null || _this$clientOptions2 === void 0 ? void 0 : _this$clientOptions2.writeConcern,\n      readPreference: (_ref3 = (_options$readPreferen = options === null || options === void 0 ? void 0 : options.readPreference) !== null && _options$readPreferen !== void 0 ? _options$readPreferen : this.defaultTransactionOptions.readPreference) !== null && _ref3 !== void 0 ? _ref3 : (_this$clientOptions3 = this.clientOptions) === null || _this$clientOptions3 === void 0 ? void 0 : _this$clientOptions3.readPreference,\n      maxCommitTimeMS: (_options$maxCommitTim = options === null || options === void 0 ? void 0 : options.maxCommitTimeMS) !== null && _options$maxCommitTim !== void 0 ? _options$maxCommitTim : this.defaultTransactionOptions.maxCommitTimeMS\n    });\n    this.transaction.transition(transactions_1.TxnState.STARTING_TRANSACTION);\n  }\n  /**\n   * Commits the currently active transaction in this session.\n   *\n   * @param options - Optional options, can be used to override `defaultTimeoutMS`.\n   */\n  async commitTransaction(options) {\n    var _this$transaction$opt, _this$clientOptions4, _this$timeoutContext;\n    if (this.transaction.state === transactions_1.TxnState.NO_TRANSACTION) {\n      throw new error_1.MongoTransactionError('No transaction started');\n    }\n    if (this.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION || this.transaction.state === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      // the transaction was never started, we can safely exit here\n      this.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY);\n      return;\n    }\n    if (this.transaction.state === transactions_1.TxnState.TRANSACTION_ABORTED) {\n      throw new error_1.MongoTransactionError('Cannot call commitTransaction after calling abortTransaction');\n    }\n    const command = {\n      commitTransaction: 1\n    };\n    const timeoutMS = typeof (options === null || options === void 0 ? void 0 : options.timeoutMS) === 'number' ? options.timeoutMS : typeof this.timeoutMS === 'number' ? this.timeoutMS : null;\n    const wc = (_this$transaction$opt = this.transaction.options.writeConcern) !== null && _this$transaction$opt !== void 0 ? _this$transaction$opt : (_this$clientOptions4 = this.clientOptions) === null || _this$clientOptions4 === void 0 ? void 0 : _this$clientOptions4.writeConcern;\n    if (wc != null) {\n      if (timeoutMS == null && this.timeoutContext == null) {\n        write_concern_1.WriteConcern.apply(command, _objectSpread({\n          wtimeoutMS: 10000,\n          w: 'majority'\n        }, wc));\n      } else {\n        const wcKeys = Object.keys(wc);\n        if (wcKeys.length > 2 || !wcKeys.includes('wtimeoutMS') && !wcKeys.includes('wTimeoutMS'))\n          // if the write concern was specified with wTimeoutMS, then we set both wtimeoutMS and wTimeoutMS, guaranteeing at least two keys, so if we have more than two keys, then we can automatically assume that we should add the write concern to the command. If it has 2 or fewer keys, we need to check that those keys aren't the wtimeoutMS or wTimeoutMS options before we add the write concern to the command\n          write_concern_1.WriteConcern.apply(command, _objectSpread(_objectSpread({}, wc), {}, {\n            wtimeoutMS: undefined\n          }));\n      }\n    }\n    if (this.transaction.state === transactions_1.TxnState.TRANSACTION_COMMITTED || this.commitAttempted) {\n      if (timeoutMS == null && this.timeoutContext == null) {\n        write_concern_1.WriteConcern.apply(command, _objectSpread(_objectSpread({\n          wtimeoutMS: 10000\n        }, wc), {}, {\n          w: 'majority'\n        }));\n      } else {\n        write_concern_1.WriteConcern.apply(command, _objectSpread(_objectSpread({\n          w: 'majority'\n        }, wc), {}, {\n          wtimeoutMS: undefined\n        }));\n      }\n    }\n    if (typeof this.transaction.options.maxTimeMS === 'number') {\n      command.maxTimeMS = this.transaction.options.maxTimeMS;\n    }\n    if (this.transaction.recoveryToken) {\n      command.recoveryToken = this.transaction.recoveryToken;\n    }\n    const operation = new run_command_1.RunAdminCommandOperation(command, {\n      session: this,\n      readPreference: read_preference_1.ReadPreference.primary,\n      bypassPinningCheck: true\n    });\n    const timeoutContext = (_this$timeoutContext = this.timeoutContext) !== null && _this$timeoutContext !== void 0 ? _this$timeoutContext : typeof timeoutMS === 'number' ? timeout_1.TimeoutContext.create({\n      serverSelectionTimeoutMS: this.clientOptions.serverSelectionTimeoutMS,\n      socketTimeoutMS: this.clientOptions.socketTimeoutMS,\n      timeoutMS\n    }) : null;\n    try {\n      await (0, execute_operation_1.executeOperation)(this.client, operation, timeoutContext);\n      this.commitAttempted = undefined;\n      return;\n    } catch (firstCommitError) {\n      this.commitAttempted = true;\n      if (firstCommitError instanceof error_1.MongoError && (0, error_1.isRetryableWriteError)(firstCommitError)) {\n        // SPEC-1185: apply majority write concern when retrying commitTransaction\n        write_concern_1.WriteConcern.apply(command, _objectSpread(_objectSpread({\n          wtimeoutMS: 10000\n        }, wc), {}, {\n          w: 'majority'\n        }));\n        // per txns spec, must unpin session in this case\n        this.unpin({\n          force: true\n        });\n        try {\n          await (0, execute_operation_1.executeOperation)(this.client, new run_command_1.RunAdminCommandOperation(command, {\n            session: this,\n            readPreference: read_preference_1.ReadPreference.primary,\n            bypassPinningCheck: true\n          }), timeoutContext);\n          return;\n        } catch (retryCommitError) {\n          // If the retry failed, we process that error instead of the original\n          if (shouldAddUnknownTransactionCommitResultLabel(retryCommitError)) {\n            retryCommitError.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n          }\n          if (shouldUnpinAfterCommitError(retryCommitError)) {\n            this.unpin({\n              error: retryCommitError\n            });\n          }\n          throw retryCommitError;\n        }\n      }\n      if (shouldAddUnknownTransactionCommitResultLabel(firstCommitError)) {\n        firstCommitError.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n      }\n      if (shouldUnpinAfterCommitError(firstCommitError)) {\n        this.unpin({\n          error: firstCommitError\n        });\n      }\n      throw firstCommitError;\n    } finally {\n      this.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED);\n    }\n  }\n  async abortTransaction(options) {\n    var _this$timeoutContext2, _this$transaction$opt2, _this$clientOptions5;\n    if (this.transaction.state === transactions_1.TxnState.NO_TRANSACTION) {\n      throw new error_1.MongoTransactionError('No transaction started');\n    }\n    if (this.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n      // the transaction was never started, we can safely exit here\n      this.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n      return;\n    }\n    if (this.transaction.state === transactions_1.TxnState.TRANSACTION_ABORTED) {\n      throw new error_1.MongoTransactionError('Cannot call abortTransaction twice');\n    }\n    if (this.transaction.state === transactions_1.TxnState.TRANSACTION_COMMITTED || this.transaction.state === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      throw new error_1.MongoTransactionError('Cannot call abortTransaction after calling commitTransaction');\n    }\n    const command = {\n      abortTransaction: 1\n    };\n    const timeoutMS = typeof (options === null || options === void 0 ? void 0 : options.timeoutMS) === 'number' ? options.timeoutMS : (_this$timeoutContext2 = this.timeoutContext) !== null && _this$timeoutContext2 !== void 0 && _this$timeoutContext2.csotEnabled() ? this.timeoutContext.timeoutMS // refresh timeoutMS for abort operation\n    : typeof this.timeoutMS === 'number' ? this.timeoutMS : null;\n    const timeoutContext = timeoutMS != null ? timeout_1.TimeoutContext.create({\n      timeoutMS,\n      serverSelectionTimeoutMS: this.clientOptions.serverSelectionTimeoutMS,\n      socketTimeoutMS: this.clientOptions.socketTimeoutMS\n    }) : null;\n    const wc = (_this$transaction$opt2 = this.transaction.options.writeConcern) !== null && _this$transaction$opt2 !== void 0 ? _this$transaction$opt2 : (_this$clientOptions5 = this.clientOptions) === null || _this$clientOptions5 === void 0 ? void 0 : _this$clientOptions5.writeConcern;\n    if (wc != null && timeoutMS == null) {\n      write_concern_1.WriteConcern.apply(command, _objectSpread({\n        wtimeoutMS: 10000,\n        w: 'majority'\n      }, wc));\n    }\n    if (this.transaction.recoveryToken) {\n      command.recoveryToken = this.transaction.recoveryToken;\n    }\n    const operation = new run_command_1.RunAdminCommandOperation(command, {\n      session: this,\n      readPreference: read_preference_1.ReadPreference.primary,\n      bypassPinningCheck: true\n    });\n    try {\n      await (0, execute_operation_1.executeOperation)(this.client, operation, timeoutContext);\n      this.unpin();\n      return;\n    } catch (firstAbortError) {\n      this.unpin();\n      if (firstAbortError.name === 'MongoRuntimeError') throw firstAbortError;\n      if (options !== null && options !== void 0 && options.throwTimeout && firstAbortError.name === 'MongoOperationTimeoutError') {\n        throw firstAbortError;\n      }\n      if (firstAbortError instanceof error_1.MongoError && (0, error_1.isRetryableWriteError)(firstAbortError)) {\n        try {\n          await (0, execute_operation_1.executeOperation)(this.client, operation, timeoutContext);\n          return;\n        } catch (secondAbortError) {\n          if (secondAbortError.name === 'MongoRuntimeError') throw secondAbortError;\n          if (options !== null && options !== void 0 && options.throwTimeout && secondAbortError.name === 'MongoOperationTimeoutError') {\n            throw secondAbortError;\n          }\n          // we do not retry the retry\n        }\n      }\n      // The spec indicates that if the operation times out or fails with a non-retryable error, we should ignore all errors on `abortTransaction`\n    } finally {\n      this.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n      if (this.loadBalanced) {\n        maybeClearPinnedConnection(this, {\n          force: false\n        });\n      }\n    }\n  }\n  /**\n   * This is here to ensure that ClientSession is never serialized to BSON.\n   */\n  toBSON() {\n    throw new error_1.MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n  }\n  /**\n   * Starts a transaction and runs a provided function, ensuring the commitTransaction is always attempted when all operations run in the function have completed.\n   *\n   * **IMPORTANT:** This method requires the function passed in to return a Promise. That promise must be made by `await`-ing all operations in such a way that rejections are propagated to the returned promise.\n   *\n   * **IMPORTANT:** Running operations in parallel is not supported during a transaction. The use of `Promise.all`,\n   * `Promise.allSettled`, `Promise.race`, etc to parallelize operations inside a transaction is\n   * undefined behaviour.\n   *\n   * **IMPORTANT:** When running an operation inside a `withTransaction` callback, if it is not\n   * provided the explicit session in its options, it will not be part of the transaction and it will not respect timeoutMS.\n   *\n   *\n   * @remarks\n   * - If all operations successfully complete and the `commitTransaction` operation is successful, then the provided function will return the result of the provided function.\n   * - If the transaction is unable to complete or an error is thrown from within the provided function, then the provided function will throw an error.\n   *   - If the transaction is manually aborted within the provided function it will not throw.\n   * - If the driver needs to attempt to retry the operations, the provided function may be called multiple times.\n   *\n   * Checkout a descriptive example here:\n   * @see https://www.mongodb.com/blog/post/quick-start-nodejs--mongodb--how-to-implement-transactions\n   *\n   * If a command inside withTransaction fails:\n   * - It may cause the transaction on the server to be aborted.\n   * - This situation is normally handled transparently by the driver.\n   * - However, if the application catches such an error and does not rethrow it, the driver will not be able to determine whether the transaction was aborted or not.\n   * - The driver will then retry the transaction indefinitely.\n   *\n   * To avoid this situation, the application must not silently handle errors within the provided function.\n   * If the application needs to handle errors within, it must await all operations such that if an operation is rejected it becomes the rejection of the callback function passed into withTransaction.\n   *\n   * @param fn - callback to run within a transaction\n   * @param options - optional settings for the transaction\n   * @returns A raw command response or undefined\n   */\n  async withTransaction(fn, options) {\n    var _ref4, _options$timeoutMS, _this$timeoutContext3;\n    const MAX_TIMEOUT = 120000;\n    const timeoutMS = (_ref4 = (_options$timeoutMS = options === null || options === void 0 ? void 0 : options.timeoutMS) !== null && _options$timeoutMS !== void 0 ? _options$timeoutMS : this.timeoutMS) !== null && _ref4 !== void 0 ? _ref4 : null;\n    this.timeoutContext = timeoutMS != null ? timeout_1.TimeoutContext.create({\n      timeoutMS,\n      serverSelectionTimeoutMS: this.clientOptions.serverSelectionTimeoutMS,\n      socketTimeoutMS: this.clientOptions.socketTimeoutMS\n    }) : null;\n    const startTime = (_this$timeoutContext3 = this.timeoutContext) !== null && _this$timeoutContext3 !== void 0 && _this$timeoutContext3.csotEnabled() ? this.timeoutContext.start : (0, utils_1.now)();\n    let committed = false;\n    let result;\n    try {\n      while (!committed) {\n        this.startTransaction(options); // may throw on error\n        try {\n          const promise = fn(this);\n          if (!(0, utils_1.isPromiseLike)(promise)) {\n            throw new error_1.MongoInvalidArgumentError('Function provided to `withTransaction` must return a Promise');\n          }\n          result = await promise;\n          if (this.transaction.state === transactions_1.TxnState.NO_TRANSACTION || this.transaction.state === transactions_1.TxnState.TRANSACTION_COMMITTED || this.transaction.state === transactions_1.TxnState.TRANSACTION_ABORTED) {\n            // Assume callback intentionally ended the transaction\n            return result;\n          }\n        } catch (fnError) {\n          if (!(fnError instanceof error_1.MongoError) || fnError instanceof error_1.MongoInvalidArgumentError) {\n            await this.abortTransaction();\n            throw fnError;\n          }\n          if (this.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION || this.transaction.state === transactions_1.TxnState.TRANSACTION_IN_PROGRESS) {\n            await this.abortTransaction();\n          }\n          if (fnError.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError) && (this.timeoutContext != null || (0, utils_1.now)() - startTime < MAX_TIMEOUT)) {\n            continue;\n          }\n          throw fnError;\n        }\n        while (!committed) {\n          try {\n            /*\n             * We will rely on ClientSession.commitTransaction() to\n             * apply a majority write concern if commitTransaction is\n             * being retried (see: DRIVERS-601)\n             */\n            await this.commitTransaction();\n            committed = true;\n          } catch (commitError) {\n            /*\n             * Note: a maxTimeMS error will have the MaxTimeMSExpired\n             * code (50) and can be reported as a top-level error or\n             * inside writeConcernError, ex.\n             * { ok:0, code: 50, codeName: 'MaxTimeMSExpired' }\n             * { ok:1, writeConcernError: { code: 50, codeName: 'MaxTimeMSExpired' } }\n             */\n            if (!isMaxTimeMSExpiredError(commitError) && commitError.hasErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult) && (this.timeoutContext != null || (0, utils_1.now)() - startTime < MAX_TIMEOUT)) {\n              continue;\n            }\n            if (commitError.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError) && (this.timeoutContext != null || (0, utils_1.now)() - startTime < MAX_TIMEOUT)) {\n              break;\n            }\n            throw commitError;\n          }\n        }\n      }\n      return result;\n    } finally {\n      this.timeoutContext = null;\n    }\n  }\n}\nexports.ClientSession = ClientSession;\n(0, resource_management_1.configureResourceManagement)(ClientSession.prototype);\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set(['CannotSatisfyWriteConcern', 'UnknownReplWriteConcern', 'UnsatisfiableWriteConcern']);\nfunction shouldUnpinAfterCommitError(commitError) {\n  if (commitError instanceof error_1.MongoError) {\n    if ((0, error_1.isRetryableWriteError)(commitError) || commitError instanceof error_1.MongoWriteConcernError || isMaxTimeMSExpiredError(commitError)) {\n      if (isUnknownTransactionCommitResult(commitError)) {\n        // per txns spec, must unpin session in this case\n        return true;\n      }\n    } else if (commitError.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction shouldAddUnknownTransactionCommitResultLabel(commitError) {\n  let ok = (0, error_1.isRetryableWriteError)(commitError);\n  ok || (ok = commitError instanceof error_1.MongoWriteConcernError);\n  ok || (ok = isMaxTimeMSExpiredError(commitError));\n  ok && (ok = isUnknownTransactionCommitResult(commitError));\n  return ok;\n}\nfunction isUnknownTransactionCommitResult(err) {\n  const isNonDeterministicWriteConcernError = err instanceof error_1.MongoServerError && err.codeName && NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n  return isMaxTimeMSExpiredError(err) || !isNonDeterministicWriteConcernError && err.code !== error_1.MONGODB_ERROR_CODES.UnsatisfiableWriteConcern && err.code !== error_1.MONGODB_ERROR_CODES.UnknownReplWriteConcern;\n}\nfunction maybeClearPinnedConnection(session, options) {\n  // unpin a connection if it has been pinned\n  const conn = session.pinnedConnection;\n  const error = options === null || options === void 0 ? void 0 : options.error;\n  if (session.inTransaction() && error && error instanceof error_1.MongoError && error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n    return;\n  }\n  const topology = session.client.topology;\n  // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n  //       to validate that we don't unpin on _all_ errors?\n  if (conn && topology != null) {\n    const servers = Array.from(topology.s.servers.values());\n    const loadBalancer = servers[0];\n    if ((options === null || options === void 0 ? void 0 : options.error) == null || options !== null && options !== void 0 && options.force) {\n      loadBalancer.pool.checkIn(conn);\n      session.pinnedConnection = undefined;\n      conn.emit(constants_1.UNPINNED, session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n      if (options !== null && options !== void 0 && options.forceClear) {\n        loadBalancer.pool.clear({\n          serviceId: conn.serviceId\n        });\n      }\n    }\n  }\n}\nfunction isMaxTimeMSExpiredError(err) {\n  var _err$writeConcernErro;\n  if (err == null || !(err instanceof error_1.MongoServerError)) {\n    return false;\n  }\n  return err.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired || ((_err$writeConcernErro = err.writeConcernError) === null || _err$writeConcernErro === void 0 ? void 0 : _err$writeConcernErro.code) === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired;\n}\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\nclass ServerSession {\n  /** @internal */\n  constructor(cloned) {\n    if (cloned != null) {\n      const idBytes = Buffer.allocUnsafe(16);\n      idBytes.set(cloned.id.id.buffer);\n      this.id = {\n        id: new bson_1.Binary(idBytes, cloned.id.id.sub_type)\n      };\n      this.lastUse = cloned.lastUse;\n      this.txnNumber = cloned.txnNumber;\n      this.isDirty = cloned.isDirty;\n      return;\n    }\n    this.id = {\n      id: new bson_1.Binary((0, utils_1.uuidV4)(), bson_1.Binary.SUBTYPE_UUID)\n    };\n    this.lastUse = (0, utils_1.now)();\n    this.txnNumber = 0;\n    this.isDirty = false;\n  }\n  /**\n   * Determines if the server session has timed out.\n   *\n   * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n   */\n  hasTimedOut(sessionTimeoutMinutes) {\n    // Take the difference of the lastUse timestamp and now, which will result in a value in\n    // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n    const idleTimeMinutes = Math.round((0, utils_1.calculateDurationInMs)(this.lastUse) % 86400000 % 3600000 / 60000);\n    return idleTimeMinutes > sessionTimeoutMinutes - 1;\n  }\n}\nexports.ServerSession = ServerSession;\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\nclass ServerSessionPool {\n  constructor(client) {\n    if (client == null) {\n      throw new error_1.MongoRuntimeError('ServerSessionPool requires a MongoClient');\n    }\n    this.client = client;\n    this.sessions = new utils_1.List();\n  }\n  /**\n   * Acquire a Server Session from the pool.\n   * Iterates through each session in the pool, removing any stale sessions\n   * along the way. The first non-stale session found is removed from the\n   * pool and returned. If no non-stale session is found, a new ServerSession is created.\n   */\n  acquire() {\n    var _this$client$topology2, _this$client$topology3;\n    const sessionTimeoutMinutes = (_this$client$topology2 = (_this$client$topology3 = this.client.topology) === null || _this$client$topology3 === void 0 ? void 0 : _this$client$topology3.logicalSessionTimeoutMinutes) !== null && _this$client$topology2 !== void 0 ? _this$client$topology2 : 10;\n    let session = null;\n    // Try to obtain from session pool\n    while (this.sessions.length > 0) {\n      var _this$client$topology4;\n      const potentialSession = this.sessions.shift();\n      if (potentialSession != null && (!!((_this$client$topology4 = this.client.topology) !== null && _this$client$topology4 !== void 0 && _this$client$topology4.loadBalanced) || !potentialSession.hasTimedOut(sessionTimeoutMinutes))) {\n        session = potentialSession;\n        break;\n      }\n    }\n    // If nothing valid came from the pool make a new one\n    if (session == null) {\n      session = new ServerSession();\n    }\n    return session;\n  }\n  /**\n   * Release a session to the session pool\n   * Adds the session back to the session pool if the session has not timed out yet.\n   * This method also removes any stale sessions from the pool.\n   *\n   * @param session - The session to release to the pool\n   */\n  release(session) {\n    var _this$client$topology5, _this$client$topology6, _this$client$topology7;\n    const sessionTimeoutMinutes = (_this$client$topology5 = (_this$client$topology6 = this.client.topology) === null || _this$client$topology6 === void 0 ? void 0 : _this$client$topology6.logicalSessionTimeoutMinutes) !== null && _this$client$topology5 !== void 0 ? _this$client$topology5 : 10;\n    if ((_this$client$topology7 = this.client.topology) !== null && _this$client$topology7 !== void 0 && _this$client$topology7.loadBalanced && !sessionTimeoutMinutes) {\n      this.sessions.unshift(session);\n    }\n    if (!sessionTimeoutMinutes) {\n      return;\n    }\n    this.sessions.prune(session => session.hasTimedOut(sessionTimeoutMinutes));\n    if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n      if (session.isDirty) {\n        return;\n      }\n      // otherwise, readd this session to the session pool\n      this.sessions.unshift(session);\n    }\n  }\n}\nexports.ServerSessionPool = ServerSessionPool;\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n *\n * @internal\n */\nfunction applySession(session, command, options) {\n  var _options$writeConcern2;\n  if (session.hasEnded) {\n    return new error_1.MongoExpiredSessionError();\n  }\n  // May acquire serverSession here\n  const serverSession = session.serverSession;\n  if (serverSession == null) {\n    return new error_1.MongoRuntimeError('Unable to acquire server session');\n  }\n  if (((_options$writeConcern2 = options.writeConcern) === null || _options$writeConcern2 === void 0 ? void 0 : _options$writeConcern2.w) === 0) {\n    if (session && session.explicit) {\n      // Error if user provided an explicit session to an unacknowledged write (SPEC-1019)\n      return new error_1.MongoAPIError('Cannot have explicit session with unacknowledged writes');\n    }\n    return;\n  }\n  // mark the last use of this session, and apply the `lsid`\n  serverSession.lastUse = (0, utils_1.now)();\n  command.lsid = serverSession.id;\n  const inTxnOrTxnCommand = session.inTransaction() || (0, transactions_1.isTransactionCommand)(command);\n  const isRetryableWrite = !!options.willRetryWrite;\n  if (isRetryableWrite || inTxnOrTxnCommand) {\n    serverSession.txnNumber += session.txnNumberIncrement;\n    session.txnNumberIncrement = 0;\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    command.txnNumber = bson_1.Long.fromNumber(serverSession.txnNumber);\n  }\n  if (!inTxnOrTxnCommand) {\n    if (session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION) {\n      session.transaction.transition(transactions_1.TxnState.NO_TRANSACTION);\n    }\n    if (session.supports.causalConsistency && session.operationTime && (0, utils_1.commandSupportsReadConcern)(command)) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    } else if (session.snapshotEnabled) {\n      command.readConcern = command.readConcern || {\n        level: read_concern_1.ReadConcernLevel.snapshot\n      };\n      if (session.snapshotTime != null) {\n        Object.assign(command.readConcern, {\n          atClusterTime: session.snapshotTime\n        });\n      }\n    }\n    return;\n  }\n  // now attempt to apply transaction-specific sessions data\n  // `autocommit` must always be false to differentiate from retryable writes\n  command.autocommit = false;\n  if (session.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n    var _session$clientOption;\n    session.transaction.transition(transactions_1.TxnState.TRANSACTION_IN_PROGRESS);\n    command.startTransaction = true;\n    const readConcern = session.transaction.options.readConcern || (session === null || session === void 0 || (_session$clientOption = session.clientOptions) === null || _session$clientOption === void 0 ? void 0 : _session$clientOption.readConcern);\n    if (readConcern) {\n      command.readConcern = readConcern;\n    }\n    if (session.supports.causalConsistency && session.operationTime) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    }\n  }\n  return;\n}\nfunction updateSessionFromResponse(session, document) {\n  if (document.$clusterTime) {\n    (0, common_1._advanceClusterTime)(session, document.$clusterTime);\n  }\n  if (document.operationTime && session && session.supports.causalConsistency) {\n    session.advanceOperationTime(document.operationTime);\n  }\n  if (document.recoveryToken && session && session.inTransaction()) {\n    session.transaction._recoveryToken = document.recoveryToken;\n  }\n  if (session !== null && session !== void 0 && session.snapshotEnabled && session.snapshotTime == null) {\n    // find and aggregate commands return atClusterTime on the cursor\n    // distinct includes it in the response body\n    const atClusterTime = document.atClusterTime;\n    if (atClusterTime) {\n      session.snapshotTime = atClusterTime;\n    }\n  }\n}","map":{"version":3,"names":["exports","maybeClearPinnedConnection","applySession","updateSessionFromResponse","bson_1","require","metrics_1","shared_1","constants_1","error_1","mongo_types_1","execute_operation_1","run_command_1","read_concern_1","read_preference_1","resource_management_1","common_1","timeout_1","transactions_1","utils_1","write_concern_1","minWireVersionForShardedTransactions","ClientSession","TypedEventEmitter","constructor","client","sessionPool","options","clientOptions","_options$defaultTimeo","_client$s$options","_options$causalConsis","timeoutContext","MongoRuntimeError","ServerSessionPool","snapshotEnabled","snapshot","causalConsistency","MongoInvalidArgumentError","hasEnded","timeoutMS","defaultTimeoutMS","s","explicit","_serverSession","acquire","txnNumberIncrement","defaultCausalConsistencyValue","supports","clusterTime","initialClusterTime","operationTime","undefined","owner","defaultTransactionOptions","_objectSpread","transaction","Transaction","id","_this$serverSession","serverSession","loadBalanced","_this$client$topology","topology","description","type","TopologyType","LoadBalanced","pin","conn","pinnedConnection","TypeError","emit","PINNED","inTransaction","ConnectionPoolMetrics","TXN","CURSOR","unpin","unpinServer","isPinned","endSession","abortTransaction","throwTimeout","error","name","squashError","release","ServerSession","force","asyncDispose","advanceOperationTime","greaterThan","advanceClusterTime","_clusterTime$signatur","_clusterTime$signatur2","_bsontype","signature","hash","keyId","_advanceClusterTime","equals","session","ByteUtils","buffer","incrementTransactionNumber","isActive","startTransaction","_ref","_options$readConcern","_this$clientOptions","_ref2","_options$writeConcern","_this$clientOptions2","_ref3","_options$readPreferen","_this$clientOptions3","_options$maxCommitTim","MongoCompatibilityError","MongoTransactionError","isCommitted","topologyMaxWireVersion","maxWireVersion","isSharded","commitAttempted","readConcern","writeConcern","readPreference","maxCommitTimeMS","transition","TxnState","STARTING_TRANSACTION","commitTransaction","_this$transaction$opt","_this$clientOptions4","_this$timeoutContext","state","NO_TRANSACTION","TRANSACTION_COMMITTED_EMPTY","TRANSACTION_ABORTED","command","wc","WriteConcern","apply","wtimeoutMS","w","wcKeys","Object","keys","length","includes","TRANSACTION_COMMITTED","maxTimeMS","recoveryToken","operation","RunAdminCommandOperation","ReadPreference","primary","bypassPinningCheck","TimeoutContext","create","serverSelectionTimeoutMS","socketTimeoutMS","executeOperation","firstCommitError","MongoError","isRetryableWriteError","retryCommitError","shouldAddUnknownTransactionCommitResultLabel","addErrorLabel","MongoErrorLabel","UnknownTransactionCommitResult","shouldUnpinAfterCommitError","_this$timeoutContext2","_this$transaction$opt2","_this$clientOptions5","csotEnabled","firstAbortError","secondAbortError","toBSON","withTransaction","fn","_ref4","_options$timeoutMS","_this$timeoutContext3","MAX_TIMEOUT","startTime","start","now","committed","result","promise","isPromiseLike","fnError","TRANSACTION_IN_PROGRESS","hasErrorLabel","TransientTransactionError","commitError","isMaxTimeMSExpiredError","configureResourceManagement","prototype","NON_DETERMINISTIC_WRITE_CONCERN_ERRORS","Set","MongoWriteConcernError","isUnknownTransactionCommitResult","ok","err","isNonDeterministicWriteConcernError","MongoServerError","codeName","has","code","MONGODB_ERROR_CODES","UnsatisfiableWriteConcern","UnknownReplWriteConcern","servers","Array","from","values","loadBalancer","pool","checkIn","UNPINNED","forceClear","clear","serviceId","_err$writeConcernErro","MaxTimeMSExpired","writeConcernError","cloned","idBytes","Buffer","allocUnsafe","set","Binary","sub_type","lastUse","txnNumber","isDirty","uuidV4","SUBTYPE_UUID","hasTimedOut","sessionTimeoutMinutes","idleTimeMinutes","Math","round","calculateDurationInMs","sessions","List","_this$client$topology2","_this$client$topology3","logicalSessionTimeoutMinutes","_this$client$topology4","potentialSession","shift","_this$client$topology5","_this$client$topology6","_this$client$topology7","unshift","prune","_options$writeConcern2","MongoExpiredSessionError","MongoAPIError","lsid","inTxnOrTxnCommand","isTransactionCommand","isRetryableWrite","willRetryWrite","Long","fromNumber","commandSupportsReadConcern","assign","afterClusterTime","level","ReadConcernLevel","snapshotTime","atClusterTime","autocommit","_session$clientOption","document","$clusterTime","_recoveryToken"],"sources":["/Users/glebch/workprojects/baumna/client/node_modules/mongodb/src/sessions.ts"],"sourcesContent":["import { Binary, type Document, Long, type Timestamp } from './bson';\nimport type { CommandOptions, Connection } from './cmap/connection';\nimport { ConnectionPoolMetrics } from './cmap/metrics';\nimport { type MongoDBResponse } from './cmap/wire_protocol/responses';\nimport { isSharded } from './cmap/wire_protocol/shared';\nimport { PINNED, UNPINNED } from './constants';\nimport type { AbstractCursor } from './cursor/abstract_cursor';\nimport {\n  type AnyError,\n  isRetryableWriteError,\n  MongoAPIError,\n  MongoCompatibilityError,\n  MONGODB_ERROR_CODES,\n  type MongoDriverError,\n  MongoError,\n  MongoErrorLabel,\n  MongoExpiredSessionError,\n  MongoInvalidArgumentError,\n  MongoRuntimeError,\n  MongoServerError,\n  MongoTransactionError,\n  MongoWriteConcernError\n} from './error';\nimport type { MongoClient, MongoOptions } from './mongo_client';\nimport { TypedEventEmitter } from './mongo_types';\nimport { executeOperation } from './operations/execute_operation';\nimport { RunAdminCommandOperation } from './operations/run_command';\nimport { ReadConcernLevel } from './read_concern';\nimport { ReadPreference } from './read_preference';\nimport { type AsyncDisposable, configureResourceManagement } from './resource_management';\nimport { _advanceClusterTime, type ClusterTime, TopologyType } from './sdam/common';\nimport { TimeoutContext } from './timeout';\nimport {\n  isTransactionCommand,\n  Transaction,\n  type TransactionOptions,\n  TxnState\n} from './transactions';\nimport {\n  ByteUtils,\n  calculateDurationInMs,\n  commandSupportsReadConcern,\n  isPromiseLike,\n  List,\n  maxWireVersion,\n  now,\n  squashError,\n  uuidV4\n} from './utils';\nimport { WriteConcern, type WriteConcernOptions, type WriteConcernSettings } from './write_concern';\n\nconst minWireVersionForShardedTransactions = 8;\n\n/** @public */\nexport interface ClientSessionOptions {\n  /** Whether causal consistency should be enabled on this session */\n  causalConsistency?: boolean;\n  /** Whether all read operations should be read from the same snapshot for this session (NOTE: not compatible with `causalConsistency=true`) */\n  snapshot?: boolean;\n  /** The default TransactionOptions to use for transactions started on this session. */\n  defaultTransactionOptions?: TransactionOptions;\n  /**\n   * @public\n   * @experimental\n   * An overriding timeoutMS value to use for a client-side timeout.\n   * If not provided the session uses the timeoutMS specified on the MongoClient.\n   */\n  defaultTimeoutMS?: number;\n\n  /** @internal */\n  owner?: symbol | AbstractCursor;\n  /** @internal */\n  explicit?: boolean;\n  /** @internal */\n  initialClusterTime?: ClusterTime;\n}\n\n/** @public */\nexport type WithTransactionCallback<T = any> = (session: ClientSession) => Promise<T>;\n\n/** @public */\nexport type ClientSessionEvents = {\n  ended(session: ClientSession): void;\n};\n\n/** @public */\nexport interface EndSessionOptions {\n  /**\n   * An optional error which caused the call to end this session\n   * @internal\n   */\n  error?: AnyError;\n  force?: boolean;\n  forceClear?: boolean;\n\n  /** Specifies the time an operation will run until it throws a timeout error */\n  timeoutMS?: number;\n}\n\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\nexport class ClientSession\n  extends TypedEventEmitter<ClientSessionEvents>\n  implements AsyncDisposable\n{\n  /** @internal */\n  client: MongoClient;\n  /** @internal */\n  sessionPool: ServerSessionPool;\n  hasEnded: boolean;\n  clientOptions: MongoOptions;\n  supports: { causalConsistency: boolean };\n  clusterTime?: ClusterTime;\n  operationTime?: Timestamp;\n  explicit: boolean;\n  /** @internal */\n  owner?: symbol | AbstractCursor;\n  defaultTransactionOptions: TransactionOptions;\n  transaction: Transaction;\n  /**\n   * @internal\n   * Keeps track of whether or not the current transaction has attempted to be committed. Is\n   * initially undefined. Gets set to false when startTransaction is called. When commitTransaction is sent to server, if the commitTransaction succeeds, it is then set to undefined, otherwise, set to true\n   */\n  private commitAttempted?: boolean;\n  public readonly snapshotEnabled: boolean;\n\n  /** @internal */\n  private _serverSession: ServerSession | null;\n  /** @internal */\n  public snapshotTime?: Timestamp;\n  /** @internal */\n  public pinnedConnection?: Connection;\n  /** @internal */\n  public txnNumberIncrement: number;\n  /**\n   * @experimental\n   * Specifies the time an operation in a given `ClientSession` will run until it throws a timeout error\n   */\n  timeoutMS?: number;\n\n  /** @internal */\n  public timeoutContext: TimeoutContext | null = null;\n\n  /**\n   * Create a client session.\n   * @internal\n   * @param client - The current client\n   * @param sessionPool - The server session pool (Internal Class)\n   * @param options - Optional settings\n   * @param clientOptions - Optional settings provided when creating a MongoClient\n   */\n  constructor(\n    client: MongoClient,\n    sessionPool: ServerSessionPool,\n    options: ClientSessionOptions,\n    clientOptions: MongoOptions\n  ) {\n    super();\n\n    if (client == null) {\n      // TODO(NODE-3483)\n      throw new MongoRuntimeError('ClientSession requires a MongoClient');\n    }\n\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      // TODO(NODE-3483)\n      throw new MongoRuntimeError('ClientSession requires a ServerSessionPool');\n    }\n\n    options = options ?? {};\n\n    this.snapshotEnabled = options.snapshot === true;\n    if (options.causalConsistency === true && this.snapshotEnabled) {\n      throw new MongoInvalidArgumentError(\n        'Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive'\n      );\n    }\n\n    this.client = client;\n    this.sessionPool = sessionPool;\n    this.hasEnded = false;\n    this.clientOptions = clientOptions;\n    this.timeoutMS = options.defaultTimeoutMS ?? client.s.options?.timeoutMS;\n\n    this.explicit = !!options.explicit;\n    this._serverSession = this.explicit ? this.sessionPool.acquire() : null;\n    this.txnNumberIncrement = 0;\n\n    const defaultCausalConsistencyValue = this.explicit && options.snapshot !== true;\n    this.supports = {\n      // if we can enable causal consistency, do so by default\n      causalConsistency: options.causalConsistency ?? defaultCausalConsistencyValue\n    };\n\n    this.clusterTime = options.initialClusterTime;\n\n    this.operationTime = undefined;\n    this.owner = options.owner;\n    this.defaultTransactionOptions = { ...options.defaultTransactionOptions };\n    this.transaction = new Transaction();\n  }\n\n  /** The server id associated with this session */\n  get id(): ServerSessionId | undefined {\n    return this.serverSession?.id;\n  }\n\n  get serverSession(): ServerSession {\n    let serverSession = this._serverSession;\n    if (serverSession == null) {\n      if (this.explicit) {\n        throw new MongoRuntimeError('Unexpected null serverSession for an explicit session');\n      }\n      if (this.hasEnded) {\n        throw new MongoRuntimeError('Unexpected null serverSession for an ended implicit session');\n      }\n      serverSession = this.sessionPool.acquire();\n      this._serverSession = serverSession;\n    }\n    return serverSession;\n  }\n\n  get loadBalanced(): boolean {\n    return this.client.topology?.description.type === TopologyType.LoadBalanced;\n  }\n\n  /** @internal */\n  pin(conn: Connection): void {\n    if (this.pinnedConnection) {\n      throw TypeError('Cannot pin multiple connections to the same session');\n    }\n\n    this.pinnedConnection = conn;\n    conn.emit(\n      PINNED,\n      this.inTransaction() ? ConnectionPoolMetrics.TXN : ConnectionPoolMetrics.CURSOR\n    );\n  }\n\n  /** @internal */\n  unpin(options?: { force?: boolean; forceClear?: boolean; error?: AnyError }): void {\n    if (this.loadBalanced) {\n      return maybeClearPinnedConnection(this, options);\n    }\n\n    this.transaction.unpinServer();\n  }\n\n  get isPinned(): boolean {\n    return this.loadBalanced ? !!this.pinnedConnection : this.transaction.isPinned;\n  }\n\n  /**\n   * Frees any client-side resources held by the current session.  If a session is in a transaction,\n   * the transaction is aborted.\n   *\n   * Does not end the session on the server.\n   *\n   * @param options - Optional settings. Currently reserved for future use\n   */\n  async endSession(options?: EndSessionOptions): Promise<void> {\n    try {\n      if (this.inTransaction()) {\n        await this.abortTransaction({ ...options, throwTimeout: true });\n      }\n    } catch (error) {\n      // spec indicates that we should ignore all errors for `endSessions`\n      if (error.name === 'MongoOperationTimeoutError') throw error;\n      squashError(error);\n    } finally {\n      if (!this.hasEnded) {\n        const serverSession = this.serverSession;\n        if (serverSession != null) {\n          // release the server session back to the pool\n          this.sessionPool.release(serverSession);\n          // Store a clone of the server session for reference (debugging)\n          this._serverSession = new ServerSession(serverSession);\n        }\n        // mark the session as ended, and emit a signal\n        this.hasEnded = true;\n        this.emit('ended', this);\n      }\n      maybeClearPinnedConnection(this, { force: true, ...options });\n    }\n  }\n  /**\n   * @beta\n   * @experimental\n   * An alias for {@link ClientSession.endSession|ClientSession.endSession()}.\n   */\n  declare [Symbol.asyncDispose]: () => Promise<void>;\n  /** @internal */\n  async asyncDispose() {\n    await this.endSession({ force: true });\n  }\n\n  /**\n   * Advances the operationTime for a ClientSession.\n   *\n   * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n   */\n  advanceOperationTime(operationTime: Timestamp): void {\n    if (this.operationTime == null) {\n      this.operationTime = operationTime;\n      return;\n    }\n\n    if (operationTime.greaterThan(this.operationTime)) {\n      this.operationTime = operationTime;\n    }\n  }\n\n  /**\n   * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n   *\n   * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n   */\n  advanceClusterTime(clusterTime: ClusterTime): void {\n    if (!clusterTime || typeof clusterTime !== 'object') {\n      throw new MongoInvalidArgumentError('input cluster time must be an object');\n    }\n    if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n      throw new MongoInvalidArgumentError(\n        'input cluster time \"clusterTime\" property must be a valid BSON Timestamp'\n      );\n    }\n    if (\n      !clusterTime.signature ||\n      clusterTime.signature.hash?._bsontype !== 'Binary' ||\n      (typeof clusterTime.signature.keyId !== 'bigint' &&\n        typeof clusterTime.signature.keyId !== 'number' &&\n        clusterTime.signature.keyId?._bsontype !== 'Long') // apparently we decode the key to number?\n    ) {\n      throw new MongoInvalidArgumentError(\n        'input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId'\n      );\n    }\n\n    _advanceClusterTime(this, clusterTime);\n  }\n\n  /**\n   * Used to determine if this session equals another\n   *\n   * @param session - The session to compare to\n   */\n  equals(session: ClientSession): boolean {\n    if (!(session instanceof ClientSession)) {\n      return false;\n    }\n\n    if (this.id == null || session.id == null) {\n      return false;\n    }\n\n    return ByteUtils.equals(this.id.id.buffer, session.id.id.buffer);\n  }\n\n  /**\n   * Increment the transaction number on the internal ServerSession\n   *\n   * @privateRemarks\n   * This helper increments a value stored on the client session that will be\n   * added to the serverSession's txnNumber upon applying it to a command.\n   * This is because the serverSession is lazily acquired after a connection is obtained\n   */\n  incrementTransactionNumber(): void {\n    this.txnNumberIncrement += 1;\n  }\n\n  /** @returns whether this session is currently in a transaction or not */\n  inTransaction(): boolean {\n    return this.transaction.isActive;\n  }\n\n  /**\n   * Starts a new transaction with the given options.\n   *\n   * @remarks\n   * **IMPORTANT**: Running operations in parallel is not supported during a transaction. The use of `Promise.all`,\n   * `Promise.allSettled`, `Promise.race`, etc to parallelize operations inside a transaction is\n   * undefined behaviour.\n   *\n   * @param options - Options for the transaction\n   */\n  startTransaction(options?: TransactionOptions): void {\n    if (this.snapshotEnabled) {\n      throw new MongoCompatibilityError('Transactions are not supported in snapshot sessions');\n    }\n\n    if (this.inTransaction()) {\n      throw new MongoTransactionError('Transaction already in progress');\n    }\n\n    if (this.isPinned && this.transaction.isCommitted) {\n      this.unpin();\n    }\n\n    const topologyMaxWireVersion = maxWireVersion(this.client.topology);\n    if (\n      isSharded(this.client.topology) &&\n      topologyMaxWireVersion != null &&\n      topologyMaxWireVersion < minWireVersionForShardedTransactions\n    ) {\n      throw new MongoCompatibilityError(\n        'Transactions are not supported on sharded clusters in MongoDB < 4.2.'\n      );\n    }\n\n    this.commitAttempted = false;\n    // increment txnNumber\n    this.incrementTransactionNumber();\n    // create transaction state\n    this.transaction = new Transaction({\n      readConcern:\n        options?.readConcern ??\n        this.defaultTransactionOptions.readConcern ??\n        this.clientOptions?.readConcern,\n      writeConcern:\n        options?.writeConcern ??\n        this.defaultTransactionOptions.writeConcern ??\n        this.clientOptions?.writeConcern,\n      readPreference:\n        options?.readPreference ??\n        this.defaultTransactionOptions.readPreference ??\n        this.clientOptions?.readPreference,\n      maxCommitTimeMS: options?.maxCommitTimeMS ?? this.defaultTransactionOptions.maxCommitTimeMS\n    });\n\n    this.transaction.transition(TxnState.STARTING_TRANSACTION);\n  }\n\n  /**\n   * Commits the currently active transaction in this session.\n   *\n   * @param options - Optional options, can be used to override `defaultTimeoutMS`.\n   */\n  async commitTransaction(options?: { timeoutMS?: number }): Promise<void> {\n    if (this.transaction.state === TxnState.NO_TRANSACTION) {\n      throw new MongoTransactionError('No transaction started');\n    }\n\n    if (\n      this.transaction.state === TxnState.STARTING_TRANSACTION ||\n      this.transaction.state === TxnState.TRANSACTION_COMMITTED_EMPTY\n    ) {\n      // the transaction was never started, we can safely exit here\n      this.transaction.transition(TxnState.TRANSACTION_COMMITTED_EMPTY);\n      return;\n    }\n\n    if (this.transaction.state === TxnState.TRANSACTION_ABORTED) {\n      throw new MongoTransactionError(\n        'Cannot call commitTransaction after calling abortTransaction'\n      );\n    }\n\n    const command: {\n      commitTransaction: 1;\n      writeConcern?: WriteConcernSettings;\n      recoveryToken?: Document;\n      maxTimeMS?: number;\n    } = { commitTransaction: 1 };\n\n    const timeoutMS =\n      typeof options?.timeoutMS === 'number'\n        ? options.timeoutMS\n        : typeof this.timeoutMS === 'number'\n          ? this.timeoutMS\n          : null;\n\n    const wc = this.transaction.options.writeConcern ?? this.clientOptions?.writeConcern;\n    if (wc != null) {\n      if (timeoutMS == null && this.timeoutContext == null) {\n        WriteConcern.apply(command, { wtimeoutMS: 10000, w: 'majority', ...wc });\n      } else {\n        const wcKeys = Object.keys(wc);\n        if (wcKeys.length > 2 || (!wcKeys.includes('wtimeoutMS') && !wcKeys.includes('wTimeoutMS')))\n          // if the write concern was specified with wTimeoutMS, then we set both wtimeoutMS and wTimeoutMS, guaranteeing at least two keys, so if we have more than two keys, then we can automatically assume that we should add the write concern to the command. If it has 2 or fewer keys, we need to check that those keys aren't the wtimeoutMS or wTimeoutMS options before we add the write concern to the command\n          WriteConcern.apply(command, { ...wc, wtimeoutMS: undefined });\n      }\n    }\n\n    if (this.transaction.state === TxnState.TRANSACTION_COMMITTED || this.commitAttempted) {\n      if (timeoutMS == null && this.timeoutContext == null) {\n        WriteConcern.apply(command, { wtimeoutMS: 10000, ...wc, w: 'majority' });\n      } else {\n        WriteConcern.apply(command, { w: 'majority', ...wc, wtimeoutMS: undefined });\n      }\n    }\n\n    if (typeof this.transaction.options.maxTimeMS === 'number') {\n      command.maxTimeMS = this.transaction.options.maxTimeMS;\n    }\n\n    if (this.transaction.recoveryToken) {\n      command.recoveryToken = this.transaction.recoveryToken;\n    }\n\n    const operation = new RunAdminCommandOperation(command, {\n      session: this,\n      readPreference: ReadPreference.primary,\n      bypassPinningCheck: true\n    });\n\n    const timeoutContext =\n      this.timeoutContext ??\n      (typeof timeoutMS === 'number'\n        ? TimeoutContext.create({\n            serverSelectionTimeoutMS: this.clientOptions.serverSelectionTimeoutMS,\n            socketTimeoutMS: this.clientOptions.socketTimeoutMS,\n            timeoutMS\n          })\n        : null);\n\n    try {\n      await executeOperation(this.client, operation, timeoutContext);\n      this.commitAttempted = undefined;\n      return;\n    } catch (firstCommitError) {\n      this.commitAttempted = true;\n      if (firstCommitError instanceof MongoError && isRetryableWriteError(firstCommitError)) {\n        // SPEC-1185: apply majority write concern when retrying commitTransaction\n        WriteConcern.apply(command, { wtimeoutMS: 10000, ...wc, w: 'majority' });\n        // per txns spec, must unpin session in this case\n        this.unpin({ force: true });\n\n        try {\n          await executeOperation(\n            this.client,\n            new RunAdminCommandOperation(command, {\n              session: this,\n              readPreference: ReadPreference.primary,\n              bypassPinningCheck: true\n            }),\n            timeoutContext\n          );\n          return;\n        } catch (retryCommitError) {\n          // If the retry failed, we process that error instead of the original\n          if (shouldAddUnknownTransactionCommitResultLabel(retryCommitError)) {\n            retryCommitError.addErrorLabel(MongoErrorLabel.UnknownTransactionCommitResult);\n          }\n\n          if (shouldUnpinAfterCommitError(retryCommitError)) {\n            this.unpin({ error: retryCommitError });\n          }\n\n          throw retryCommitError;\n        }\n      }\n\n      if (shouldAddUnknownTransactionCommitResultLabel(firstCommitError)) {\n        firstCommitError.addErrorLabel(MongoErrorLabel.UnknownTransactionCommitResult);\n      }\n\n      if (shouldUnpinAfterCommitError(firstCommitError)) {\n        this.unpin({ error: firstCommitError });\n      }\n\n      throw firstCommitError;\n    } finally {\n      this.transaction.transition(TxnState.TRANSACTION_COMMITTED);\n    }\n  }\n\n  /**\n   * Aborts the currently active transaction in this session.\n   *\n   * @param options - Optional options, can be used to override `defaultTimeoutMS`.\n   */\n  async abortTransaction(options?: { timeoutMS?: number }): Promise<void>;\n  /** @internal */\n  async abortTransaction(options?: { timeoutMS?: number; throwTimeout?: true }): Promise<void>;\n  async abortTransaction(options?: { timeoutMS?: number; throwTimeout?: true }): Promise<void> {\n    if (this.transaction.state === TxnState.NO_TRANSACTION) {\n      throw new MongoTransactionError('No transaction started');\n    }\n\n    if (this.transaction.state === TxnState.STARTING_TRANSACTION) {\n      // the transaction was never started, we can safely exit here\n      this.transaction.transition(TxnState.TRANSACTION_ABORTED);\n      return;\n    }\n\n    if (this.transaction.state === TxnState.TRANSACTION_ABORTED) {\n      throw new MongoTransactionError('Cannot call abortTransaction twice');\n    }\n\n    if (\n      this.transaction.state === TxnState.TRANSACTION_COMMITTED ||\n      this.transaction.state === TxnState.TRANSACTION_COMMITTED_EMPTY\n    ) {\n      throw new MongoTransactionError(\n        'Cannot call abortTransaction after calling commitTransaction'\n      );\n    }\n\n    const command: {\n      abortTransaction: 1;\n      writeConcern?: WriteConcernOptions;\n      recoveryToken?: Document;\n    } = { abortTransaction: 1 };\n\n    const timeoutMS =\n      typeof options?.timeoutMS === 'number'\n        ? options.timeoutMS\n        : this.timeoutContext?.csotEnabled()\n          ? this.timeoutContext.timeoutMS // refresh timeoutMS for abort operation\n          : typeof this.timeoutMS === 'number'\n            ? this.timeoutMS\n            : null;\n\n    const timeoutContext =\n      timeoutMS != null\n        ? TimeoutContext.create({\n            timeoutMS,\n            serverSelectionTimeoutMS: this.clientOptions.serverSelectionTimeoutMS,\n            socketTimeoutMS: this.clientOptions.socketTimeoutMS\n          })\n        : null;\n\n    const wc = this.transaction.options.writeConcern ?? this.clientOptions?.writeConcern;\n    if (wc != null && timeoutMS == null) {\n      WriteConcern.apply(command, { wtimeoutMS: 10000, w: 'majority', ...wc });\n    }\n\n    if (this.transaction.recoveryToken) {\n      command.recoveryToken = this.transaction.recoveryToken;\n    }\n\n    const operation = new RunAdminCommandOperation(command, {\n      session: this,\n      readPreference: ReadPreference.primary,\n      bypassPinningCheck: true\n    });\n\n    try {\n      await executeOperation(this.client, operation, timeoutContext);\n      this.unpin();\n      return;\n    } catch (firstAbortError) {\n      this.unpin();\n\n      if (firstAbortError.name === 'MongoRuntimeError') throw firstAbortError;\n      if (options?.throwTimeout && firstAbortError.name === 'MongoOperationTimeoutError') {\n        throw firstAbortError;\n      }\n\n      if (firstAbortError instanceof MongoError && isRetryableWriteError(firstAbortError)) {\n        try {\n          await executeOperation(this.client, operation, timeoutContext);\n          return;\n        } catch (secondAbortError) {\n          if (secondAbortError.name === 'MongoRuntimeError') throw secondAbortError;\n          if (options?.throwTimeout && secondAbortError.name === 'MongoOperationTimeoutError') {\n            throw secondAbortError;\n          }\n          // we do not retry the retry\n        }\n      }\n\n      // The spec indicates that if the operation times out or fails with a non-retryable error, we should ignore all errors on `abortTransaction`\n    } finally {\n      this.transaction.transition(TxnState.TRANSACTION_ABORTED);\n      if (this.loadBalanced) {\n        maybeClearPinnedConnection(this, { force: false });\n      }\n    }\n  }\n\n  /**\n   * This is here to ensure that ClientSession is never serialized to BSON.\n   */\n  toBSON(): never {\n    throw new MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n  }\n\n  /**\n   * Starts a transaction and runs a provided function, ensuring the commitTransaction is always attempted when all operations run in the function have completed.\n   *\n   * **IMPORTANT:** This method requires the function passed in to return a Promise. That promise must be made by `await`-ing all operations in such a way that rejections are propagated to the returned promise.\n   *\n   * **IMPORTANT:** Running operations in parallel is not supported during a transaction. The use of `Promise.all`,\n   * `Promise.allSettled`, `Promise.race`, etc to parallelize operations inside a transaction is\n   * undefined behaviour.\n   *\n   * **IMPORTANT:** When running an operation inside a `withTransaction` callback, if it is not\n   * provided the explicit session in its options, it will not be part of the transaction and it will not respect timeoutMS.\n   *\n   *\n   * @remarks\n   * - If all operations successfully complete and the `commitTransaction` operation is successful, then the provided function will return the result of the provided function.\n   * - If the transaction is unable to complete or an error is thrown from within the provided function, then the provided function will throw an error.\n   *   - If the transaction is manually aborted within the provided function it will not throw.\n   * - If the driver needs to attempt to retry the operations, the provided function may be called multiple times.\n   *\n   * Checkout a descriptive example here:\n   * @see https://www.mongodb.com/blog/post/quick-start-nodejs--mongodb--how-to-implement-transactions\n   *\n   * If a command inside withTransaction fails:\n   * - It may cause the transaction on the server to be aborted.\n   * - This situation is normally handled transparently by the driver.\n   * - However, if the application catches such an error and does not rethrow it, the driver will not be able to determine whether the transaction was aborted or not.\n   * - The driver will then retry the transaction indefinitely.\n   *\n   * To avoid this situation, the application must not silently handle errors within the provided function.\n   * If the application needs to handle errors within, it must await all operations such that if an operation is rejected it becomes the rejection of the callback function passed into withTransaction.\n   *\n   * @param fn - callback to run within a transaction\n   * @param options - optional settings for the transaction\n   * @returns A raw command response or undefined\n   */\n  async withTransaction<T = any>(\n    fn: WithTransactionCallback<T>,\n    options?: TransactionOptions & {\n      /**\n       * Configures a timeoutMS expiry for the entire withTransactionCallback.\n       *\n       * @remarks\n       * - The remaining timeout will not be applied to callback operations that do not use the ClientSession.\n       * - Overriding timeoutMS for operations executed using the explicit session inside the provided callback will result in a client-side error.\n       */\n      timeoutMS?: number;\n    }\n  ): Promise<T> {\n    const MAX_TIMEOUT = 120000;\n\n    const timeoutMS = options?.timeoutMS ?? this.timeoutMS ?? null;\n    this.timeoutContext =\n      timeoutMS != null\n        ? TimeoutContext.create({\n            timeoutMS,\n            serverSelectionTimeoutMS: this.clientOptions.serverSelectionTimeoutMS,\n            socketTimeoutMS: this.clientOptions.socketTimeoutMS\n          })\n        : null;\n\n    const startTime = this.timeoutContext?.csotEnabled() ? this.timeoutContext.start : now();\n\n    let committed = false;\n    let result: any;\n\n    try {\n      while (!committed) {\n        this.startTransaction(options); // may throw on error\n\n        try {\n          const promise = fn(this);\n          if (!isPromiseLike(promise)) {\n            throw new MongoInvalidArgumentError(\n              'Function provided to `withTransaction` must return a Promise'\n            );\n          }\n\n          result = await promise;\n\n          if (\n            this.transaction.state === TxnState.NO_TRANSACTION ||\n            this.transaction.state === TxnState.TRANSACTION_COMMITTED ||\n            this.transaction.state === TxnState.TRANSACTION_ABORTED\n          ) {\n            // Assume callback intentionally ended the transaction\n            return result;\n          }\n        } catch (fnError) {\n          if (!(fnError instanceof MongoError) || fnError instanceof MongoInvalidArgumentError) {\n            await this.abortTransaction();\n            throw fnError;\n          }\n\n          if (\n            this.transaction.state === TxnState.STARTING_TRANSACTION ||\n            this.transaction.state === TxnState.TRANSACTION_IN_PROGRESS\n          ) {\n            await this.abortTransaction();\n          }\n\n          if (\n            fnError.hasErrorLabel(MongoErrorLabel.TransientTransactionError) &&\n            (this.timeoutContext != null || now() - startTime < MAX_TIMEOUT)\n          ) {\n            continue;\n          }\n\n          throw fnError;\n        }\n\n        while (!committed) {\n          try {\n            /*\n             * We will rely on ClientSession.commitTransaction() to\n             * apply a majority write concern if commitTransaction is\n             * being retried (see: DRIVERS-601)\n             */\n            await this.commitTransaction();\n            committed = true;\n          } catch (commitError) {\n            /*\n             * Note: a maxTimeMS error will have the MaxTimeMSExpired\n             * code (50) and can be reported as a top-level error or\n             * inside writeConcernError, ex.\n             * { ok:0, code: 50, codeName: 'MaxTimeMSExpired' }\n             * { ok:1, writeConcernError: { code: 50, codeName: 'MaxTimeMSExpired' } }\n             */\n            if (\n              !isMaxTimeMSExpiredError(commitError) &&\n              commitError.hasErrorLabel(MongoErrorLabel.UnknownTransactionCommitResult) &&\n              (this.timeoutContext != null || now() - startTime < MAX_TIMEOUT)\n            ) {\n              continue;\n            }\n\n            if (\n              commitError.hasErrorLabel(MongoErrorLabel.TransientTransactionError) &&\n              (this.timeoutContext != null || now() - startTime < MAX_TIMEOUT)\n            ) {\n              break;\n            }\n\n            throw commitError;\n          }\n        }\n      }\n      return result;\n    } finally {\n      this.timeoutContext = null;\n    }\n  }\n}\n\nconfigureResourceManagement(ClientSession.prototype);\n\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set([\n  'CannotSatisfyWriteConcern',\n  'UnknownReplWriteConcern',\n  'UnsatisfiableWriteConcern'\n]);\n\nfunction shouldUnpinAfterCommitError(commitError: Error) {\n  if (commitError instanceof MongoError) {\n    if (\n      isRetryableWriteError(commitError) ||\n      commitError instanceof MongoWriteConcernError ||\n      isMaxTimeMSExpiredError(commitError)\n    ) {\n      if (isUnknownTransactionCommitResult(commitError)) {\n        // per txns spec, must unpin session in this case\n        return true;\n      }\n    } else if (commitError.hasErrorLabel(MongoErrorLabel.TransientTransactionError)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction shouldAddUnknownTransactionCommitResultLabel(commitError: MongoError) {\n  let ok = isRetryableWriteError(commitError);\n  ok ||= commitError instanceof MongoWriteConcernError;\n  ok ||= isMaxTimeMSExpiredError(commitError);\n  ok &&= isUnknownTransactionCommitResult(commitError);\n  return ok;\n}\n\nfunction isUnknownTransactionCommitResult(err: MongoError): err is MongoError {\n  const isNonDeterministicWriteConcernError =\n    err instanceof MongoServerError &&\n    err.codeName &&\n    NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n\n  return (\n    isMaxTimeMSExpiredError(err) ||\n    (!isNonDeterministicWriteConcernError &&\n      err.code !== MONGODB_ERROR_CODES.UnsatisfiableWriteConcern &&\n      err.code !== MONGODB_ERROR_CODES.UnknownReplWriteConcern)\n  );\n}\n\nexport function maybeClearPinnedConnection(\n  session: ClientSession,\n  options?: EndSessionOptions\n): void {\n  // unpin a connection if it has been pinned\n  const conn = session.pinnedConnection;\n  const error = options?.error;\n\n  if (\n    session.inTransaction() &&\n    error &&\n    error instanceof MongoError &&\n    error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)\n  ) {\n    return;\n  }\n\n  const topology = session.client.topology;\n  // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n  //       to validate that we don't unpin on _all_ errors?\n  if (conn && topology != null) {\n    const servers = Array.from(topology.s.servers.values());\n    const loadBalancer = servers[0];\n\n    if (options?.error == null || options?.force) {\n      loadBalancer.pool.checkIn(conn);\n      session.pinnedConnection = undefined;\n      conn.emit(\n        UNPINNED,\n        session.transaction.state !== TxnState.NO_TRANSACTION\n          ? ConnectionPoolMetrics.TXN\n          : ConnectionPoolMetrics.CURSOR\n      );\n\n      if (options?.forceClear) {\n        loadBalancer.pool.clear({ serviceId: conn.serviceId });\n      }\n    }\n  }\n}\n\nfunction isMaxTimeMSExpiredError(err: MongoError): boolean {\n  if (err == null || !(err instanceof MongoServerError)) {\n    return false;\n  }\n\n  return (\n    err.code === MONGODB_ERROR_CODES.MaxTimeMSExpired ||\n    err.writeConcernError?.code === MONGODB_ERROR_CODES.MaxTimeMSExpired\n  );\n}\n\n/** @public */\nexport type ServerSessionId = { id: Binary };\n\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\nexport class ServerSession {\n  id: ServerSessionId;\n  lastUse: number;\n  txnNumber: number;\n  isDirty: boolean;\n\n  /** @internal */\n  constructor(cloned?: ServerSession | null) {\n    if (cloned != null) {\n      const idBytes = Buffer.allocUnsafe(16);\n      idBytes.set(cloned.id.id.buffer);\n      this.id = { id: new Binary(idBytes, cloned.id.id.sub_type) };\n      this.lastUse = cloned.lastUse;\n      this.txnNumber = cloned.txnNumber;\n      this.isDirty = cloned.isDirty;\n      return;\n    }\n    this.id = { id: new Binary(uuidV4(), Binary.SUBTYPE_UUID) };\n    this.lastUse = now();\n    this.txnNumber = 0;\n    this.isDirty = false;\n  }\n\n  /**\n   * Determines if the server session has timed out.\n   *\n   * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n   */\n  hasTimedOut(sessionTimeoutMinutes: number): boolean {\n    // Take the difference of the lastUse timestamp and now, which will result in a value in\n    // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n    const idleTimeMinutes = Math.round(\n      ((calculateDurationInMs(this.lastUse) % 86400000) % 3600000) / 60000\n    );\n\n    return idleTimeMinutes > sessionTimeoutMinutes - 1;\n  }\n}\n\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\nexport class ServerSessionPool {\n  client: MongoClient;\n  sessions: List<ServerSession>;\n\n  constructor(client: MongoClient) {\n    if (client == null) {\n      throw new MongoRuntimeError('ServerSessionPool requires a MongoClient');\n    }\n\n    this.client = client;\n    this.sessions = new List<ServerSession>();\n  }\n\n  /**\n   * Acquire a Server Session from the pool.\n   * Iterates through each session in the pool, removing any stale sessions\n   * along the way. The first non-stale session found is removed from the\n   * pool and returned. If no non-stale session is found, a new ServerSession is created.\n   */\n  acquire(): ServerSession {\n    const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n\n    let session: ServerSession | null = null;\n\n    // Try to obtain from session pool\n    while (this.sessions.length > 0) {\n      const potentialSession = this.sessions.shift();\n      if (\n        potentialSession != null &&\n        (!!this.client.topology?.loadBalanced ||\n          !potentialSession.hasTimedOut(sessionTimeoutMinutes))\n      ) {\n        session = potentialSession;\n        break;\n      }\n    }\n\n    // If nothing valid came from the pool make a new one\n    if (session == null) {\n      session = new ServerSession();\n    }\n\n    return session;\n  }\n\n  /**\n   * Release a session to the session pool\n   * Adds the session back to the session pool if the session has not timed out yet.\n   * This method also removes any stale sessions from the pool.\n   *\n   * @param session - The session to release to the pool\n   */\n  release(session: ServerSession): void {\n    const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n\n    if (this.client.topology?.loadBalanced && !sessionTimeoutMinutes) {\n      this.sessions.unshift(session);\n    }\n\n    if (!sessionTimeoutMinutes) {\n      return;\n    }\n\n    this.sessions.prune(session => session.hasTimedOut(sessionTimeoutMinutes));\n\n    if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n      if (session.isDirty) {\n        return;\n      }\n\n      // otherwise, readd this session to the session pool\n      this.sessions.unshift(session);\n    }\n  }\n}\n\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n *\n * @internal\n */\nexport function applySession(\n  session: ClientSession,\n  command: Document,\n  options: CommandOptions\n): MongoDriverError | undefined {\n  if (session.hasEnded) {\n    return new MongoExpiredSessionError();\n  }\n\n  // May acquire serverSession here\n  const serverSession = session.serverSession;\n  if (serverSession == null) {\n    return new MongoRuntimeError('Unable to acquire server session');\n  }\n\n  if (options.writeConcern?.w === 0) {\n    if (session && session.explicit) {\n      // Error if user provided an explicit session to an unacknowledged write (SPEC-1019)\n      return new MongoAPIError('Cannot have explicit session with unacknowledged writes');\n    }\n    return;\n  }\n\n  // mark the last use of this session, and apply the `lsid`\n  serverSession.lastUse = now();\n  command.lsid = serverSession.id;\n\n  const inTxnOrTxnCommand = session.inTransaction() || isTransactionCommand(command);\n  const isRetryableWrite = !!options.willRetryWrite;\n\n  if (isRetryableWrite || inTxnOrTxnCommand) {\n    serverSession.txnNumber += session.txnNumberIncrement;\n    session.txnNumberIncrement = 0;\n    // TODO(NODE-2674): Preserve int64 sent from MongoDB\n    command.txnNumber = Long.fromNumber(serverSession.txnNumber);\n  }\n\n  if (!inTxnOrTxnCommand) {\n    if (session.transaction.state !== TxnState.NO_TRANSACTION) {\n      session.transaction.transition(TxnState.NO_TRANSACTION);\n    }\n\n    if (\n      session.supports.causalConsistency &&\n      session.operationTime &&\n      commandSupportsReadConcern(command)\n    ) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n    } else if (session.snapshotEnabled) {\n      command.readConcern = command.readConcern || { level: ReadConcernLevel.snapshot };\n      if (session.snapshotTime != null) {\n        Object.assign(command.readConcern, { atClusterTime: session.snapshotTime });\n      }\n    }\n\n    return;\n  }\n\n  // now attempt to apply transaction-specific sessions data\n\n  // `autocommit` must always be false to differentiate from retryable writes\n  command.autocommit = false;\n\n  if (session.transaction.state === TxnState.STARTING_TRANSACTION) {\n    session.transaction.transition(TxnState.TRANSACTION_IN_PROGRESS);\n    command.startTransaction = true;\n\n    const readConcern =\n      session.transaction.options.readConcern || session?.clientOptions?.readConcern;\n    if (readConcern) {\n      command.readConcern = readConcern;\n    }\n\n    if (session.supports.causalConsistency && session.operationTime) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n    }\n  }\n  return;\n}\n\nexport function updateSessionFromResponse(session: ClientSession, document: MongoDBResponse): void {\n  if (document.$clusterTime) {\n    _advanceClusterTime(session, document.$clusterTime);\n  }\n\n  if (document.operationTime && session && session.supports.causalConsistency) {\n    session.advanceOperationTime(document.operationTime);\n  }\n\n  if (document.recoveryToken && session && session.inTransaction()) {\n    session.transaction._recoveryToken = document.recoveryToken;\n  }\n\n  if (session?.snapshotEnabled && session.snapshotTime == null) {\n    // find and aggregate commands return atClusterTime on the cursor\n    // distinct includes it in the response body\n    const atClusterTime = document.atClusterTime;\n    if (atClusterTime) {\n      session.snapshotTime = atClusterTime;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}