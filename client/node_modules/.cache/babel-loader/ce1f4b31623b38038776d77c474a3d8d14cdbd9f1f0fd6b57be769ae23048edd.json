{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/glebch/workprojects/baumna/client/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoLogger = exports.MongoLoggableComponent = exports.SEVERITY_LEVEL_MAP = exports.DEFAULT_MAX_DOCUMENT_LENGTH = exports.SeverityLevel = void 0;\nexports.parseSeverityFromString = parseSeverityFromString;\nexports.createStdioLogger = createStdioLogger;\nexports.stringifyWithMaxLen = stringifyWithMaxLen;\nexports.defaultLogTransform = defaultLogTransform;\nconst util_1 = require(\"util\");\nconst types_1 = require(\"util/types\");\nconst bson_1 = require(\"./bson\");\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\n/**\n * @public\n * Severity levels align with unix syslog.\n * Most typical driver functions will log to debug.\n */\nexports.SeverityLevel = Object.freeze({\n  EMERGENCY: 'emergency',\n  ALERT: 'alert',\n  CRITICAL: 'critical',\n  ERROR: 'error',\n  WARNING: 'warn',\n  NOTICE: 'notice',\n  INFORMATIONAL: 'info',\n  DEBUG: 'debug',\n  TRACE: 'trace',\n  OFF: 'off'\n});\n/** @internal */\nexports.DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\n/** @internal */\nclass SeverityLevelMap extends Map {\n  constructor(entries) {\n    const newEntries = [];\n    for (const [level, value] of entries) {\n      newEntries.push([value, level]);\n    }\n    newEntries.push(...entries);\n    super(newEntries);\n  }\n  getNumericSeverityLevel(severity) {\n    return this.get(severity);\n  }\n  getSeverityLevelName(level) {\n    return this.get(level);\n  }\n}\n/** @internal */\nexports.SEVERITY_LEVEL_MAP = new SeverityLevelMap([[exports.SeverityLevel.OFF, -Infinity], [exports.SeverityLevel.EMERGENCY, 0], [exports.SeverityLevel.ALERT, 1], [exports.SeverityLevel.CRITICAL, 2], [exports.SeverityLevel.ERROR, 3], [exports.SeverityLevel.WARNING, 4], [exports.SeverityLevel.NOTICE, 5], [exports.SeverityLevel.INFORMATIONAL, 6], [exports.SeverityLevel.DEBUG, 7], [exports.SeverityLevel.TRACE, 8]]);\n/** @public */\nexports.MongoLoggableComponent = Object.freeze({\n  COMMAND: 'command',\n  TOPOLOGY: 'topology',\n  SERVER_SELECTION: 'serverSelection',\n  CONNECTION: 'connection',\n  CLIENT: 'client'\n});\n/**\n * Parses a string as one of SeverityLevel\n * @internal\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nfunction parseSeverityFromString(s) {\n  const validSeverities = Object.values(exports.SeverityLevel);\n  const lowerSeverity = s === null || s === void 0 ? void 0 : s.toLowerCase();\n  if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n    return lowerSeverity;\n  }\n  return null;\n}\n/** @internal */\nfunction createStdioLogger(stream) {\n  return {\n    write: (0, util_1.promisify)((log, cb) => {\n      const logLine = (0, util_1.inspect)(log, {\n        compact: true,\n        breakLength: Infinity\n      });\n      stream.write(\"\".concat(logLine, \"\\n\"), 'utf-8', cb);\n      return;\n    })\n  };\n}\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\n * Writable or an object which has a `write` method with the signature:\n * ```ts\n * write(log: Log): void\n * ```\n *\n * @returns the MongoDBLogWritable object to write logs to\n */\nfunction resolveLogPath(_ref, _ref2) {\n  let {\n    MONGODB_LOG_PATH\n  } = _ref;\n  let {\n    mongodbLogPath\n  } = _ref2;\n  if (typeof mongodbLogPath === 'string' && /^stderr$/i.test(mongodbLogPath)) {\n    return {\n      mongodbLogPath: createStdioLogger(process.stderr),\n      mongodbLogPathIsStdErr: true\n    };\n  }\n  if (typeof mongodbLogPath === 'string' && /^stdout$/i.test(mongodbLogPath)) {\n    return {\n      mongodbLogPath: createStdioLogger(process.stdout),\n      mongodbLogPathIsStdErr: false\n    };\n  }\n  if (typeof mongodbLogPath === 'object' && typeof (mongodbLogPath === null || mongodbLogPath === void 0 ? void 0 : mongodbLogPath.write) === 'function') {\n    return {\n      mongodbLogPath: mongodbLogPath,\n      mongodbLogPathIsStdErr: false\n    };\n  }\n  if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\n    return {\n      mongodbLogPath: createStdioLogger(process.stderr),\n      mongodbLogPathIsStdErr: true\n    };\n  }\n  if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\n    return {\n      mongodbLogPath: createStdioLogger(process.stdout),\n      mongodbLogPathIsStdErr: false\n    };\n  }\n  return {\n    mongodbLogPath: createStdioLogger(process.stderr),\n    mongodbLogPathIsStdErr: true\n  };\n}\nfunction resolveSeverityConfiguration(clientOption, environmentOption, defaultSeverity) {\n  var _ref3, _parseSeverityFromStr;\n  return (_ref3 = (_parseSeverityFromStr = parseSeverityFromString(clientOption)) !== null && _parseSeverityFromStr !== void 0 ? _parseSeverityFromStr : parseSeverityFromString(environmentOption)) !== null && _ref3 !== void 0 ? _ref3 : defaultSeverity;\n}\nfunction compareSeverity(s0, s1) {\n  const s0Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\n  const s1Num = exports.SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\n  return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\n}\n/** @internal */\nfunction stringifyWithMaxLen(value, maxDocumentLength) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let strToTruncate = '';\n  let currentLength = 0;\n  const maxDocumentLengthEnsurer = function maxDocumentLengthEnsurer(key, value) {\n    if (currentLength >= maxDocumentLength) {\n      return undefined;\n    }\n    // Account for root document\n    if (key === '') {\n      // Account for starting brace\n      currentLength += 1;\n      return value;\n    }\n    // +4 accounts for 2 quotation marks, colon and comma after value\n    // Note that this potentially undercounts since it does not account for escape sequences which\n    // will have an additional backslash added to them once passed through JSON.stringify.\n    currentLength += key.length + 4;\n    if (value == null) return value;\n    switch (typeof value) {\n      case 'string':\n        // +2 accounts for quotes\n        // Note that this potentially undercounts similarly to the key length calculation\n        currentLength += value.length + 2;\n        break;\n      case 'number':\n      case 'bigint':\n        currentLength += String(value).length;\n        break;\n      case 'boolean':\n        currentLength += value ? 4 : 5;\n        break;\n      case 'object':\n        if ((0, types_1.isUint8Array)(value)) {\n          // '{\"$binary\":{\"base64\":\"<base64 string>\",\"subType\":\"XX\"}}'\n          // This is an estimate based on the fact that the base64 is approximately 1.33x the length of\n          // the actual binary sequence https://en.wikipedia.org/wiki/Base64\n          currentLength += 22 + value.byteLength + value.byteLength * 0.33 + 18 | 0;\n        } else if ('_bsontype' in value) {\n          const v = value;\n          switch (v._bsontype) {\n            case 'Int32':\n              currentLength += String(v.value).length;\n              break;\n            case 'Double':\n              // Account for representing integers as <value>.0\n              currentLength += (v.value | 0) === v.value ? String(v.value).length + 2 : String(v.value).length;\n              break;\n            case 'Long':\n              currentLength += v.toString().length;\n              break;\n            case 'ObjectId':\n              // '{\"$oid\":\"XXXXXXXXXXXXXXXXXXXXXXXX\"}'\n              currentLength += 35;\n              break;\n            case 'MaxKey':\n            case 'MinKey':\n              // '{\"$maxKey\":1}' or '{\"$minKey\":1}'\n              currentLength += 13;\n              break;\n            case 'Binary':\n              // '{\"$binary\":{\"base64\":\"<base64 string>\",\"subType\":\"XX\"}}'\n              // This is an estimate based on the fact that the base64 is approximately 1.33x the length of\n              // the actual binary sequence https://en.wikipedia.org/wiki/Base64\n              currentLength += 22 + value.position + value.position * 0.33 + 18 | 0;\n              break;\n            case 'Timestamp':\n              // '{\"$timestamp\":{\"t\":<t>,\"i\":<i>}}'\n              currentLength += 19 + String(v.t).length + 5 + String(v.i).length + 2;\n              break;\n            case 'Code':\n              // '{\"$code\":\"<code>\"}' or '{\"$code\":\"<code>\",\"$scope\":<scope>}'\n              if (v.scope == null) {\n                currentLength += v.code.length + 10 + 2;\n              } else {\n                // Ignoring actual scope object, so this undercounts by a significant amount\n                currentLength += v.code.length + 10 + 11;\n              }\n              break;\n            case 'BSONRegExp':\n              // '{\"$regularExpression\":{\"pattern\":\"<pattern>\",\"options\":\"<options>\"}}'\n              currentLength += 34 + v.pattern.length + 13 + v.options.length + 3;\n              break;\n          }\n        }\n    }\n    return value;\n  };\n  if (typeof value === 'string') {\n    strToTruncate = value;\n  } else if (typeof value === 'function') {\n    strToTruncate = value.name;\n  } else {\n    try {\n      if (maxDocumentLength !== 0) {\n        strToTruncate = bson_1.EJSON.stringify(value, maxDocumentLengthEnsurer, 0, options);\n      } else {\n        strToTruncate = bson_1.EJSON.stringify(value, options);\n      }\n    } catch (e) {\n      strToTruncate = \"Extended JSON serialization failed with: \".concat(e.message);\n    }\n  }\n  // handle truncation that occurs in the middle of multi-byte codepoints\n  if (maxDocumentLength !== 0 && strToTruncate.length > maxDocumentLength && strToTruncate.charCodeAt(maxDocumentLength - 1) !== strToTruncate.codePointAt(maxDocumentLength - 1)) {\n    maxDocumentLength--;\n    if (maxDocumentLength === 0) {\n      return '';\n    }\n  }\n  return maxDocumentLength !== 0 && strToTruncate.length > maxDocumentLength ? \"\".concat(strToTruncate.slice(0, maxDocumentLength), \"...\") : strToTruncate;\n}\nfunction isLogConvertible(obj) {\n  const objAsLogConvertible = obj;\n  // eslint-disable-next-line no-restricted-syntax\n  return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === 'function';\n}\nfunction attachServerSelectionFields(log, serverSelectionEvent) {\n  let maxDocumentLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : exports.DEFAULT_MAX_DOCUMENT_LENGTH;\n  const {\n    selector,\n    operation,\n    topologyDescription,\n    message\n  } = serverSelectionEvent;\n  log.selector = stringifyWithMaxLen(selector, maxDocumentLength);\n  log.operation = operation;\n  log.topologyDescription = stringifyWithMaxLen(topologyDescription, maxDocumentLength);\n  log.message = message;\n  return log;\n}\nfunction attachCommandFields(log, commandEvent) {\n  log.commandName = commandEvent.commandName;\n  log.requestId = commandEvent.requestId;\n  log.driverConnectionId = commandEvent.connectionId;\n  const {\n    host,\n    port\n  } = utils_1.HostAddress.fromString(commandEvent.address).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  if (commandEvent !== null && commandEvent !== void 0 && commandEvent.serviceId) {\n    log.serviceId = commandEvent.serviceId.toHexString();\n  }\n  log.databaseName = commandEvent.databaseName;\n  log.serverConnectionId = commandEvent.serverConnectionId;\n  return log;\n}\nfunction attachConnectionFields(log, event) {\n  const {\n    host,\n    port\n  } = utils_1.HostAddress.fromString(event.address).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  return log;\n}\nfunction attachSDAMFields(log, sdamEvent) {\n  log.topologyId = sdamEvent.topologyId;\n  return log;\n}\nfunction attachServerHeartbeatFields(log, serverHeartbeatEvent) {\n  const {\n    awaited,\n    connectionId\n  } = serverHeartbeatEvent;\n  log.awaited = awaited;\n  log.driverConnectionId = serverHeartbeatEvent.connectionId;\n  const {\n    host,\n    port\n  } = utils_1.HostAddress.fromString(connectionId).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  return log;\n}\n/** @internal */\nfunction defaultLogTransform(logObject) {\n  var _logObject$failure, _logObject$failure$me, _logObject$failure2, _logObject$serviceId, _logObject$failure3;\n  let maxDocumentLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : exports.DEFAULT_MAX_DOCUMENT_LENGTH;\n  let log = Object.create(null);\n  switch (logObject.name) {\n    case constants_1.SERVER_SELECTION_STARTED:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      return log;\n    case constants_1.SERVER_SELECTION_FAILED:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      log.failure = (_logObject$failure = logObject.failure) === null || _logObject$failure === void 0 ? void 0 : _logObject$failure.message;\n      return log;\n    case constants_1.SERVER_SELECTION_SUCCEEDED:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      log.serverHost = logObject.serverHost;\n      log.serverPort = logObject.serverPort;\n      return log;\n    case constants_1.WAITING_FOR_SUITABLE_SERVER:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      log.remainingTimeMS = logObject.remainingTimeMS;\n      return log;\n    case constants_1.COMMAND_STARTED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command started';\n      log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength, {\n        relaxed: true\n      });\n      log.databaseName = logObject.databaseName;\n      return log;\n    case constants_1.COMMAND_SUCCEEDED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command succeeded';\n      log.durationMS = logObject.duration;\n      log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, {\n        relaxed: true\n      });\n      return log;\n    case constants_1.COMMAND_FAILED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command failed';\n      log.durationMS = logObject.duration;\n      log.failure = (_logObject$failure$me = (_logObject$failure2 = logObject.failure) === null || _logObject$failure2 === void 0 ? void 0 : _logObject$failure2.message) !== null && _logObject$failure$me !== void 0 ? _logObject$failure$me : '(redacted)';\n      return log;\n    case constants_1.CONNECTION_POOL_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool created';\n      if (logObject.options) {\n        const {\n          maxIdleTimeMS,\n          minPoolSize,\n          maxPoolSize,\n          maxConnecting,\n          waitQueueTimeoutMS\n        } = logObject.options;\n        log = _objectSpread(_objectSpread({}, log), {}, {\n          maxIdleTimeMS,\n          minPoolSize,\n          maxPoolSize,\n          maxConnecting,\n          waitQueueTimeoutMS\n        });\n      }\n      return log;\n    case constants_1.CONNECTION_POOL_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool ready';\n      return log;\n    case constants_1.CONNECTION_POOL_CLEARED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool cleared';\n      if (((_logObject$serviceId = logObject.serviceId) === null || _logObject$serviceId === void 0 ? void 0 : _logObject$serviceId._bsontype) === 'ObjectId') {\n        var _logObject$serviceId2;\n        log.serviceId = (_logObject$serviceId2 = logObject.serviceId) === null || _logObject$serviceId2 === void 0 ? void 0 : _logObject$serviceId2.toHexString();\n      }\n      return log;\n    case constants_1.CONNECTION_POOL_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool closed';\n      return log;\n    case constants_1.CONNECTION_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection created';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case constants_1.CONNECTION_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection ready';\n      log.driverConnectionId = logObject.connectionId;\n      log.durationMS = logObject.durationMS;\n      return log;\n    case constants_1.CONNECTION_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection closed';\n      log.driverConnectionId = logObject.connectionId;\n      switch (logObject.reason) {\n        case 'stale':\n          log.reason = 'Connection became stale because the pool was cleared';\n          break;\n        case 'idle':\n          log.reason = 'Connection has been available but unused for longer than the configured max idle time';\n          break;\n        case 'error':\n          log.reason = 'An error occurred while using the connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        default:\n          log.reason = \"Unknown close reason: \".concat(logObject.reason);\n      }\n      return log;\n    case constants_1.CONNECTION_CHECK_OUT_STARTED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout started';\n      return log;\n    case constants_1.CONNECTION_CHECK_OUT_FAILED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout failed';\n      switch (logObject.reason) {\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        case 'timeout':\n          log.reason = 'Wait queue timeout elapsed without a connection becoming available';\n          break;\n        case 'connectionError':\n          log.reason = 'An error occurred while trying to establish a new connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        default:\n          log.reason = \"Unknown close reason: \".concat(logObject.reason);\n      }\n      log.durationMS = logObject.durationMS;\n      return log;\n    case constants_1.CONNECTION_CHECKED_OUT:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked out';\n      log.driverConnectionId = logObject.connectionId;\n      log.durationMS = logObject.durationMS;\n      return log;\n    case constants_1.CONNECTION_CHECKED_IN:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked in';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case constants_1.SERVER_OPENING:\n      log = attachSDAMFields(log, logObject);\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Starting server monitoring';\n      return log;\n    case constants_1.SERVER_CLOSED:\n      log = attachSDAMFields(log, logObject);\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Stopped server monitoring';\n      return log;\n    case constants_1.SERVER_HEARTBEAT_STARTED:\n      log = attachSDAMFields(log, logObject);\n      log = attachServerHeartbeatFields(log, logObject);\n      log.message = 'Server heartbeat started';\n      return log;\n    case constants_1.SERVER_HEARTBEAT_SUCCEEDED:\n      log = attachSDAMFields(log, logObject);\n      log = attachServerHeartbeatFields(log, logObject);\n      log.message = 'Server heartbeat succeeded';\n      log.durationMS = logObject.duration;\n      log.serverConnectionId = logObject.serverConnectionId;\n      log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, {\n        relaxed: true\n      });\n      return log;\n    case constants_1.SERVER_HEARTBEAT_FAILED:\n      log = attachSDAMFields(log, logObject);\n      log = attachServerHeartbeatFields(log, logObject);\n      log.message = 'Server heartbeat failed';\n      log.durationMS = logObject.duration;\n      log.failure = (_logObject$failure3 = logObject.failure) === null || _logObject$failure3 === void 0 ? void 0 : _logObject$failure3.message;\n      return log;\n    case constants_1.TOPOLOGY_OPENING:\n      log = attachSDAMFields(log, logObject);\n      log.message = 'Starting topology monitoring';\n      return log;\n    case constants_1.TOPOLOGY_CLOSED:\n      log = attachSDAMFields(log, logObject);\n      log.message = 'Stopped topology monitoring';\n      return log;\n    case constants_1.TOPOLOGY_DESCRIPTION_CHANGED:\n      log = attachSDAMFields(log, logObject);\n      log.message = 'Topology description changed';\n      log.previousDescription = log.reply = stringifyWithMaxLen(logObject.previousDescription, maxDocumentLength);\n      log.newDescription = log.reply = stringifyWithMaxLen(logObject.newDescription, maxDocumentLength);\n      return log;\n    default:\n      for (const [key, value] of Object.entries(logObject)) {\n        if (value != null) log[key] = value;\n      }\n  }\n  return log;\n}\n/** @internal */\nclass MongoLogger {\n  constructor(options) {\n    this.pendingLog = null;\n    /**\n     * This method should be used when logging errors that do not have a public driver API for\n     * reporting errors.\n     */\n    this.error = this.log.bind(this, 'error');\n    /**\n     * This method should be used to log situations where undesirable application behaviour might\n     * occur. For example, failing to end sessions on `MongoClient.close`.\n     */\n    this.warn = this.log.bind(this, 'warn');\n    /**\n     * This method should be used to report high-level information about normal driver behaviour.\n     * For example, the creation of a `MongoClient`.\n     */\n    this.info = this.log.bind(this, 'info');\n    /**\n     * This method should be used to report information that would be helpful when debugging an\n     * application. For example, a command starting, succeeding or failing.\n     */\n    this.debug = this.log.bind(this, 'debug');\n    /**\n     * This method should be used to report fine-grained details related to logic flow. For example,\n     * entering and exiting a function body.\n     */\n    this.trace = this.log.bind(this, 'trace');\n    this.componentSeverities = options.componentSeverities;\n    this.maxDocumentLength = options.maxDocumentLength;\n    this.logDestination = options.logDestination;\n    this.logDestinationIsStdErr = options.logDestinationIsStdErr;\n    this.severities = this.createLoggingSeverities();\n  }\n  createLoggingSeverities() {\n    const severities = Object();\n    for (const component of Object.values(exports.MongoLoggableComponent)) {\n      severities[component] = {};\n      for (const severityLevel of Object.values(exports.SeverityLevel)) {\n        severities[component][severityLevel] = compareSeverity(severityLevel, this.componentSeverities[component]) <= 0;\n      }\n    }\n    return severities;\n  }\n  turnOffSeverities() {\n    for (const component of Object.values(exports.MongoLoggableComponent)) {\n      this.componentSeverities[component] = exports.SeverityLevel.OFF;\n      for (const severityLevel of Object.values(exports.SeverityLevel)) {\n        this.severities[component][severityLevel] = false;\n      }\n    }\n  }\n  logWriteFailureHandler(error) {\n    if (this.logDestinationIsStdErr) {\n      this.turnOffSeverities();\n      this.clearPendingLog();\n      return;\n    }\n    this.logDestination = createStdioLogger(process.stderr);\n    this.logDestinationIsStdErr = true;\n    this.clearPendingLog();\n    this.error(exports.MongoLoggableComponent.CLIENT, {\n      toLog: function () {\n        return {\n          message: 'User input for mongodbLogPath is now invalid. Logging is halted.',\n          error: error.message\n        };\n      }\n    });\n    this.turnOffSeverities();\n    this.clearPendingLog();\n  }\n  clearPendingLog() {\n    this.pendingLog = null;\n  }\n  willLog(component, severity) {\n    if (severity === exports.SeverityLevel.OFF) return false;\n    return this.severities[component][severity];\n  }\n  log(severity, component, message) {\n    if (!this.willLog(component, severity)) return;\n    let logMessage = {\n      t: new Date(),\n      c: component,\n      s: severity\n    };\n    if (typeof message === 'string') {\n      logMessage.message = message;\n    } else if (typeof message === 'object') {\n      if (isLogConvertible(message)) {\n        logMessage = _objectSpread(_objectSpread({}, logMessage), message.toLog());\n      } else {\n        logMessage = _objectSpread(_objectSpread({}, logMessage), defaultLogTransform(message, this.maxDocumentLength));\n      }\n    }\n    if ((0, utils_1.isPromiseLike)(this.pendingLog)) {\n      this.pendingLog = this.pendingLog.then(() => this.logDestination.write(logMessage)).then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n      return;\n    }\n    try {\n      const logResult = this.logDestination.write(logMessage);\n      if ((0, utils_1.isPromiseLike)(logResult)) {\n        this.pendingLog = logResult.then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n      }\n    } catch (error) {\n      this.logWriteFailureHandler(error);\n    }\n  }\n  /**\n   * Merges options set through environment variables and the MongoClient, preferring environment\n   * variables when both are set, and substituting defaults for values not set. Options set in\n   * constructor take precedence over both environment variables and MongoClient options.\n   *\n   * @remarks\n   * When parsing component severity levels, invalid values are treated as unset and replaced with\n   * the default severity.\n   *\n   * @param envOptions - options set for the logger from the environment\n   * @param clientOptions - options set for the logger in the MongoClient options\n   * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n   */\n  static resolveOptions(envOptions, clientOptions) {\n    var _combinedOptions$mong, _combinedOptions$mong2, _combinedOptions$mong3, _combinedOptions$mong4, _combinedOptions$mong5, _combinedOptions$mong6, _ref4, _combinedOptions$mong7;\n    // client options take precedence over env options\n    const resolvedLogPath = resolveLogPath(envOptions, clientOptions);\n    const combinedOptions = _objectSpread(_objectSpread(_objectSpread({}, envOptions), clientOptions), {}, {\n      mongodbLogPath: resolvedLogPath.mongodbLogPath,\n      mongodbLogPathIsStdErr: resolvedLogPath.mongodbLogPathIsStdErr\n    });\n    const defaultSeverity = resolveSeverityConfiguration((_combinedOptions$mong = combinedOptions.mongodbLogComponentSeverities) === null || _combinedOptions$mong === void 0 ? void 0 : _combinedOptions$mong.default, combinedOptions.MONGODB_LOG_ALL, exports.SeverityLevel.OFF);\n    return {\n      componentSeverities: {\n        command: resolveSeverityConfiguration((_combinedOptions$mong2 = combinedOptions.mongodbLogComponentSeverities) === null || _combinedOptions$mong2 === void 0 ? void 0 : _combinedOptions$mong2.command, combinedOptions.MONGODB_LOG_COMMAND, defaultSeverity),\n        topology: resolveSeverityConfiguration((_combinedOptions$mong3 = combinedOptions.mongodbLogComponentSeverities) === null || _combinedOptions$mong3 === void 0 ? void 0 : _combinedOptions$mong3.topology, combinedOptions.MONGODB_LOG_TOPOLOGY, defaultSeverity),\n        serverSelection: resolveSeverityConfiguration((_combinedOptions$mong4 = combinedOptions.mongodbLogComponentSeverities) === null || _combinedOptions$mong4 === void 0 ? void 0 : _combinedOptions$mong4.serverSelection, combinedOptions.MONGODB_LOG_SERVER_SELECTION, defaultSeverity),\n        connection: resolveSeverityConfiguration((_combinedOptions$mong5 = combinedOptions.mongodbLogComponentSeverities) === null || _combinedOptions$mong5 === void 0 ? void 0 : _combinedOptions$mong5.connection, combinedOptions.MONGODB_LOG_CONNECTION, defaultSeverity),\n        client: resolveSeverityConfiguration((_combinedOptions$mong6 = combinedOptions.mongodbLogComponentSeverities) === null || _combinedOptions$mong6 === void 0 ? void 0 : _combinedOptions$mong6.client, combinedOptions.MONGODB_LOG_CLIENT, defaultSeverity),\n        default: defaultSeverity\n      },\n      maxDocumentLength: (_ref4 = (_combinedOptions$mong7 = combinedOptions.mongodbLogMaxDocumentLength) !== null && _combinedOptions$mong7 !== void 0 ? _combinedOptions$mong7 : (0, utils_1.parseUnsignedInteger)(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH)) !== null && _ref4 !== void 0 ? _ref4 : 1000,\n      logDestination: combinedOptions.mongodbLogPath,\n      logDestinationIsStdErr: combinedOptions.mongodbLogPathIsStdErr\n    };\n  }\n}\nexports.MongoLogger = MongoLogger;","map":{"version":3,"names":["exports","parseSeverityFromString","createStdioLogger","stringifyWithMaxLen","defaultLogTransform","util_1","require","types_1","bson_1","constants_1","utils_1","SeverityLevel","Object","freeze","EMERGENCY","ALERT","CRITICAL","ERROR","WARNING","NOTICE","INFORMATIONAL","DEBUG","TRACE","OFF","DEFAULT_MAX_DOCUMENT_LENGTH","SeverityLevelMap","Map","constructor","entries","newEntries","level","value","push","getNumericSeverityLevel","severity","get","getSeverityLevelName","SEVERITY_LEVEL_MAP","Infinity","MongoLoggableComponent","COMMAND","TOPOLOGY","SERVER_SELECTION","CONNECTION","CLIENT","s","validSeverities","values","lowerSeverity","toLowerCase","includes","stream","write","promisify","log","cb","logLine","inspect","compact","breakLength","concat","resolveLogPath","_ref","_ref2","MONGODB_LOG_PATH","mongodbLogPath","test","process","stderr","mongodbLogPathIsStdErr","stdout","resolveSeverityConfiguration","clientOption","environmentOption","defaultSeverity","_ref3","_parseSeverityFromStr","compareSeverity","s0","s1","s0Num","s1Num","maxDocumentLength","options","arguments","length","undefined","strToTruncate","currentLength","maxDocumentLengthEnsurer","key","String","isUint8Array","byteLength","v","_bsontype","toString","position","t","i","scope","code","pattern","name","EJSON","stringify","e","message","charCodeAt","codePointAt","slice","isLogConvertible","obj","objAsLogConvertible","toLog","attachServerSelectionFields","serverSelectionEvent","selector","operation","topologyDescription","attachCommandFields","commandEvent","commandName","requestId","driverConnectionId","connectionId","host","port","HostAddress","fromString","address","toHostPort","serverHost","serverPort","serviceId","toHexString","databaseName","serverConnectionId","attachConnectionFields","event","attachSDAMFields","sdamEvent","topologyId","attachServerHeartbeatFields","serverHeartbeatEvent","awaited","logObject","_logObject$failure","_logObject$failure$me","_logObject$failure2","_logObject$serviceId","_logObject$failure3","create","SERVER_SELECTION_STARTED","SERVER_SELECTION_FAILED","failure","SERVER_SELECTION_SUCCEEDED","WAITING_FOR_SUITABLE_SERVER","remainingTimeMS","COMMAND_STARTED","command","relaxed","COMMAND_SUCCEEDED","durationMS","duration","reply","COMMAND_FAILED","CONNECTION_POOL_CREATED","maxIdleTimeMS","minPoolSize","maxPoolSize","maxConnecting","waitQueueTimeoutMS","_objectSpread","CONNECTION_POOL_READY","CONNECTION_POOL_CLEARED","_logObject$serviceId2","CONNECTION_POOL_CLOSED","CONNECTION_CREATED","CONNECTION_READY","CONNECTION_CLOSED","reason","error","CONNECTION_CHECK_OUT_STARTED","CONNECTION_CHECK_OUT_FAILED","CONNECTION_CHECKED_OUT","CONNECTION_CHECKED_IN","SERVER_OPENING","SERVER_CLOSED","SERVER_HEARTBEAT_STARTED","SERVER_HEARTBEAT_SUCCEEDED","SERVER_HEARTBEAT_FAILED","TOPOLOGY_OPENING","TOPOLOGY_CLOSED","TOPOLOGY_DESCRIPTION_CHANGED","previousDescription","newDescription","MongoLogger","pendingLog","bind","warn","info","debug","trace","componentSeverities","logDestination","logDestinationIsStdErr","severities","createLoggingSeverities","component","severityLevel","turnOffSeverities","logWriteFailureHandler","clearPendingLog","willLog","logMessage","Date","c","isPromiseLike","then","logResult","resolveOptions","envOptions","clientOptions","_combinedOptions$mong","_combinedOptions$mong2","_combinedOptions$mong3","_combinedOptions$mong4","_combinedOptions$mong5","_combinedOptions$mong6","_ref4","_combinedOptions$mong7","resolvedLogPath","combinedOptions","mongodbLogComponentSeverities","default","MONGODB_LOG_ALL","MONGODB_LOG_COMMAND","topology","MONGODB_LOG_TOPOLOGY","serverSelection","MONGODB_LOG_SERVER_SELECTION","connection","MONGODB_LOG_CONNECTION","client","MONGODB_LOG_CLIENT","mongodbLogMaxDocumentLength","parseUnsignedInteger","MONGODB_LOG_MAX_DOCUMENT_LENGTH"],"sources":["/Users/glebch/workprojects/baumna/client/node_modules/mongodb/src/mongo_logger.ts"],"sourcesContent":["import { inspect, promisify } from 'util';\nimport { isUint8Array } from 'util/types';\n\nimport {\n  type Binary,\n  type BSONRegExp,\n  type BSONSymbol,\n  type Code,\n  type DBRef,\n  type Decimal128,\n  type Document,\n  type Double,\n  EJSON,\n  type EJSONOptions,\n  type Int32,\n  type Long,\n  type MaxKey,\n  type MinKey,\n  type ObjectId,\n  type Timestamp\n} from './bson';\nimport type { CommandStartedEvent } from './cmap/command_monitoring_events';\nimport type {\n  ConnectionCheckedInEvent,\n  ConnectionCheckedOutEvent,\n  ConnectionCheckOutFailedEvent,\n  ConnectionCheckOutStartedEvent,\n  ConnectionClosedEvent,\n  ConnectionCreatedEvent,\n  ConnectionPoolClearedEvent,\n  ConnectionPoolClosedEvent,\n  ConnectionPoolCreatedEvent,\n  ConnectionPoolReadyEvent,\n  ConnectionReadyEvent\n} from './cmap/connection_pool_events';\nimport {\n  COMMAND_FAILED,\n  COMMAND_STARTED,\n  COMMAND_SUCCEEDED,\n  CONNECTION_CHECK_OUT_FAILED,\n  CONNECTION_CHECK_OUT_STARTED,\n  CONNECTION_CHECKED_IN,\n  CONNECTION_CHECKED_OUT,\n  CONNECTION_CLOSED,\n  CONNECTION_CREATED,\n  CONNECTION_POOL_CLEARED,\n  CONNECTION_POOL_CLOSED,\n  CONNECTION_POOL_CREATED,\n  CONNECTION_POOL_READY,\n  CONNECTION_READY,\n  SERVER_CLOSED,\n  SERVER_HEARTBEAT_FAILED,\n  SERVER_HEARTBEAT_STARTED,\n  SERVER_HEARTBEAT_SUCCEEDED,\n  SERVER_OPENING,\n  SERVER_SELECTION_FAILED,\n  SERVER_SELECTION_STARTED,\n  SERVER_SELECTION_SUCCEEDED,\n  TOPOLOGY_CLOSED,\n  TOPOLOGY_DESCRIPTION_CHANGED,\n  TOPOLOGY_OPENING,\n  WAITING_FOR_SUITABLE_SERVER\n} from './constants';\nimport type {\n  ServerClosedEvent,\n  ServerOpeningEvent,\n  TopologyClosedEvent,\n  TopologyDescriptionChangedEvent,\n  TopologyOpeningEvent\n} from './sdam/events';\nimport type {\n  ServerSelectionEvent,\n  ServerSelectionFailedEvent,\n  ServerSelectionStartedEvent,\n  ServerSelectionSucceededEvent,\n  WaitingForSuitableServerEvent\n} from './sdam/server_selection_events';\nimport { HostAddress, isPromiseLike, parseUnsignedInteger } from './utils';\n\n/**\n * @public\n * Severity levels align with unix syslog.\n * Most typical driver functions will log to debug.\n */\nexport const SeverityLevel = Object.freeze({\n  EMERGENCY: 'emergency',\n  ALERT: 'alert',\n  CRITICAL: 'critical',\n  ERROR: 'error',\n  WARNING: 'warn',\n  NOTICE: 'notice',\n  INFORMATIONAL: 'info',\n  DEBUG: 'debug',\n  TRACE: 'trace',\n  OFF: 'off'\n} as const);\n\n/** @internal */\nexport const DEFAULT_MAX_DOCUMENT_LENGTH = 1000;\n/** @public */\nexport type SeverityLevel = (typeof SeverityLevel)[keyof typeof SeverityLevel];\n\n/** @internal */\nclass SeverityLevelMap extends Map<SeverityLevel | number, SeverityLevel | number> {\n  constructor(entries: [SeverityLevel | number, SeverityLevel | number][]) {\n    const newEntries: [number | SeverityLevel, SeverityLevel | number][] = [];\n    for (const [level, value] of entries) {\n      newEntries.push([value, level]);\n    }\n\n    newEntries.push(...entries);\n    super(newEntries);\n  }\n\n  getNumericSeverityLevel(severity: SeverityLevel): number {\n    return this.get(severity) as number;\n  }\n\n  getSeverityLevelName(level: number): SeverityLevel | undefined {\n    return this.get(level) as SeverityLevel | undefined;\n  }\n}\n\n/** @internal */\nexport const SEVERITY_LEVEL_MAP = new SeverityLevelMap([\n  [SeverityLevel.OFF, -Infinity],\n  [SeverityLevel.EMERGENCY, 0],\n  [SeverityLevel.ALERT, 1],\n  [SeverityLevel.CRITICAL, 2],\n  [SeverityLevel.ERROR, 3],\n  [SeverityLevel.WARNING, 4],\n  [SeverityLevel.NOTICE, 5],\n  [SeverityLevel.INFORMATIONAL, 6],\n  [SeverityLevel.DEBUG, 7],\n  [SeverityLevel.TRACE, 8]\n]);\n\n/** @public */\nexport const MongoLoggableComponent = Object.freeze({\n  COMMAND: 'command',\n  TOPOLOGY: 'topology',\n  SERVER_SELECTION: 'serverSelection',\n  CONNECTION: 'connection',\n  CLIENT: 'client'\n} as const);\n\n/** @public */\nexport type MongoLoggableComponent =\n  (typeof MongoLoggableComponent)[keyof typeof MongoLoggableComponent];\n\n/** @internal */\nexport interface MongoLoggerEnvOptions {\n  /** Severity level for command component */\n  MONGODB_LOG_COMMAND?: string;\n  /** Severity level for topology component */\n  MONGODB_LOG_TOPOLOGY?: string;\n  /** Severity level for server selection component */\n  MONGODB_LOG_SERVER_SELECTION?: string;\n  /** Severity level for CMAP */\n  MONGODB_LOG_CONNECTION?: string;\n  /** Severity level for client */\n  MONGODB_LOG_CLIENT?: string;\n  /** Default severity level to be if any of the above are unset */\n  MONGODB_LOG_ALL?: string;\n  /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */\n  MONGODB_LOG_MAX_DOCUMENT_LENGTH?: string;\n  /** Destination for log messages. Must be 'stderr', 'stdout'. Defaults to 'stderr'. */\n  MONGODB_LOG_PATH?: string;\n}\n\n/** @public */\nexport interface LogComponentSeveritiesClientOptions {\n  /** Optional severity level for command component */\n  command?: SeverityLevel;\n  /** Optional severity level for topology component */\n  topology?: SeverityLevel;\n  /** Optional severity level for server selection component */\n  serverSelection?: SeverityLevel;\n  /** Optional severity level for connection component */\n  connection?: SeverityLevel;\n  /** Optional severity level for client component */\n  client?: SeverityLevel;\n  /** Optional default severity level to be used if any of the above are unset */\n  default?: SeverityLevel;\n}\n\n/** @internal */\nexport interface MongoLoggerMongoClientOptions {\n  /** Destination for log messages */\n  mongodbLogPath?: 'stdout' | 'stderr' | MongoDBLogWritable;\n  /** Severity levels for logger components */\n  mongodbLogComponentSeverities?: LogComponentSeveritiesClientOptions;\n  /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */\n  mongodbLogMaxDocumentLength?: number;\n}\n\n/** @internal */\nexport interface MongoLoggerOptions {\n  componentSeverities: {\n    /** Severity level for command component */\n    command: SeverityLevel;\n    /** Severity level for topology component */\n    topology: SeverityLevel;\n    /** Severity level for server selection component */\n    serverSelection: SeverityLevel;\n    /** Severity level for connection component */\n    connection: SeverityLevel;\n    /** Severity level for client component */\n    client: SeverityLevel;\n    /** Default severity level to be used if any of the above are unset */\n    default: SeverityLevel;\n  };\n  /** Max length of embedded EJSON docs. Setting to 0 disables truncation. Defaults to 1000. */\n  maxDocumentLength: number;\n  /** Destination for log messages. */\n  logDestination: MongoDBLogWritable;\n  /** For internal check to see if error should stop logging. */\n  logDestinationIsStdErr: boolean;\n}\n\n/**\n * Parses a string as one of SeverityLevel\n * @internal\n *\n * @param s - the value to be parsed\n * @returns one of SeverityLevel if value can be parsed as such, otherwise null\n */\nexport function parseSeverityFromString(s?: string): SeverityLevel | null {\n  const validSeverities: string[] = Object.values(SeverityLevel);\n  const lowerSeverity = s?.toLowerCase();\n\n  if (lowerSeverity != null && validSeverities.includes(lowerSeverity)) {\n    return lowerSeverity as SeverityLevel;\n  }\n\n  return null;\n}\n\n/** @internal */\nexport function createStdioLogger(stream: {\n  write: NodeJS.WriteStream['write'];\n}): MongoDBLogWritable {\n  return {\n    write: promisify((log: Log, cb: (error?: Error) => void): unknown => {\n      const logLine = inspect(log, { compact: true, breakLength: Infinity });\n      stream.write(`${logLine}\\n`, 'utf-8', cb);\n      return;\n    })\n  };\n}\n\n/**\n * resolves the MONGODB_LOG_PATH and mongodbLogPath options from the environment and the\n * mongo client options respectively. The mongodbLogPath can be either 'stdout', 'stderr', a NodeJS\n * Writable or an object which has a `write` method with the signature:\n * ```ts\n * write(log: Log): void\n * ```\n *\n * @returns the MongoDBLogWritable object to write logs to\n */\nfunction resolveLogPath(\n  { MONGODB_LOG_PATH }: MongoLoggerEnvOptions,\n  { mongodbLogPath }: MongoLoggerMongoClientOptions\n): { mongodbLogPath: MongoDBLogWritable; mongodbLogPathIsStdErr: boolean } {\n  if (typeof mongodbLogPath === 'string' && /^stderr$/i.test(mongodbLogPath)) {\n    return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n  }\n  if (typeof mongodbLogPath === 'string' && /^stdout$/i.test(mongodbLogPath)) {\n    return { mongodbLogPath: createStdioLogger(process.stdout), mongodbLogPathIsStdErr: false };\n  }\n\n  if (typeof mongodbLogPath === 'object' && typeof mongodbLogPath?.write === 'function') {\n    return { mongodbLogPath: mongodbLogPath, mongodbLogPathIsStdErr: false };\n  }\n\n  if (MONGODB_LOG_PATH && /^stderr$/i.test(MONGODB_LOG_PATH)) {\n    return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n  }\n  if (MONGODB_LOG_PATH && /^stdout$/i.test(MONGODB_LOG_PATH)) {\n    return { mongodbLogPath: createStdioLogger(process.stdout), mongodbLogPathIsStdErr: false };\n  }\n\n  return { mongodbLogPath: createStdioLogger(process.stderr), mongodbLogPathIsStdErr: true };\n}\n\nfunction resolveSeverityConfiguration(\n  clientOption: string | undefined,\n  environmentOption: string | undefined,\n  defaultSeverity: SeverityLevel\n): SeverityLevel {\n  return (\n    parseSeverityFromString(clientOption) ??\n    parseSeverityFromString(environmentOption) ??\n    defaultSeverity\n  );\n}\n\n/** @public */\nexport interface Log extends Record<string, any> {\n  t: Date;\n  c: MongoLoggableComponent;\n  s: SeverityLevel;\n  message?: string;\n}\n\n/**\n * @public\n *\n * A custom destination for structured logging messages.\n */\nexport interface MongoDBLogWritable {\n  /**\n   * This function will be called for every enabled log message.\n   *\n   * It can be sync or async:\n   * - If it is synchronous it will block the driver from proceeding until this method returns.\n   * - If it is asynchronous the driver will not await the returned promise. It will attach fulfillment handling (`.then`).\n   *   If the promise rejects the logger will write an error message to stderr and stop functioning.\n   *   If the promise resolves the driver proceeds to the next log message (or waits for new ones to occur).\n   *\n   * Tips:\n   * - We recommend writing an async `write` function that _never_ rejects.\n   *   Instead handle logging errors as necessary to your use case and make the write function a noop, until it can be recovered.\n   * - The Log messages are structured but **subject to change** since the intended purpose is informational.\n   *   Program against this defensively and err on the side of stringifying whatever is passed in to write in some form or another.\n   *\n   */\n  write(log: Log): PromiseLike<unknown> | unknown;\n}\n\nfunction compareSeverity(s0: SeverityLevel, s1: SeverityLevel): 1 | 0 | -1 {\n  const s0Num = SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s0);\n  const s1Num = SEVERITY_LEVEL_MAP.getNumericSeverityLevel(s1);\n\n  return s0Num < s1Num ? -1 : s0Num > s1Num ? 1 : 0;\n}\n\n/**\n * @internal\n * Must be separate from Events API due to differences in spec requirements for logging a command success\n */\nexport type LoggableCommandSucceededEvent = {\n  address: string;\n  connectionId?: string | number;\n  requestId: number;\n  duration: number;\n  commandName: string;\n  reply: Document | undefined;\n  serviceId?: ObjectId;\n  name: typeof COMMAND_SUCCEEDED;\n  serverConnectionId: bigint | null;\n  databaseName: string;\n};\n\n/**\n * @internal\n * Must be separate from Events API due to differences in spec requirements for logging a command failure\n */\nexport type LoggableCommandFailedEvent = {\n  address: string;\n  connectionId?: string | number;\n  requestId: number;\n  duration: number;\n  commandName: string;\n  failure: Error;\n  serviceId?: ObjectId;\n  name: typeof COMMAND_FAILED;\n  serverConnectionId: bigint | null;\n  databaseName: string;\n};\n\n/**\n * @internal\n * Must be separate from Events API due to differences in spec requirements for logging server heartbeat beginning\n */\nexport type LoggableServerHeartbeatStartedEvent = {\n  topologyId: number;\n  awaited: boolean;\n  connectionId: string;\n  name: typeof SERVER_HEARTBEAT_STARTED;\n};\n\n/**\n * @internal\n * Must be separate from Events API due to differences in spec requirements for logging server heartbeat success\n */\nexport type LoggableServerHeartbeatSucceededEvent = {\n  topologyId: number;\n  awaited: boolean;\n  connectionId: string;\n  reply: Document;\n  serverConnectionId: number | '<monitor>';\n  duration: number;\n  name: typeof SERVER_HEARTBEAT_SUCCEEDED;\n};\n\n/**\n * @internal\n * Must be separate from Events API due to differences in spec requirements for logging server heartbeat failure\n */\nexport type LoggableServerHeartbeatFailedEvent = {\n  topologyId: number;\n  awaited: boolean;\n  connectionId: string;\n  failure: Error;\n  duration: number;\n  name: typeof SERVER_HEARTBEAT_FAILED;\n};\n\ntype SDAMLoggableEvent =\n  | ServerClosedEvent\n  | LoggableServerHeartbeatFailedEvent\n  | LoggableServerHeartbeatStartedEvent\n  | LoggableServerHeartbeatSucceededEvent\n  | ServerOpeningEvent\n  | TopologyClosedEvent\n  | TopologyDescriptionChangedEvent\n  | TopologyOpeningEvent;\n\n/** @internal */\nexport type LoggableEvent =\n  | ServerSelectionStartedEvent\n  | ServerSelectionFailedEvent\n  | ServerSelectionSucceededEvent\n  | WaitingForSuitableServerEvent\n  | CommandStartedEvent\n  | LoggableCommandSucceededEvent\n  | LoggableCommandFailedEvent\n  | ConnectionPoolCreatedEvent\n  | ConnectionPoolReadyEvent\n  | ConnectionPoolClosedEvent\n  | ConnectionPoolClearedEvent\n  | ConnectionCreatedEvent\n  | ConnectionReadyEvent\n  | ConnectionClosedEvent\n  | ConnectionCheckedInEvent\n  | ConnectionCheckedOutEvent\n  | ConnectionCheckOutStartedEvent\n  | ConnectionCheckOutFailedEvent\n  | ServerClosedEvent\n  | LoggableServerHeartbeatFailedEvent\n  | LoggableServerHeartbeatStartedEvent\n  | LoggableServerHeartbeatSucceededEvent\n  | ServerOpeningEvent\n  | TopologyClosedEvent\n  | TopologyDescriptionChangedEvent\n  | TopologyOpeningEvent;\n\n/** @internal */\nexport interface LogConvertible extends Record<string, any> {\n  toLog(): Record<string, any>;\n}\n\ntype BSONObject =\n  | BSONRegExp\n  | BSONSymbol\n  | Code\n  | DBRef\n  | Decimal128\n  | Double\n  | Int32\n  | Long\n  | MaxKey\n  | MinKey\n  | ObjectId\n  | Timestamp\n  | Binary;\n/** @internal */\nexport function stringifyWithMaxLen(\n  value: any,\n  maxDocumentLength: number,\n  options: EJSONOptions = {}\n): string {\n  let strToTruncate = '';\n\n  let currentLength = 0;\n  const maxDocumentLengthEnsurer = function maxDocumentLengthEnsurer(key: string, value: any) {\n    if (currentLength >= maxDocumentLength) {\n      return undefined;\n    }\n    // Account for root document\n    if (key === '') {\n      // Account for starting brace\n      currentLength += 1;\n      return value;\n    }\n\n    // +4 accounts for 2 quotation marks, colon and comma after value\n    // Note that this potentially undercounts since it does not account for escape sequences which\n    // will have an additional backslash added to them once passed through JSON.stringify.\n    currentLength += key.length + 4;\n\n    if (value == null) return value;\n\n    switch (typeof value) {\n      case 'string':\n        // +2 accounts for quotes\n        // Note that this potentially undercounts similarly to the key length calculation\n        currentLength += value.length + 2;\n        break;\n      case 'number':\n      case 'bigint':\n        currentLength += String(value).length;\n        break;\n      case 'boolean':\n        currentLength += value ? 4 : 5;\n        break;\n      case 'object':\n        if (isUint8Array(value)) {\n          // '{\"$binary\":{\"base64\":\"<base64 string>\",\"subType\":\"XX\"}}'\n          // This is an estimate based on the fact that the base64 is approximately 1.33x the length of\n          // the actual binary sequence https://en.wikipedia.org/wiki/Base64\n          currentLength += (22 + value.byteLength + value.byteLength * 0.33 + 18) | 0;\n        } else if ('_bsontype' in value) {\n          const v = value as BSONObject;\n          switch (v._bsontype) {\n            case 'Int32':\n              currentLength += String(v.value).length;\n              break;\n            case 'Double':\n              // Account for representing integers as <value>.0\n              currentLength +=\n                (v.value | 0) === v.value ? String(v.value).length + 2 : String(v.value).length;\n              break;\n            case 'Long':\n              currentLength += v.toString().length;\n              break;\n            case 'ObjectId':\n              // '{\"$oid\":\"XXXXXXXXXXXXXXXXXXXXXXXX\"}'\n              currentLength += 35;\n              break;\n            case 'MaxKey':\n            case 'MinKey':\n              // '{\"$maxKey\":1}' or '{\"$minKey\":1}'\n              currentLength += 13;\n              break;\n            case 'Binary':\n              // '{\"$binary\":{\"base64\":\"<base64 string>\",\"subType\":\"XX\"}}'\n              // This is an estimate based on the fact that the base64 is approximately 1.33x the length of\n              // the actual binary sequence https://en.wikipedia.org/wiki/Base64\n              currentLength += (22 + value.position + value.position * 0.33 + 18) | 0;\n              break;\n            case 'Timestamp':\n              // '{\"$timestamp\":{\"t\":<t>,\"i\":<i>}}'\n              currentLength += 19 + String(v.t).length + 5 + String(v.i).length + 2;\n              break;\n            case 'Code':\n              // '{\"$code\":\"<code>\"}' or '{\"$code\":\"<code>\",\"$scope\":<scope>}'\n              if (v.scope == null) {\n                currentLength += v.code.length + 10 + 2;\n              } else {\n                // Ignoring actual scope object, so this undercounts by a significant amount\n                currentLength += v.code.length + 10 + 11;\n              }\n              break;\n            case 'BSONRegExp':\n              // '{\"$regularExpression\":{\"pattern\":\"<pattern>\",\"options\":\"<options>\"}}'\n              currentLength += 34 + v.pattern.length + 13 + v.options.length + 3;\n              break;\n          }\n        }\n    }\n    return value;\n  };\n\n  if (typeof value === 'string') {\n    strToTruncate = value;\n  } else if (typeof value === 'function') {\n    strToTruncate = value.name;\n  } else {\n    try {\n      if (maxDocumentLength !== 0) {\n        strToTruncate = EJSON.stringify(value, maxDocumentLengthEnsurer, 0, options);\n      } else {\n        strToTruncate = EJSON.stringify(value, options);\n      }\n    } catch (e) {\n      strToTruncate = `Extended JSON serialization failed with: ${e.message}`;\n    }\n  }\n\n  // handle truncation that occurs in the middle of multi-byte codepoints\n  if (\n    maxDocumentLength !== 0 &&\n    strToTruncate.length > maxDocumentLength &&\n    strToTruncate.charCodeAt(maxDocumentLength - 1) !==\n      strToTruncate.codePointAt(maxDocumentLength - 1)\n  ) {\n    maxDocumentLength--;\n    if (maxDocumentLength === 0) {\n      return '';\n    }\n  }\n\n  return maxDocumentLength !== 0 && strToTruncate.length > maxDocumentLength\n    ? `${strToTruncate.slice(0, maxDocumentLength)}...`\n    : strToTruncate;\n}\n\n/** @internal */\nexport type Loggable = LoggableEvent | LogConvertible;\n\nfunction isLogConvertible(obj: Loggable): obj is LogConvertible {\n  const objAsLogConvertible = obj as LogConvertible;\n  // eslint-disable-next-line no-restricted-syntax\n  return objAsLogConvertible.toLog !== undefined && typeof objAsLogConvertible.toLog === 'function';\n}\n\nfunction attachServerSelectionFields(\n  log: Record<string, any>,\n  serverSelectionEvent: ServerSelectionEvent,\n  maxDocumentLength: number = DEFAULT_MAX_DOCUMENT_LENGTH\n) {\n  const { selector, operation, topologyDescription, message } = serverSelectionEvent;\n  log.selector = stringifyWithMaxLen(selector, maxDocumentLength);\n  log.operation = operation;\n  log.topologyDescription = stringifyWithMaxLen(topologyDescription, maxDocumentLength);\n  log.message = message;\n\n  return log;\n}\n\nfunction attachCommandFields(\n  log: Record<string, any>,\n  commandEvent: CommandStartedEvent | LoggableCommandSucceededEvent | LoggableCommandFailedEvent\n) {\n  log.commandName = commandEvent.commandName;\n  log.requestId = commandEvent.requestId;\n  log.driverConnectionId = commandEvent.connectionId;\n  const { host, port } = HostAddress.fromString(commandEvent.address).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  if (commandEvent?.serviceId) {\n    log.serviceId = commandEvent.serviceId.toHexString();\n  }\n  log.databaseName = commandEvent.databaseName;\n  log.serverConnectionId = commandEvent.serverConnectionId;\n\n  return log;\n}\n\nfunction attachConnectionFields(log: Record<string, any>, event: any) {\n  const { host, port } = HostAddress.fromString(event.address).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n\n  return log;\n}\n\nfunction attachSDAMFields(log: Record<string, any>, sdamEvent: SDAMLoggableEvent) {\n  log.topologyId = sdamEvent.topologyId;\n  return log;\n}\n\nfunction attachServerHeartbeatFields(\n  log: Record<string, any>,\n  serverHeartbeatEvent:\n    | LoggableServerHeartbeatFailedEvent\n    | LoggableServerHeartbeatStartedEvent\n    | LoggableServerHeartbeatSucceededEvent\n) {\n  const { awaited, connectionId } = serverHeartbeatEvent;\n  log.awaited = awaited;\n  log.driverConnectionId = serverHeartbeatEvent.connectionId;\n  const { host, port } = HostAddress.fromString(connectionId).toHostPort();\n  log.serverHost = host;\n  log.serverPort = port;\n  return log;\n}\n\n/** @internal */\nexport function defaultLogTransform(\n  logObject: LoggableEvent | Record<string, any>,\n  maxDocumentLength: number = DEFAULT_MAX_DOCUMENT_LENGTH\n): Omit<Log, 's' | 't' | 'c'> {\n  let log: Omit<Log, 's' | 't' | 'c'> = Object.create(null);\n\n  switch (logObject.name) {\n    case SERVER_SELECTION_STARTED:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      return log;\n    case SERVER_SELECTION_FAILED:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      log.failure = logObject.failure?.message;\n      return log;\n    case SERVER_SELECTION_SUCCEEDED:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      log.serverHost = logObject.serverHost;\n      log.serverPort = logObject.serverPort;\n      return log;\n    case WAITING_FOR_SUITABLE_SERVER:\n      log = attachServerSelectionFields(log, logObject, maxDocumentLength);\n      log.remainingTimeMS = logObject.remainingTimeMS;\n      return log;\n    case COMMAND_STARTED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command started';\n      log.command = stringifyWithMaxLen(logObject.command, maxDocumentLength, { relaxed: true });\n      log.databaseName = logObject.databaseName;\n      return log;\n    case COMMAND_SUCCEEDED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command succeeded';\n      log.durationMS = logObject.duration;\n      log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, { relaxed: true });\n      return log;\n    case COMMAND_FAILED:\n      log = attachCommandFields(log, logObject);\n      log.message = 'Command failed';\n      log.durationMS = logObject.duration;\n      log.failure = logObject.failure?.message ?? '(redacted)';\n      return log;\n    case CONNECTION_POOL_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool created';\n      if (logObject.options) {\n        const { maxIdleTimeMS, minPoolSize, maxPoolSize, maxConnecting, waitQueueTimeoutMS } =\n          logObject.options;\n        log = {\n          ...log,\n          maxIdleTimeMS,\n          minPoolSize,\n          maxPoolSize,\n          maxConnecting,\n          waitQueueTimeoutMS\n        };\n      }\n      return log;\n    case CONNECTION_POOL_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool ready';\n      return log;\n    case CONNECTION_POOL_CLEARED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool cleared';\n      if (logObject.serviceId?._bsontype === 'ObjectId') {\n        log.serviceId = logObject.serviceId?.toHexString();\n      }\n      return log;\n    case CONNECTION_POOL_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection pool closed';\n      return log;\n    case CONNECTION_CREATED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection created';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case CONNECTION_READY:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection ready';\n      log.driverConnectionId = logObject.connectionId;\n      log.durationMS = logObject.durationMS;\n      return log;\n    case CONNECTION_CLOSED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection closed';\n      log.driverConnectionId = logObject.connectionId;\n      switch (logObject.reason) {\n        case 'stale':\n          log.reason = 'Connection became stale because the pool was cleared';\n          break;\n        case 'idle':\n          log.reason =\n            'Connection has been available but unused for longer than the configured max idle time';\n          break;\n        case 'error':\n          log.reason = 'An error occurred while using the connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        default:\n          log.reason = `Unknown close reason: ${logObject.reason}`;\n      }\n      return log;\n    case CONNECTION_CHECK_OUT_STARTED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout started';\n      return log;\n    case CONNECTION_CHECK_OUT_FAILED:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checkout failed';\n      switch (logObject.reason) {\n        case 'poolClosed':\n          log.reason = 'Connection pool was closed';\n          break;\n        case 'timeout':\n          log.reason = 'Wait queue timeout elapsed without a connection becoming available';\n          break;\n        case 'connectionError':\n          log.reason = 'An error occurred while trying to establish a new connection';\n          if (logObject.error) {\n            log.error = logObject.error;\n          }\n          break;\n        default:\n          log.reason = `Unknown close reason: ${logObject.reason}`;\n      }\n      log.durationMS = logObject.durationMS;\n      return log;\n    case CONNECTION_CHECKED_OUT:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked out';\n      log.driverConnectionId = logObject.connectionId;\n      log.durationMS = logObject.durationMS;\n      return log;\n    case CONNECTION_CHECKED_IN:\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Connection checked in';\n      log.driverConnectionId = logObject.connectionId;\n      return log;\n    case SERVER_OPENING:\n      log = attachSDAMFields(log, logObject);\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Starting server monitoring';\n      return log;\n    case SERVER_CLOSED:\n      log = attachSDAMFields(log, logObject);\n      log = attachConnectionFields(log, logObject);\n      log.message = 'Stopped server monitoring';\n      return log;\n    case SERVER_HEARTBEAT_STARTED:\n      log = attachSDAMFields(log, logObject);\n      log = attachServerHeartbeatFields(log, logObject);\n      log.message = 'Server heartbeat started';\n      return log;\n    case SERVER_HEARTBEAT_SUCCEEDED:\n      log = attachSDAMFields(log, logObject);\n      log = attachServerHeartbeatFields(log, logObject);\n      log.message = 'Server heartbeat succeeded';\n      log.durationMS = logObject.duration;\n      log.serverConnectionId = logObject.serverConnectionId;\n      log.reply = stringifyWithMaxLen(logObject.reply, maxDocumentLength, { relaxed: true });\n      return log;\n    case SERVER_HEARTBEAT_FAILED:\n      log = attachSDAMFields(log, logObject);\n      log = attachServerHeartbeatFields(log, logObject);\n      log.message = 'Server heartbeat failed';\n      log.durationMS = logObject.duration;\n      log.failure = logObject.failure?.message;\n      return log;\n    case TOPOLOGY_OPENING:\n      log = attachSDAMFields(log, logObject);\n      log.message = 'Starting topology monitoring';\n      return log;\n    case TOPOLOGY_CLOSED:\n      log = attachSDAMFields(log, logObject);\n      log.message = 'Stopped topology monitoring';\n      return log;\n    case TOPOLOGY_DESCRIPTION_CHANGED:\n      log = attachSDAMFields(log, logObject);\n      log.message = 'Topology description changed';\n      log.previousDescription = log.reply = stringifyWithMaxLen(\n        logObject.previousDescription,\n        maxDocumentLength\n      );\n      log.newDescription = log.reply = stringifyWithMaxLen(\n        logObject.newDescription,\n        maxDocumentLength\n      );\n      return log;\n    default:\n      for (const [key, value] of Object.entries(logObject)) {\n        if (value != null) log[key] = value;\n      }\n  }\n  return log;\n}\n\n/** @internal */\nexport class MongoLogger {\n  componentSeverities: Record<MongoLoggableComponent, SeverityLevel>;\n  maxDocumentLength: number;\n  logDestination: MongoDBLogWritable;\n  logDestinationIsStdErr: boolean;\n  pendingLog: PromiseLike<unknown> | unknown = null;\n  private severities: Record<MongoLoggableComponent, Record<SeverityLevel, boolean>>;\n\n  /**\n   * This method should be used when logging errors that do not have a public driver API for\n   * reporting errors.\n   */\n  error = this.log.bind(this, 'error');\n  /**\n   * This method should be used to log situations where undesirable application behaviour might\n   * occur. For example, failing to end sessions on `MongoClient.close`.\n   */\n  warn = this.log.bind(this, 'warn');\n  /**\n   * This method should be used to report high-level information about normal driver behaviour.\n   * For example, the creation of a `MongoClient`.\n   */\n  info = this.log.bind(this, 'info');\n  /**\n   * This method should be used to report information that would be helpful when debugging an\n   * application. For example, a command starting, succeeding or failing.\n   */\n  debug = this.log.bind(this, 'debug');\n  /**\n   * This method should be used to report fine-grained details related to logic flow. For example,\n   * entering and exiting a function body.\n   */\n  trace = this.log.bind(this, 'trace');\n\n  constructor(options: MongoLoggerOptions) {\n    this.componentSeverities = options.componentSeverities;\n    this.maxDocumentLength = options.maxDocumentLength;\n    this.logDestination = options.logDestination;\n    this.logDestinationIsStdErr = options.logDestinationIsStdErr;\n    this.severities = this.createLoggingSeverities();\n  }\n\n  createLoggingSeverities(): Record<MongoLoggableComponent, Record<SeverityLevel, boolean>> {\n    const severities = Object();\n    for (const component of Object.values(MongoLoggableComponent)) {\n      severities[component] = {};\n      for (const severityLevel of Object.values(SeverityLevel)) {\n        severities[component][severityLevel] =\n          compareSeverity(severityLevel, this.componentSeverities[component]) <= 0;\n      }\n    }\n    return severities;\n  }\n\n  turnOffSeverities() {\n    for (const component of Object.values(MongoLoggableComponent)) {\n      this.componentSeverities[component] = SeverityLevel.OFF;\n      for (const severityLevel of Object.values(SeverityLevel)) {\n        this.severities[component][severityLevel] = false;\n      }\n    }\n  }\n\n  private logWriteFailureHandler(error: Error) {\n    if (this.logDestinationIsStdErr) {\n      this.turnOffSeverities();\n      this.clearPendingLog();\n      return;\n    }\n    this.logDestination = createStdioLogger(process.stderr);\n    this.logDestinationIsStdErr = true;\n    this.clearPendingLog();\n    this.error(MongoLoggableComponent.CLIENT, {\n      toLog: function () {\n        return {\n          message: 'User input for mongodbLogPath is now invalid. Logging is halted.',\n          error: error.message\n        };\n      }\n    });\n    this.turnOffSeverities();\n    this.clearPendingLog();\n  }\n\n  private clearPendingLog() {\n    this.pendingLog = null;\n  }\n\n  willLog(component: MongoLoggableComponent, severity: SeverityLevel): boolean {\n    if (severity === SeverityLevel.OFF) return false;\n    return this.severities[component][severity];\n  }\n\n  private log(\n    severity: SeverityLevel,\n    component: MongoLoggableComponent,\n    message: Loggable | string\n  ): void {\n    if (!this.willLog(component, severity)) return;\n\n    let logMessage: Log = { t: new Date(), c: component, s: severity };\n    if (typeof message === 'string') {\n      logMessage.message = message;\n    } else if (typeof message === 'object') {\n      if (isLogConvertible(message)) {\n        logMessage = { ...logMessage, ...message.toLog() };\n      } else {\n        logMessage = { ...logMessage, ...defaultLogTransform(message, this.maxDocumentLength) };\n      }\n    }\n\n    if (isPromiseLike(this.pendingLog)) {\n      this.pendingLog = this.pendingLog\n\n        .then(() => this.logDestination.write(logMessage))\n\n        .then(this.clearPendingLog.bind(this), this.logWriteFailureHandler.bind(this));\n      return;\n    }\n\n    try {\n      const logResult = this.logDestination.write(logMessage);\n      if (isPromiseLike(logResult)) {\n        this.pendingLog = logResult.then(\n          this.clearPendingLog.bind(this),\n          this.logWriteFailureHandler.bind(this)\n        );\n      }\n    } catch (error) {\n      this.logWriteFailureHandler(error);\n    }\n  }\n\n  /**\n   * Merges options set through environment variables and the MongoClient, preferring environment\n   * variables when both are set, and substituting defaults for values not set. Options set in\n   * constructor take precedence over both environment variables and MongoClient options.\n   *\n   * @remarks\n   * When parsing component severity levels, invalid values are treated as unset and replaced with\n   * the default severity.\n   *\n   * @param envOptions - options set for the logger from the environment\n   * @param clientOptions - options set for the logger in the MongoClient options\n   * @returns a MongoLoggerOptions object to be used when instantiating a new MongoLogger\n   */\n  static resolveOptions(\n    envOptions: MongoLoggerEnvOptions,\n    clientOptions: MongoLoggerMongoClientOptions\n  ): MongoLoggerOptions {\n    // client options take precedence over env options\n    const resolvedLogPath = resolveLogPath(envOptions, clientOptions);\n    const combinedOptions = {\n      ...envOptions,\n      ...clientOptions,\n      mongodbLogPath: resolvedLogPath.mongodbLogPath,\n      mongodbLogPathIsStdErr: resolvedLogPath.mongodbLogPathIsStdErr\n    };\n    const defaultSeverity = resolveSeverityConfiguration(\n      combinedOptions.mongodbLogComponentSeverities?.default,\n      combinedOptions.MONGODB_LOG_ALL,\n      SeverityLevel.OFF\n    );\n\n    return {\n      componentSeverities: {\n        command: resolveSeverityConfiguration(\n          combinedOptions.mongodbLogComponentSeverities?.command,\n          combinedOptions.MONGODB_LOG_COMMAND,\n          defaultSeverity\n        ),\n        topology: resolveSeverityConfiguration(\n          combinedOptions.mongodbLogComponentSeverities?.topology,\n          combinedOptions.MONGODB_LOG_TOPOLOGY,\n          defaultSeverity\n        ),\n        serverSelection: resolveSeverityConfiguration(\n          combinedOptions.mongodbLogComponentSeverities?.serverSelection,\n          combinedOptions.MONGODB_LOG_SERVER_SELECTION,\n          defaultSeverity\n        ),\n        connection: resolveSeverityConfiguration(\n          combinedOptions.mongodbLogComponentSeverities?.connection,\n          combinedOptions.MONGODB_LOG_CONNECTION,\n          defaultSeverity\n        ),\n        client: resolveSeverityConfiguration(\n          combinedOptions.mongodbLogComponentSeverities?.client,\n          combinedOptions.MONGODB_LOG_CLIENT,\n          defaultSeverity\n        ),\n        default: defaultSeverity\n      },\n      maxDocumentLength:\n        combinedOptions.mongodbLogMaxDocumentLength ??\n        parseUnsignedInteger(combinedOptions.MONGODB_LOG_MAX_DOCUMENT_LENGTH) ??\n        1000,\n      logDestination: combinedOptions.mongodbLogPath,\n      logDestinationIsStdErr: combinedOptions.mongodbLogPathIsStdErr\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}