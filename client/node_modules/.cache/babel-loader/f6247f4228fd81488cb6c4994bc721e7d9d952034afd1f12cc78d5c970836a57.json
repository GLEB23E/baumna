{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/glebch/workprojects/baumna/client/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerCapabilities = exports.Topology = void 0;\nconst connection_string_1 = require(\"../connection_string\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_logger_1 = require(\"../mongo_logger\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst read_preference_1 = require(\"../read_preference\");\nconst timeout_1 = require(\"../timeout\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst events_1 = require(\"./events\");\nconst server_1 = require(\"./server\");\nconst server_description_1 = require(\"./server_description\");\nconst server_selection_1 = require(\"./server_selection\");\nconst server_selection_events_1 = require(\"./server_selection_events\");\nconst srv_polling_1 = require(\"./srv_polling\");\nconst topology_description_1 = require(\"./topology_description\");\n// Global state\nlet globalTopologyCounter = 0;\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nclass Topology extends mongo_types_1.TypedEventEmitter {\n  /**\n   * @param seedlist - a list of HostAddress instances to connect to\n   */\n  constructor(client, seeds, options) {\n    var _options;\n    super();\n    this.client = client;\n    // Options should only be undefined in tests, MongoClient will always have defined options\n    options = options !== null && options !== void 0 ? options : _objectSpread({\n      hosts: [utils_1.HostAddress.fromString('localhost:27017')]\n    }, Object.fromEntries(connection_string_1.DEFAULT_OPTIONS.entries()));\n    if (typeof seeds === 'string') {\n      seeds = [utils_1.HostAddress.fromString(seeds)];\n    } else if (!Array.isArray(seeds)) {\n      seeds = [seeds];\n    }\n    const seedlist = [];\n    for (const seed of seeds) {\n      if (typeof seed === 'string') {\n        seedlist.push(utils_1.HostAddress.fromString(seed));\n      } else if (seed instanceof utils_1.HostAddress) {\n        seedlist.push(seed);\n      } else {\n        // FIXME(NODE-3483): May need to be a MongoParseError\n        throw new error_1.MongoRuntimeError(\"Topology cannot be constructed from \".concat(JSON.stringify(seed)));\n      }\n    }\n    const topologyType = topologyTypeFromOptions(options);\n    const topologyId = globalTopologyCounter++;\n    const selectedHosts = options.srvMaxHosts == null || options.srvMaxHosts === 0 || options.srvMaxHosts >= seedlist.length ? seedlist : (0, utils_1.shuffle)(seedlist, options.srvMaxHosts);\n    const serverDescriptions = new Map();\n    for (const hostAddress of selectedHosts) {\n      serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n    }\n    this.waitQueue = new utils_1.List();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist,\n      // initial state\n      state: common_1.STATE_CLOSED,\n      // the topology description\n      description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      credentials: (_options = options) === null || _options === void 0 ? void 0 : _options.credentials,\n      clusterTime: undefined,\n      detectShardedTopology: ev => this.detectShardedTopology(ev),\n      detectSrvRecords: ev => this.detectSrvRecords(ev)\n    };\n    this.mongoLogger = client.mongoLogger;\n    this.component = 'topology';\n    if (options.srvHost && !options.loadBalanced) {\n      var _options$srvPoller;\n      this.s.srvPoller = (_options$srvPoller = options.srvPoller) !== null && _options$srvPoller !== void 0 ? _options$srvPoller : new srv_polling_1.SrvPoller({\n        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n        srvHost: options.srvHost,\n        srvMaxHosts: options.srvMaxHosts,\n        srvServiceName: options.srvServiceName\n      });\n      this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    }\n    this.connectionLock = undefined;\n  }\n  detectShardedTopology(event) {\n    var _this$s$srvPoller;\n    const previousType = event.previousDescription.type;\n    const newType = event.newDescription.type;\n    const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n    const srvListeners = (_this$s$srvPoller = this.s.srvPoller) === null || _this$s$srvPoller === void 0 ? void 0 : _this$s$srvPoller.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n    const listeningToSrvPolling = !!(srvListeners !== null && srvListeners !== void 0 && srvListeners.includes(this.s.detectSrvRecords));\n    if (transitionToSharded && !listeningToSrvPolling) {\n      var _this$s$srvPoller2, _this$s$srvPoller3;\n      (_this$s$srvPoller2 = this.s.srvPoller) === null || _this$s$srvPoller2 === void 0 || _this$s$srvPoller2.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      (_this$s$srvPoller3 = this.s.srvPoller) === null || _this$s$srvPoller3 === void 0 || _this$s$srvPoller3.start();\n    }\n  }\n  detectSrvRecords(ev) {\n    const previousTopologyDescription = this.s.description;\n    this.s.description = this.s.description.updateFromSrvPollingEvent(ev, this.s.options.srvMaxHosts);\n    if (this.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n    updateServers(this);\n    this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n  }\n  /**\n   * @returns A `TopologyDescription` for this topology\n   */\n  get description() {\n    return this.s.description;\n  }\n  get loadBalanced() {\n    return this.s.options.loadBalanced;\n  }\n  get serverApi() {\n    return this.s.options.serverApi;\n  }\n  get capabilities() {\n    return new ServerCapabilities(this.lastHello());\n  }\n  /** Initiate server connect */\n  async connect(options) {\n    var _this$connectionLock;\n    (_this$connectionLock = this.connectionLock) !== null && _this$connectionLock !== void 0 ? _this$connectionLock : this.connectionLock = this._connect(options);\n    try {\n      await this.connectionLock;\n      return this;\n    } finally {\n      this.connectionLock = undefined;\n    }\n  }\n  async _connect(options) {\n    var _options$readPreferen;\n    options = options !== null && options !== void 0 ? options : {};\n    if (this.s.state === common_1.STATE_CONNECTED) {\n      return this;\n    }\n    stateTransition(this, common_1.STATE_CONNECTING);\n    // emit SDAM monitoring events\n    this.emitAndLog(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id));\n    // emit an event for the topology change\n    this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown),\n    // initial is always Unknown\n    this.s.description));\n    // connect all known servers, then attempt server selection to connect\n    const serverDescriptions = Array.from(this.s.description.servers.values());\n    this.s.servers = new Map(serverDescriptions.map(serverDescription => [serverDescription.address, createAndConnectServer(this, serverDescription)]));\n    // In load balancer mode we need to fake a server description getting\n    // emitted from the monitor, since the monitor doesn't exist.\n    if (this.s.options.loadBalanced) {\n      for (const description of serverDescriptions) {\n        const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n          loadBalanced: this.s.options.loadBalanced\n        });\n        this.serverUpdateHandler(newDescription);\n      }\n    }\n    const serverSelectionTimeoutMS = this.client.s.options.serverSelectionTimeoutMS;\n    const readPreference = (_options$readPreferen = options.readPreference) !== null && _options$readPreferen !== void 0 ? _options$readPreferen : read_preference_1.ReadPreference.primary;\n    const timeoutContext = timeout_1.TimeoutContext.create({\n      // TODO(NODE-6448): auto-connect ignores timeoutMS; potential future feature\n      timeoutMS: undefined,\n      serverSelectionTimeoutMS,\n      waitQueueTimeoutMS: this.client.s.options.waitQueueTimeoutMS\n    });\n    const selectServerOptions = _objectSpread(_objectSpread({\n      operationName: 'ping'\n    }, options), {}, {\n      timeoutContext\n    });\n    try {\n      const server = await this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), selectServerOptions);\n      const skipPingOnConnect = this.s.options.__skipPingOnConnect === true;\n      if (!skipPingOnConnect && this.s.credentials) {\n        await server.command((0, utils_1.ns)('admin.$cmd'), {\n          ping: 1\n        }, {\n          timeoutContext\n        });\n        stateTransition(this, common_1.STATE_CONNECTED);\n        this.emit(Topology.OPEN, this);\n        this.emit(Topology.CONNECT, this);\n        return this;\n      }\n      stateTransition(this, common_1.STATE_CONNECTED);\n      this.emit(Topology.OPEN, this);\n      this.emit(Topology.CONNECT, this);\n      return this;\n    } catch (error) {\n      this.close();\n      throw error;\n    }\n  }\n  /** Close this topology */\n  close() {\n    if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n      return;\n    }\n    for (const server of this.s.servers.values()) {\n      destroyServer(server, this);\n    }\n    this.s.servers.clear();\n    stateTransition(this, common_1.STATE_CLOSING);\n    drainWaitQueue(this.waitQueue, new error_1.MongoTopologyClosedError());\n    if (this.s.srvPoller) {\n      this.s.srvPoller.stop();\n      this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n    }\n    this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    stateTransition(this, common_1.STATE_CLOSED);\n    // emit an event for close\n    this.emitAndLog(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n  }\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param options - Optional settings related to server selection\n   * @param callback - The callback used to indicate success or failure\n   * @returns An instance of a `Server` meeting the criteria of the predicate provided\n   */\n  async selectServer(selector, options) {\n    var _this$client$mongoLog;\n    let serverSelector;\n    if (typeof selector !== 'function') {\n      if (typeof selector === 'string') {\n        serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));\n      } else {\n        let readPreference;\n        if (selector instanceof read_preference_1.ReadPreference) {\n          readPreference = selector;\n        } else {\n          read_preference_1.ReadPreference.translate(options);\n          readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n        }\n        serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);\n      }\n    } else {\n      serverSelector = selector;\n    }\n    options = _objectSpread({\n      serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS\n    }, options);\n    if ((_this$client$mongoLog = this.client.mongoLogger) !== null && _this$client$mongoLog !== void 0 && _this$client$mongoLog.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n      var _this$client$mongoLog2;\n      (_this$client$mongoLog2 = this.client.mongoLogger) === null || _this$client$mongoLog2 === void 0 || _this$client$mongoLog2.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionStartedEvent(selector, this.description, options.operationName));\n    }\n    let timeout;\n    if (options.timeoutContext) timeout = options.timeoutContext.serverSelectionTimeout;else {\n      var _options$serverSelect;\n      timeout = timeout_1.Timeout.expires((_options$serverSelect = options.serverSelectionTimeoutMS) !== null && _options$serverSelect !== void 0 ? _options$serverSelect : 0);\n    }\n    const isSharded = this.description.type === common_1.TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n    if (isSharded && transaction && transaction.server) {\n      var _this$client$mongoLog3, _options$timeoutConte, _timeout;\n      if ((_this$client$mongoLog3 = this.client.mongoLogger) !== null && _this$client$mongoLog3 !== void 0 && _this$client$mongoLog3.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n        var _this$client$mongoLog4;\n        (_this$client$mongoLog4 = this.client.mongoLogger) === null || _this$client$mongoLog4 === void 0 || _this$client$mongoLog4.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionSucceededEvent(selector, this.description, transaction.server.pool.address, options.operationName));\n      }\n      if ((_options$timeoutConte = options.timeoutContext) !== null && _options$timeoutConte !== void 0 && _options$timeoutConte.clearServerSelectionTimeout) (_timeout = timeout) === null || _timeout === void 0 || _timeout.clear();\n      return transaction.server;\n    }\n    const {\n      promise: serverPromise,\n      resolve,\n      reject\n    } = (0, utils_1.promiseWithResolvers)();\n    const waitQueueMember = {\n      serverSelector,\n      topologyDescription: this.description,\n      mongoLogger: this.client.mongoLogger,\n      transaction,\n      resolve,\n      reject,\n      cancelled: false,\n      startTime: (0, utils_1.now)(),\n      operationName: options.operationName,\n      waitingLogged: false,\n      previousServer: options.previousServer\n    };\n    const abortListener = (0, utils_1.addAbortListener)(options.signal, function () {\n      waitQueueMember.cancelled = true;\n      reject(this.reason);\n    });\n    this.waitQueue.push(waitQueueMember);\n    processWaitQueue(this);\n    try {\n      var _timeout2, _options$timeoutConte2;\n      (_timeout2 = timeout) === null || _timeout2 === void 0 || _timeout2.throwIfExpired();\n      const server = await (timeout ? Promise.race([serverPromise, timeout]) : serverPromise);\n      if ((_options$timeoutConte2 = options.timeoutContext) !== null && _options$timeoutConte2 !== void 0 && _options$timeoutConte2.csotEnabled() && server.description.minRoundTripTime !== 0) {\n        options.timeoutContext.minRoundTripTime = server.description.minRoundTripTime;\n      }\n      return server;\n    } catch (error) {\n      if (timeout_1.TimeoutError.is(error)) {\n        var _timeout3, _this$client$mongoLog5, _options$timeoutConte3;\n        // Timeout\n        waitQueueMember.cancelled = true;\n        const timeoutError = new error_1.MongoServerSelectionError(\"Server selection timed out after \".concat((_timeout3 = timeout) === null || _timeout3 === void 0 ? void 0 : _timeout3.duration, \" ms\"), this.description);\n        if ((_this$client$mongoLog5 = this.client.mongoLogger) !== null && _this$client$mongoLog5 !== void 0 && _this$client$mongoLog5.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n          var _this$client$mongoLog6;\n          (_this$client$mongoLog6 = this.client.mongoLogger) === null || _this$client$mongoLog6 === void 0 || _this$client$mongoLog6.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(selector, this.description, timeoutError, options.operationName));\n        }\n        if ((_options$timeoutConte3 = options.timeoutContext) !== null && _options$timeoutConte3 !== void 0 && _options$timeoutConte3.csotEnabled()) {\n          throw new error_1.MongoOperationTimeoutError('Timed out during server selection', {\n            cause: timeoutError\n          });\n        }\n        throw timeoutError;\n      }\n      // Other server selection error\n      throw error;\n    } finally {\n      var _options$timeoutConte4, _timeout4;\n      abortListener === null || abortListener === void 0 || abortListener[utils_1.kDispose]();\n      if ((_options$timeoutConte4 = options.timeoutContext) !== null && _options$timeoutConte4 !== void 0 && _options$timeoutConte4.clearServerSelectionTimeout) (_timeout4 = timeout) === null || _timeout4 === void 0 || _timeout4.clear();\n    }\n  }\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param serverDescription - The server to update in the internal list of server descriptions\n   */\n  serverUpdateHandler(serverDescription) {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    }\n    // ignore this server update if its from an outdated topologyVersion\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    }\n    // these will be used for monitoring events later\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n    if (!previousServerDescription) {\n      return;\n    }\n    // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n    const clusterTime = serverDescription.$clusterTime;\n    if (clusterTime) {\n      (0, common_1._advanceClusterTime)(this, clusterTime);\n    }\n    // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n    const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription);\n    // first update the TopologyDescription\n    this.s.description = this.s.description.update(serverDescription);\n    if (this.s.description.compatibilityError) {\n      this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n      return;\n    }\n    // emit monitoring events for this change\n    if (!equalDescriptions) {\n      const newDescription = this.s.description.servers.get(serverDescription.address);\n      if (newDescription) {\n        this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n      }\n    }\n    // update server list from updated descriptions\n    updateServers(this, serverDescription);\n    // attempt to resolve any outstanding server selection attempts\n    if (this.waitQueue.length > 0) {\n      processWaitQueue(this);\n    }\n    if (!equalDescriptions) {\n      this.emitAndLog(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n  }\n  auth(credentials, callback) {\n    if (typeof credentials === 'function') callback = credentials, credentials = undefined;\n    if (typeof callback === 'function') callback(undefined, true);\n  }\n  get clientMetadata() {\n    return this.s.options.metadata;\n  }\n  isConnected() {\n    return this.s.state === common_1.STATE_CONNECTED;\n  }\n  isDestroyed() {\n    return this.s.state === common_1.STATE_CLOSED;\n  }\n  // NOTE: There are many places in code where we explicitly check the last hello\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first hello seen, which should suffice.\n  lastHello() {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(sd => sd.type !== common_1.ServerType.Unknown)[0];\n    const result = sd || {\n      maxWireVersion: this.description.commonWireVersion\n    };\n    return result;\n  }\n  get commonWireVersion() {\n    return this.description.commonWireVersion;\n  }\n  get logicalSessionTimeoutMinutes() {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n  get clusterTime() {\n    return this.s.clusterTime;\n  }\n  set clusterTime(clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n}\nexports.Topology = Topology;\n/** @event */\nTopology.SERVER_OPENING = constants_1.SERVER_OPENING;\n/** @event */\nTopology.SERVER_CLOSED = constants_1.SERVER_CLOSED;\n/** @event */\nTopology.SERVER_DESCRIPTION_CHANGED = constants_1.SERVER_DESCRIPTION_CHANGED;\n/** @event */\nTopology.TOPOLOGY_OPENING = constants_1.TOPOLOGY_OPENING;\n/** @event */\nTopology.TOPOLOGY_CLOSED = constants_1.TOPOLOGY_CLOSED;\n/** @event */\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = constants_1.TOPOLOGY_DESCRIPTION_CHANGED;\n/** @event */\nTopology.ERROR = constants_1.ERROR;\n/** @event */\nTopology.OPEN = constants_1.OPEN;\n/** @event */\nTopology.CONNECT = constants_1.CONNECT;\n/** @event */\nTopology.CLOSE = constants_1.CLOSE;\n/** @event */\nTopology.TIMEOUT = constants_1.TIMEOUT;\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(server, topology) {\n  for (const event of constants_1.LOCAL_SERVER_EVENTS) {\n    server.removeAllListeners(event);\n  }\n  server.destroy();\n  topology.emitAndLog(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n  for (const event of constants_1.SERVER_RELAY_EVENTS) {\n    server.removeAllListeners(event);\n  }\n}\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options) {\n  if (options !== null && options !== void 0 && options.directConnection) {\n    return common_1.TopologyType.Single;\n  }\n  if (options !== null && options !== void 0 && options.replicaSet) {\n    return common_1.TopologyType.ReplicaSetNoPrimary;\n  }\n  if (options !== null && options !== void 0 && options.loadBalanced) {\n    return common_1.TopologyType.LoadBalanced;\n  }\n  return common_1.TopologyType.Unknown;\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\nfunction createAndConnectServer(topology, serverDescription) {\n  topology.emitAndLog(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n  const server = new server_1.Server(topology, serverDescription, topology.s.options);\n  for (const event of constants_1.SERVER_RELAY_EVENTS) {\n    server.on(event, e => topology.emit(event, e));\n  }\n  server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n  server.connect();\n  return server;\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    if (server) {\n      server.s.description = incomingServerDescription;\n      if (incomingServerDescription.error instanceof error_1.MongoError && incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.ResetPool)) {\n        const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(error_1.MongoErrorLabel.InterruptInUseConnections);\n        server.pool.clear({\n          interruptInUseConnections\n        });\n      } else if (incomingServerDescription.error == null) {\n        const newTopologyType = topology.s.description.type;\n        const shouldMarkPoolReady = incomingServerDescription.isDataBearing || incomingServerDescription.type !== common_1.ServerType.Unknown && newTopologyType === common_1.TopologyType.Single;\n        if (shouldMarkPoolReady) {\n          server.pool.ready();\n        }\n      }\n    }\n  }\n  // add new servers for all descriptions we currently don't know about locally\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  }\n  // for all servers no longer known, remove their descriptions and destroy their instances\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n    if (!topology.s.servers.has(serverAddress)) {\n      continue;\n    }\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress);\n    // prepare server for garbage collection\n    if (server) {\n      destroyServer(server, topology);\n    }\n  }\n}\nfunction drainWaitQueue(queue, drainError) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n    if (!waitQueueMember.cancelled) {\n      var _waitQueueMember$mong;\n      if ((_waitQueueMember$mong = waitQueueMember.mongoLogger) !== null && _waitQueueMember$mong !== void 0 && _waitQueueMember$mong.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n        var _waitQueueMember$mong2;\n        (_waitQueueMember$mong2 = waitQueueMember.mongoLogger) === null || _waitQueueMember$mong2 === void 0 || _waitQueueMember$mong2.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, waitQueueMember.topologyDescription, drainError, waitQueueMember.operationName));\n      }\n      waitQueueMember.reject(drainError);\n    }\n  }\n}\nfunction processWaitQueue(topology) {\n  if (topology.s.state === common_1.STATE_CLOSED) {\n    drainWaitQueue(topology.waitQueue, new error_1.MongoTopologyClosedError());\n    return;\n  }\n  const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology.waitQueue.length;\n  for (let i = 0; i < membersToProcess; ++i) {\n    var _topology$client$mong7;\n    const waitQueueMember = topology.waitQueue.shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n    if (waitQueueMember.cancelled) {\n      continue;\n    }\n    let selectedDescriptions;\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      const previousServer = waitQueueMember.previousServer;\n      selectedDescriptions = serverSelector ? serverSelector(topology.description, serverDescriptions, previousServer ? [previousServer] : []) : serverDescriptions;\n    } catch (selectorError) {\n      var _topology$client$mong;\n      if ((_topology$client$mong = topology.client.mongoLogger) !== null && _topology$client$mong !== void 0 && _topology$client$mong.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n        var _topology$client$mong2;\n        (_topology$client$mong2 = topology.client.mongoLogger) === null || _topology$client$mong2 === void 0 || _topology$client$mong2.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, topology.description, selectorError, waitQueueMember.operationName));\n      }\n      waitQueueMember.reject(selectorError);\n      continue;\n    }\n    let selectedServer;\n    if (selectedDescriptions.length === 0) {\n      if (!waitQueueMember.waitingLogged) {\n        var _topology$client$mong3;\n        if ((_topology$client$mong3 = topology.client.mongoLogger) !== null && _topology$client$mong3 !== void 0 && _topology$client$mong3.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.INFORMATIONAL)) {\n          var _topology$client$mong4;\n          (_topology$client$mong4 = topology.client.mongoLogger) === null || _topology$client$mong4 === void 0 || _topology$client$mong4.info(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.WaitingForSuitableServerEvent(waitQueueMember.serverSelector, topology.description, topology.s.serverSelectionTimeoutMS !== 0 ? topology.s.serverSelectionTimeoutMS - ((0, utils_1.now)() - waitQueueMember.startTime) : -1, waitQueueMember.operationName));\n        }\n        waitQueueMember.waitingLogged = true;\n      }\n      topology.waitQueue.push(waitQueueMember);\n      continue;\n    } else if (selectedDescriptions.length === 1) {\n      selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n    } else {\n      const descriptions = (0, utils_1.shuffle)(selectedDescriptions, 2);\n      const server1 = topology.s.servers.get(descriptions[0].address);\n      const server2 = topology.s.servers.get(descriptions[1].address);\n      selectedServer = server1 && server2 && server1.s.operationCount < server2.s.operationCount ? server1 : server2;\n    }\n    if (!selectedServer) {\n      var _topology$client$mong5;\n      const serverSelectionError = new error_1.MongoServerSelectionError('server selection returned a server description but the server was not found in the topology', topology.description);\n      if ((_topology$client$mong5 = topology.client.mongoLogger) !== null && _topology$client$mong5 !== void 0 && _topology$client$mong5.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n        var _topology$client$mong6;\n        (_topology$client$mong6 = topology.client.mongoLogger) === null || _topology$client$mong6 === void 0 || _topology$client$mong6.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionFailedEvent(waitQueueMember.serverSelector, topology.description, serverSelectionError, waitQueueMember.operationName));\n      }\n      waitQueueMember.reject(serverSelectionError);\n      return;\n    }\n    const transaction = waitQueueMember.transaction;\n    if (isSharded && transaction && transaction.isActive && selectedServer) {\n      transaction.pinServer(selectedServer);\n    }\n    if ((_topology$client$mong7 = topology.client.mongoLogger) !== null && _topology$client$mong7 !== void 0 && _topology$client$mong7.willLog(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, mongo_logger_1.SeverityLevel.DEBUG)) {\n      var _topology$client$mong8;\n      (_topology$client$mong8 = topology.client.mongoLogger) === null || _topology$client$mong8 === void 0 || _topology$client$mong8.debug(mongo_logger_1.MongoLoggableComponent.SERVER_SELECTION, new server_selection_events_1.ServerSelectionSucceededEvent(waitQueueMember.serverSelector, waitQueueMember.topologyDescription, selectedServer.pool.address, waitQueueMember.operationName));\n    }\n    waitQueueMember.resolve(selectedServer);\n  }\n  if (topology.waitQueue.length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    for (const [, server] of topology.s.servers) {\n      process.nextTick(function scheduleServerCheck() {\n        return server.requestCheck();\n      });\n    }\n  }\n}\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n  const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n  const currentTopologyVersion = currentServerDescription === null || currentServerDescription === void 0 ? void 0 : currentServerDescription.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0;\n}\n/** @public */\nclass ServerCapabilities {\n  constructor(hello) {\n    this.minWireVersion = hello.minWireVersion || 0;\n    this.maxWireVersion = hello.maxWireVersion || 0;\n  }\n  get hasAggregationCursor() {\n    return this.maxWireVersion >= 1;\n  }\n  get hasWriteCommands() {\n    return this.maxWireVersion >= 2;\n  }\n  get hasTextSearch() {\n    return this.minWireVersion >= 0;\n  }\n  get hasAuthCommands() {\n    return this.maxWireVersion >= 1;\n  }\n  get hasListCollectionsCommand() {\n    return this.maxWireVersion >= 3;\n  }\n  get hasListIndexesCommand() {\n    return this.maxWireVersion >= 3;\n  }\n  get supportsSnapshotReads() {\n    return this.maxWireVersion >= 13;\n  }\n  get commandsTakeWriteConcern() {\n    return this.maxWireVersion >= 5;\n  }\n  get commandsTakeCollation() {\n    return this.maxWireVersion >= 5;\n  }\n}\nexports.ServerCapabilities = ServerCapabilities;","map":{"version":3,"names":["connection_string_1","require","constants_1","error_1","mongo_logger_1","mongo_types_1","read_preference_1","timeout_1","utils_1","common_1","events_1","server_1","server_description_1","server_selection_1","server_selection_events_1","srv_polling_1","topology_description_1","globalTopologyCounter","stateTransition","makeStateMachine","STATE_CLOSED","STATE_CONNECTING","STATE_CLOSING","STATE_CONNECTED","Topology","TypedEventEmitter","constructor","client","seeds","options","_options","_objectSpread","hosts","HostAddress","fromString","Object","fromEntries","DEFAULT_OPTIONS","entries","Array","isArray","seedlist","seed","push","MongoRuntimeError","concat","JSON","stringify","topologyType","topologyTypeFromOptions","topologyId","selectedHosts","srvMaxHosts","length","shuffle","serverDescriptions","Map","hostAddress","set","toString","ServerDescription","waitQueue","List","s","id","state","description","TopologyDescription","replicaSet","undefined","serverSelectionTimeoutMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","servers","credentials","clusterTime","detectShardedTopology","ev","detectSrvRecords","mongoLogger","component","srvHost","loadBalanced","_options$srvPoller","srvPoller","SrvPoller","srvServiceName","on","TOPOLOGY_DESCRIPTION_CHANGED","connectionLock","event","_this$s$srvPoller","previousType","previousDescription","type","newType","newDescription","transitionToSharded","TopologyType","Sharded","srvListeners","listeners","SRV_RECORD_DISCOVERY","listeningToSrvPolling","includes","_this$s$srvPoller2","_this$s$srvPoller3","start","previousTopologyDescription","updateFromSrvPollingEvent","updateServers","emitAndLog","TopologyDescriptionChangedEvent","serverApi","capabilities","ServerCapabilities","lastHello","connect","_this$connectionLock","_connect","_options$readPreferen","TOPOLOGY_OPENING","TopologyOpeningEvent","Unknown","from","values","map","serverDescription","address","createAndConnectServer","serverUpdateHandler","readPreference","ReadPreference","primary","timeoutContext","TimeoutContext","create","timeoutMS","waitQueueTimeoutMS","selectServerOptions","operationName","server","selectServer","readPreferenceServerSelector","skipPingOnConnect","__skipPingOnConnect","command","ns","ping","emit","OPEN","CONNECT","error","close","destroyServer","clear","drainWaitQueue","MongoTopologyClosedError","stop","removeListener","TOPOLOGY_CLOSED","TopologyClosedEvent","selector","_this$client$mongoLog","serverSelector","translate","willLog","MongoLoggableComponent","SERVER_SELECTION","SeverityLevel","DEBUG","_this$client$mongoLog2","debug","ServerSelectionStartedEvent","timeout","serverSelectionTimeout","_options$serverSelect","Timeout","expires","isSharded","session","transaction","_this$client$mongoLog3","_options$timeoutConte","_timeout","_this$client$mongoLog4","ServerSelectionSucceededEvent","pool","clearServerSelectionTimeout","promise","serverPromise","resolve","reject","promiseWithResolvers","waitQueueMember","topologyDescription","cancelled","startTime","now","waitingLogged","previousServer","abortListener","addAbortListener","signal","reason","processWaitQueue","_timeout2","_options$timeoutConte2","throwIfExpired","Promise","race","csotEnabled","minRoundTripTime","TimeoutError","is","_timeout3","_this$client$mongoLog5","_options$timeoutConte3","timeoutError","MongoServerSelectionError","duration","_this$client$mongoLog6","ServerSelectionFailedEvent","MongoOperationTimeoutError","cause","_options$timeoutConte4","_timeout4","kDispose","hasServer","isStaleServerDescription","previousServerDescription","get","$clusterTime","_advanceClusterTime","equalDescriptions","equals","update","compatibilityError","ERROR","MongoCompatibilityError","SERVER_DESCRIPTION_CHANGED","ServerDescriptionChangedEvent","auth","callback","clientMetadata","metadata","isConnected","isDestroyed","sd","filter","ServerType","result","maxWireVersion","commonWireVersion","logicalSessionTimeoutMinutes","exports","SERVER_OPENING","SERVER_CLOSED","CLOSE","TIMEOUT","topology","LOCAL_SERVER_EVENTS","removeAllListeners","destroy","ServerClosedEvent","SERVER_RELAY_EVENTS","directConnection","Single","ReplicaSetNoPrimary","LoadBalanced","ServerOpeningEvent","Server","e","DESCRIPTION_RECEIVED","incomingServerDescription","has","MongoError","hasErrorLabel","MongoErrorLabel","ResetPool","interruptInUseConnections","InterruptInUseConnections","newTopologyType","shouldMarkPoolReady","isDataBearing","ready","entry","serverAddress","delete","queue","drainError","shift","_waitQueueMember$mong","_waitQueueMember$mong2","membersToProcess","i","_topology$client$mong7","selectedDescriptions","selectorError","_topology$client$mong","_topology$client$mong2","selectedServer","_topology$client$mong3","INFORMATIONAL","_topology$client$mong4","info","WaitingForSuitableServerEvent","descriptions","server1","server2","operationCount","_topology$client$mong5","serverSelectionError","_topology$client$mong6","isActive","pinServer","_topology$client$mong8","process","nextTick","scheduleServerCheck","requestCheck","currentServerDescription","currentTopologyVersion","topologyVersion","compareTopologyVersion","hello","minWireVersion","hasAggregationCursor","hasWriteCommands","hasTextSearch","hasAuthCommands","hasListCollectionsCommand","hasListIndexesCommand","supportsSnapshotReads","commandsTakeWriteConcern","commandsTakeCollation"],"sources":["/Users/glebch/workprojects/baumna/client/node_modules/mongodb/src/sdam/topology.ts"],"sourcesContent":["import type { BSONSerializeOptions, Document } from '../bson';\nimport type { MongoCredentials } from '../cmap/auth/mongo_credentials';\nimport type { ConnectionEvents } from '../cmap/connection';\nimport type { ConnectionPoolEvents } from '../cmap/connection_pool';\nimport type { ClientMetadata } from '../cmap/handshake/client_metadata';\nimport { DEFAULT_OPTIONS } from '../connection_string';\nimport {\n  CLOSE,\n  CONNECT,\n  ERROR,\n  LOCAL_SERVER_EVENTS,\n  OPEN,\n  SERVER_CLOSED,\n  SERVER_DESCRIPTION_CHANGED,\n  SERVER_OPENING,\n  SERVER_RELAY_EVENTS,\n  TIMEOUT,\n  TOPOLOGY_CLOSED,\n  TOPOLOGY_DESCRIPTION_CHANGED,\n  TOPOLOGY_OPENING\n} from '../constants';\nimport {\n  MongoCompatibilityError,\n  type MongoDriverError,\n  MongoError,\n  MongoErrorLabel,\n  MongoOperationTimeoutError,\n  MongoRuntimeError,\n  MongoServerSelectionError,\n  MongoTopologyClosedError\n} from '../error';\nimport type { MongoClient, ServerApi } from '../mongo_client';\nimport { MongoLoggableComponent, type MongoLogger, SeverityLevel } from '../mongo_logger';\nimport { type Abortable, TypedEventEmitter } from '../mongo_types';\nimport { ReadPreference, type ReadPreferenceLike } from '../read_preference';\nimport type { ClientSession } from '../sessions';\nimport { Timeout, TimeoutContext, TimeoutError } from '../timeout';\nimport type { Transaction } from '../transactions';\nimport {\n  addAbortListener,\n  type Callback,\n  type EventEmitterWithState,\n  HostAddress,\n  kDispose,\n  List,\n  makeStateMachine,\n  now,\n  ns,\n  promiseWithResolvers,\n  shuffle\n} from '../utils';\nimport {\n  _advanceClusterTime,\n  type ClusterTime,\n  ServerType,\n  STATE_CLOSED,\n  STATE_CLOSING,\n  STATE_CONNECTED,\n  STATE_CONNECTING,\n  TopologyType\n} from './common';\nimport {\n  ServerClosedEvent,\n  ServerDescriptionChangedEvent,\n  ServerOpeningEvent,\n  TopologyClosedEvent,\n  TopologyDescriptionChangedEvent,\n  TopologyOpeningEvent\n} from './events';\nimport type { ServerMonitoringMode } from './monitor';\nimport { Server, type ServerEvents, type ServerOptions } from './server';\nimport { compareTopologyVersion, ServerDescription } from './server_description';\nimport { readPreferenceServerSelector, type ServerSelector } from './server_selection';\nimport {\n  ServerSelectionFailedEvent,\n  ServerSelectionStartedEvent,\n  ServerSelectionSucceededEvent,\n  WaitingForSuitableServerEvent\n} from './server_selection_events';\nimport { SrvPoller, type SrvPollingEvent } from './srv_polling';\nimport { TopologyDescription } from './topology_description';\n\n// Global state\nlet globalTopologyCounter = 0;\n\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\n\n/** @internal */\nexport type ServerSelectionCallback = Callback<Server>;\n\n/** @internal */\nexport interface ServerSelectionRequest {\n  serverSelector: ServerSelector;\n  topologyDescription: TopologyDescription;\n  mongoLogger: MongoLogger | undefined;\n  transaction?: Transaction;\n  startTime: number;\n  resolve: (server: Server) => void;\n  reject: (error: MongoError) => void;\n  cancelled: boolean;\n  operationName: string;\n  waitingLogged: boolean;\n  previousServer?: ServerDescription;\n}\n\n/** @internal */\nexport interface TopologyPrivate {\n  /** the id of this topology */\n  id: number;\n  /** passed in options */\n  options: TopologyOptions;\n  /** initial seedlist of servers to connect to */\n  seedlist: HostAddress[];\n  /** initial state */\n  state: string;\n  /** the topology description */\n  description: TopologyDescription;\n  serverSelectionTimeoutMS: number;\n  heartbeatFrequencyMS: number;\n  minHeartbeatFrequencyMS: number;\n  /** A map of server instances to normalized addresses */\n  servers: Map<string, Server>;\n  credentials?: MongoCredentials;\n  clusterTime?: ClusterTime;\n\n  /** related to srv polling */\n  srvPoller?: SrvPoller;\n  detectShardedTopology: (event: TopologyDescriptionChangedEvent) => void;\n  detectSrvRecords: (event: SrvPollingEvent) => void;\n}\n\n/** @internal */\nexport interface TopologyOptions extends BSONSerializeOptions, ServerOptions {\n  srvMaxHosts: number;\n  srvServiceName: string;\n  hosts: HostAddress[];\n  retryWrites: boolean;\n  retryReads: boolean;\n  /** How long to block for server selection before throwing an error */\n  serverSelectionTimeoutMS: number;\n  /** The name of the replica set to connect to */\n  replicaSet?: string;\n  srvHost?: string;\n  srvPoller?: SrvPoller;\n  /** Indicates that a client should directly connect to a node without attempting to discover its topology type */\n  directConnection: boolean;\n  loadBalanced: boolean;\n  metadata: ClientMetadata;\n  extendedMetadata: Promise<Document>;\n  serverMonitoringMode: ServerMonitoringMode;\n  /** MongoDB server API version */\n  serverApi?: ServerApi;\n  __skipPingOnConnect?: boolean;\n}\n\n/** @public */\nexport interface ConnectOptions {\n  readPreference?: ReadPreference;\n}\n\n/** @public */\nexport interface SelectServerOptions {\n  readPreference?: ReadPreferenceLike;\n  /** How long to block for server selection before throwing an error */\n  serverSelectionTimeoutMS?: number;\n  session?: ClientSession;\n  operationName: string;\n  previousServer?: ServerDescription;\n  /**\n   * @internal\n   * TODO(NODE-6496): Make this required by making ChangeStream use LegacyTimeoutContext\n   * */\n  timeoutContext?: TimeoutContext;\n}\n\n/** @public */\nexport type TopologyEvents = {\n  /** Top level MongoClient doesn't emit this so it is marked: @internal */\n  connect(topology: Topology): void;\n  serverOpening(event: ServerOpeningEvent): void;\n  serverClosed(event: ServerClosedEvent): void;\n  serverDescriptionChanged(event: ServerDescriptionChangedEvent): void;\n  topologyClosed(event: TopologyClosedEvent): void;\n  topologyOpening(event: TopologyOpeningEvent): void;\n  topologyDescriptionChanged(event: TopologyDescriptionChangedEvent): void;\n  error(error: Error): void;\n  /** @internal */\n  open(topology: Topology): void;\n  close(): void;\n  timeout(): void;\n} & Omit<ServerEvents, 'connect'> &\n  ConnectionPoolEvents &\n  ConnectionEvents &\n  EventEmitterWithState;\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nexport class Topology extends TypedEventEmitter<TopologyEvents> {\n  /** @internal */\n  s: TopologyPrivate;\n  /** @internal */\n  waitQueue: List<ServerSelectionRequest>;\n  /** @internal */\n  hello?: Document;\n  /** @internal */\n  _type?: string;\n\n  client!: MongoClient;\n\n  /** @internal */\n  private connectionLock?: Promise<Topology>;\n\n  /** @event */\n  static readonly SERVER_OPENING = SERVER_OPENING;\n  /** @event */\n  static readonly SERVER_CLOSED = SERVER_CLOSED;\n  /** @event */\n  static readonly SERVER_DESCRIPTION_CHANGED = SERVER_DESCRIPTION_CHANGED;\n  /** @event */\n  static readonly TOPOLOGY_OPENING = TOPOLOGY_OPENING;\n  /** @event */\n  static readonly TOPOLOGY_CLOSED = TOPOLOGY_CLOSED;\n  /** @event */\n  static readonly TOPOLOGY_DESCRIPTION_CHANGED = TOPOLOGY_DESCRIPTION_CHANGED;\n  /** @event */\n  static readonly ERROR = ERROR;\n  /** @event */\n  static readonly OPEN = OPEN;\n  /** @event */\n  static readonly CONNECT = CONNECT;\n  /** @event */\n  static readonly CLOSE = CLOSE;\n  /** @event */\n  static readonly TIMEOUT = TIMEOUT;\n\n  /**\n   * @param seedlist - a list of HostAddress instances to connect to\n   */\n  constructor(\n    client: MongoClient,\n    seeds: string | string[] | HostAddress | HostAddress[],\n    options: TopologyOptions\n  ) {\n    super();\n\n    this.client = client;\n    // Options should only be undefined in tests, MongoClient will always have defined options\n    options = options ?? {\n      hosts: [HostAddress.fromString('localhost:27017')],\n      ...Object.fromEntries(DEFAULT_OPTIONS.entries())\n    };\n\n    if (typeof seeds === 'string') {\n      seeds = [HostAddress.fromString(seeds)];\n    } else if (!Array.isArray(seeds)) {\n      seeds = [seeds];\n    }\n\n    const seedlist: HostAddress[] = [];\n    for (const seed of seeds) {\n      if (typeof seed === 'string') {\n        seedlist.push(HostAddress.fromString(seed));\n      } else if (seed instanceof HostAddress) {\n        seedlist.push(seed);\n      } else {\n        // FIXME(NODE-3483): May need to be a MongoParseError\n        throw new MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n      }\n    }\n\n    const topologyType = topologyTypeFromOptions(options);\n    const topologyId = globalTopologyCounter++;\n\n    const selectedHosts =\n      options.srvMaxHosts == null ||\n      options.srvMaxHosts === 0 ||\n      options.srvMaxHosts >= seedlist.length\n        ? seedlist\n        : shuffle(seedlist, options.srvMaxHosts);\n\n    const serverDescriptions = new Map();\n    for (const hostAddress of selectedHosts) {\n      serverDescriptions.set(hostAddress.toString(), new ServerDescription(hostAddress));\n    }\n\n    this.waitQueue = new List();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist,\n      // initial state\n      state: STATE_CLOSED,\n      // the topology description\n      description: new TopologyDescription(\n        topologyType,\n        serverDescriptions,\n        options.replicaSet,\n        undefined,\n        undefined,\n        undefined,\n        options\n      ),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      credentials: options?.credentials,\n      clusterTime: undefined,\n\n      detectShardedTopology: ev => this.detectShardedTopology(ev),\n      detectSrvRecords: ev => this.detectSrvRecords(ev)\n    };\n\n    this.mongoLogger = client.mongoLogger;\n    this.component = 'topology';\n\n    if (options.srvHost && !options.loadBalanced) {\n      this.s.srvPoller =\n        options.srvPoller ??\n        new SrvPoller({\n          heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n          srvHost: options.srvHost,\n          srvMaxHosts: options.srvMaxHosts,\n          srvServiceName: options.srvServiceName\n        });\n\n      this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    }\n    this.connectionLock = undefined;\n  }\n\n  private detectShardedTopology(event: TopologyDescriptionChangedEvent) {\n    const previousType = event.previousDescription.type;\n    const newType = event.newDescription.type;\n\n    const transitionToSharded =\n      previousType !== TopologyType.Sharded && newType === TopologyType.Sharded;\n    const srvListeners = this.s.srvPoller?.listeners(SrvPoller.SRV_RECORD_DISCOVERY);\n    const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\n\n    if (transitionToSharded && !listeningToSrvPolling) {\n      this.s.srvPoller?.on(SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      this.s.srvPoller?.start();\n    }\n  }\n\n  private detectSrvRecords(ev: SrvPollingEvent) {\n    const previousTopologyDescription = this.s.description;\n    this.s.description = this.s.description.updateFromSrvPollingEvent(\n      ev,\n      this.s.options.srvMaxHosts\n    );\n    if (this.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(this);\n\n    this.emitAndLog(\n      Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n      new TopologyDescriptionChangedEvent(\n        this.s.id,\n        previousTopologyDescription,\n        this.s.description\n      )\n    );\n  }\n\n  /**\n   * @returns A `TopologyDescription` for this topology\n   */\n  get description(): TopologyDescription {\n    return this.s.description;\n  }\n\n  get loadBalanced(): boolean {\n    return this.s.options.loadBalanced;\n  }\n\n  get serverApi(): ServerApi | undefined {\n    return this.s.options.serverApi;\n  }\n\n  get capabilities(): ServerCapabilities {\n    return new ServerCapabilities(this.lastHello());\n  }\n\n  /** Initiate server connect */\n  async connect(options?: ConnectOptions): Promise<Topology> {\n    this.connectionLock ??= this._connect(options);\n    try {\n      await this.connectionLock;\n      return this;\n    } finally {\n      this.connectionLock = undefined;\n    }\n  }\n\n  private async _connect(options?: ConnectOptions): Promise<Topology> {\n    options = options ?? {};\n    if (this.s.state === STATE_CONNECTED) {\n      return this;\n    }\n\n    stateTransition(this, STATE_CONNECTING);\n\n    // emit SDAM monitoring events\n    this.emitAndLog(Topology.TOPOLOGY_OPENING, new TopologyOpeningEvent(this.s.id));\n\n    // emit an event for the topology change\n    this.emitAndLog(\n      Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n      new TopologyDescriptionChangedEvent(\n        this.s.id,\n        new TopologyDescription(TopologyType.Unknown), // initial is always Unknown\n        this.s.description\n      )\n    );\n\n    // connect all known servers, then attempt server selection to connect\n    const serverDescriptions = Array.from(this.s.description.servers.values());\n    this.s.servers = new Map(\n      serverDescriptions.map(serverDescription => [\n        serverDescription.address,\n        createAndConnectServer(this, serverDescription)\n      ])\n    );\n\n    // In load balancer mode we need to fake a server description getting\n    // emitted from the monitor, since the monitor doesn't exist.\n    if (this.s.options.loadBalanced) {\n      for (const description of serverDescriptions) {\n        const newDescription = new ServerDescription(description.hostAddress, undefined, {\n          loadBalanced: this.s.options.loadBalanced\n        });\n        this.serverUpdateHandler(newDescription);\n      }\n    }\n\n    const serverSelectionTimeoutMS = this.client.s.options.serverSelectionTimeoutMS;\n    const readPreference = options.readPreference ?? ReadPreference.primary;\n    const timeoutContext = TimeoutContext.create({\n      // TODO(NODE-6448): auto-connect ignores timeoutMS; potential future feature\n      timeoutMS: undefined,\n      serverSelectionTimeoutMS,\n      waitQueueTimeoutMS: this.client.s.options.waitQueueTimeoutMS\n    });\n    const selectServerOptions = {\n      operationName: 'ping',\n      ...options,\n      timeoutContext\n    };\n\n    try {\n      const server = await this.selectServer(\n        readPreferenceServerSelector(readPreference),\n        selectServerOptions\n      );\n      const skipPingOnConnect = this.s.options.__skipPingOnConnect === true;\n      if (!skipPingOnConnect && this.s.credentials) {\n        await server.command(ns('admin.$cmd'), { ping: 1 }, { timeoutContext });\n        stateTransition(this, STATE_CONNECTED);\n        this.emit(Topology.OPEN, this);\n        this.emit(Topology.CONNECT, this);\n\n        return this;\n      }\n\n      stateTransition(this, STATE_CONNECTED);\n      this.emit(Topology.OPEN, this);\n      this.emit(Topology.CONNECT, this);\n\n      return this;\n    } catch (error) {\n      this.close();\n      throw error;\n    }\n  }\n\n  /** Close this topology */\n  close(): void {\n    if (this.s.state === STATE_CLOSED || this.s.state === STATE_CLOSING) {\n      return;\n    }\n\n    for (const server of this.s.servers.values()) {\n      destroyServer(server, this);\n    }\n\n    this.s.servers.clear();\n\n    stateTransition(this, STATE_CLOSING);\n\n    drainWaitQueue(this.waitQueue, new MongoTopologyClosedError());\n\n    if (this.s.srvPoller) {\n      this.s.srvPoller.stop();\n      this.s.srvPoller.removeListener(SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n    }\n\n    this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n\n    stateTransition(this, STATE_CLOSED);\n\n    // emit an event for close\n    this.emitAndLog(Topology.TOPOLOGY_CLOSED, new TopologyClosedEvent(this.s.id));\n  }\n\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param options - Optional settings related to server selection\n   * @param callback - The callback used to indicate success or failure\n   * @returns An instance of a `Server` meeting the criteria of the predicate provided\n   */\n  async selectServer(\n    selector: string | ReadPreference | ServerSelector,\n    options: SelectServerOptions & Abortable\n  ): Promise<Server> {\n    let serverSelector;\n    if (typeof selector !== 'function') {\n      if (typeof selector === 'string') {\n        serverSelector = readPreferenceServerSelector(ReadPreference.fromString(selector));\n      } else {\n        let readPreference;\n        if (selector instanceof ReadPreference) {\n          readPreference = selector;\n        } else {\n          ReadPreference.translate(options);\n          readPreference = options.readPreference || ReadPreference.primary;\n        }\n\n        serverSelector = readPreferenceServerSelector(readPreference as ReadPreference);\n      }\n    } else {\n      serverSelector = selector;\n    }\n\n    options = { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS, ...options };\n    if (\n      this.client.mongoLogger?.willLog(MongoLoggableComponent.SERVER_SELECTION, SeverityLevel.DEBUG)\n    ) {\n      this.client.mongoLogger?.debug(\n        MongoLoggableComponent.SERVER_SELECTION,\n        new ServerSelectionStartedEvent(selector, this.description, options.operationName)\n      );\n    }\n    let timeout;\n    if (options.timeoutContext) timeout = options.timeoutContext.serverSelectionTimeout;\n    else {\n      timeout = Timeout.expires(options.serverSelectionTimeoutMS ?? 0);\n    }\n\n    const isSharded = this.description.type === TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n\n    if (isSharded && transaction && transaction.server) {\n      if (\n        this.client.mongoLogger?.willLog(\n          MongoLoggableComponent.SERVER_SELECTION,\n          SeverityLevel.DEBUG\n        )\n      ) {\n        this.client.mongoLogger?.debug(\n          MongoLoggableComponent.SERVER_SELECTION,\n          new ServerSelectionSucceededEvent(\n            selector,\n            this.description,\n            transaction.server.pool.address,\n            options.operationName\n          )\n        );\n      }\n      if (options.timeoutContext?.clearServerSelectionTimeout) timeout?.clear();\n      return transaction.server;\n    }\n\n    const { promise: serverPromise, resolve, reject } = promiseWithResolvers<Server>();\n\n    const waitQueueMember: ServerSelectionRequest = {\n      serverSelector,\n      topologyDescription: this.description,\n      mongoLogger: this.client.mongoLogger,\n      transaction,\n      resolve,\n      reject,\n      cancelled: false,\n      startTime: now(),\n      operationName: options.operationName,\n      waitingLogged: false,\n      previousServer: options.previousServer\n    };\n\n    const abortListener = addAbortListener(options.signal, function () {\n      waitQueueMember.cancelled = true;\n      reject(this.reason);\n    });\n\n    this.waitQueue.push(waitQueueMember);\n    processWaitQueue(this);\n\n    try {\n      timeout?.throwIfExpired();\n      const server = await (timeout ? Promise.race([serverPromise, timeout]) : serverPromise);\n      if (options.timeoutContext?.csotEnabled() && server.description.minRoundTripTime !== 0) {\n        options.timeoutContext.minRoundTripTime = server.description.minRoundTripTime;\n      }\n      return server;\n    } catch (error) {\n      if (TimeoutError.is(error)) {\n        // Timeout\n        waitQueueMember.cancelled = true;\n        const timeoutError = new MongoServerSelectionError(\n          `Server selection timed out after ${timeout?.duration} ms`,\n          this.description\n        );\n        if (\n          this.client.mongoLogger?.willLog(\n            MongoLoggableComponent.SERVER_SELECTION,\n            SeverityLevel.DEBUG\n          )\n        ) {\n          this.client.mongoLogger?.debug(\n            MongoLoggableComponent.SERVER_SELECTION,\n            new ServerSelectionFailedEvent(\n              selector,\n              this.description,\n              timeoutError,\n              options.operationName\n            )\n          );\n        }\n\n        if (options.timeoutContext?.csotEnabled()) {\n          throw new MongoOperationTimeoutError('Timed out during server selection', {\n            cause: timeoutError\n          });\n        }\n        throw timeoutError;\n      }\n      // Other server selection error\n      throw error;\n    } finally {\n      abortListener?.[kDispose]();\n      if (options.timeoutContext?.clearServerSelectionTimeout) timeout?.clear();\n    }\n  }\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param serverDescription - The server to update in the internal list of server descriptions\n   */\n  serverUpdateHandler(serverDescription: ServerDescription): void {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    }\n\n    // ignore this server update if its from an outdated topologyVersion\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    }\n\n    // these will be used for monitoring events later\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n    if (!previousServerDescription) {\n      return;\n    }\n\n    // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n    const clusterTime = serverDescription.$clusterTime;\n    if (clusterTime) {\n      _advanceClusterTime(this, clusterTime);\n    }\n\n    // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n    const equalDescriptions =\n      previousServerDescription && previousServerDescription.equals(serverDescription);\n\n    // first update the TopologyDescription\n    this.s.description = this.s.description.update(serverDescription);\n    if (this.s.description.compatibilityError) {\n      this.emit(Topology.ERROR, new MongoCompatibilityError(this.s.description.compatibilityError));\n      return;\n    }\n\n    // emit monitoring events for this change\n    if (!equalDescriptions) {\n      const newDescription = this.s.description.servers.get(serverDescription.address);\n      if (newDescription) {\n        this.emit(\n          Topology.SERVER_DESCRIPTION_CHANGED,\n          new ServerDescriptionChangedEvent(\n            this.s.id,\n            serverDescription.address,\n            previousServerDescription,\n            newDescription\n          )\n        );\n      }\n    }\n\n    // update server list from updated descriptions\n    updateServers(this, serverDescription);\n\n    // attempt to resolve any outstanding server selection attempts\n    if (this.waitQueue.length > 0) {\n      processWaitQueue(this);\n    }\n\n    if (!equalDescriptions) {\n      this.emitAndLog(\n        Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n        new TopologyDescriptionChangedEvent(\n          this.s.id,\n          previousTopologyDescription,\n          this.s.description\n        )\n      );\n    }\n  }\n\n  auth(credentials?: MongoCredentials, callback?: Callback): void {\n    if (typeof credentials === 'function') (callback = credentials), (credentials = undefined);\n    if (typeof callback === 'function') callback(undefined, true);\n  }\n\n  get clientMetadata(): ClientMetadata {\n    return this.s.options.metadata;\n  }\n\n  isConnected(): boolean {\n    return this.s.state === STATE_CONNECTED;\n  }\n\n  isDestroyed(): boolean {\n    return this.s.state === STATE_CLOSED;\n  }\n\n  // NOTE: There are many places in code where we explicitly check the last hello\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first hello seen, which should suffice.\n  lastHello(): Document {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(\n      (sd: ServerDescription) => sd.type !== ServerType.Unknown\n    )[0];\n\n    const result = sd || { maxWireVersion: this.description.commonWireVersion };\n    return result;\n  }\n\n  get commonWireVersion(): number | undefined {\n    return this.description.commonWireVersion;\n  }\n\n  get logicalSessionTimeoutMinutes(): number | null {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n\n  get clusterTime(): ClusterTime | undefined {\n    return this.s.clusterTime;\n  }\n\n  set clusterTime(clusterTime: ClusterTime | undefined) {\n    this.s.clusterTime = clusterTime;\n  }\n}\n\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(server: Server, topology: Topology) {\n  for (const event of LOCAL_SERVER_EVENTS) {\n    server.removeAllListeners(event);\n  }\n\n  server.destroy();\n  topology.emitAndLog(\n    Topology.SERVER_CLOSED,\n    new ServerClosedEvent(topology.s.id, server.description.address)\n  );\n\n  for (const event of SERVER_RELAY_EVENTS) {\n    server.removeAllListeners(event);\n  }\n}\n\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options?: TopologyOptions) {\n  if (options?.directConnection) {\n    return TopologyType.Single;\n  }\n\n  if (options?.replicaSet) {\n    return TopologyType.ReplicaSetNoPrimary;\n  }\n\n  if (options?.loadBalanced) {\n    return TopologyType.LoadBalanced;\n  }\n\n  return TopologyType.Unknown;\n}\n\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n */\nfunction createAndConnectServer(topology: Topology, serverDescription: ServerDescription) {\n  topology.emitAndLog(\n    Topology.SERVER_OPENING,\n    new ServerOpeningEvent(topology.s.id, serverDescription.address)\n  );\n\n  const server = new Server(topology, serverDescription, topology.s.options);\n  for (const event of SERVER_RELAY_EVENTS) {\n    server.on(event, (e: any) => topology.emit(event, e));\n  }\n\n  server.on(Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n\n  server.connect();\n  return server;\n}\n\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology: Topology, incomingServerDescription?: ServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    if (server) {\n      server.s.description = incomingServerDescription;\n      if (\n        incomingServerDescription.error instanceof MongoError &&\n        incomingServerDescription.error.hasErrorLabel(MongoErrorLabel.ResetPool)\n      ) {\n        const interruptInUseConnections = incomingServerDescription.error.hasErrorLabel(\n          MongoErrorLabel.InterruptInUseConnections\n        );\n\n        server.pool.clear({ interruptInUseConnections });\n      } else if (incomingServerDescription.error == null) {\n        const newTopologyType = topology.s.description.type;\n        const shouldMarkPoolReady =\n          incomingServerDescription.isDataBearing ||\n          (incomingServerDescription.type !== ServerType.Unknown &&\n            newTopologyType === TopologyType.Single);\n        if (shouldMarkPoolReady) {\n          server.pool.ready();\n        }\n      }\n    }\n  }\n\n  // add new servers for all descriptions we currently don't know about locally\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  }\n\n  // for all servers no longer known, remove their descriptions and destroy their instances\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n\n    if (!topology.s.servers.has(serverAddress)) {\n      continue;\n    }\n\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress);\n\n    // prepare server for garbage collection\n    if (server) {\n      destroyServer(server, topology);\n    }\n  }\n}\n\nfunction drainWaitQueue(queue: List<ServerSelectionRequest>, drainError: MongoDriverError) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (!waitQueueMember.cancelled) {\n      if (\n        waitQueueMember.mongoLogger?.willLog(\n          MongoLoggableComponent.SERVER_SELECTION,\n          SeverityLevel.DEBUG\n        )\n      ) {\n        waitQueueMember.mongoLogger?.debug(\n          MongoLoggableComponent.SERVER_SELECTION,\n          new ServerSelectionFailedEvent(\n            waitQueueMember.serverSelector,\n            waitQueueMember.topologyDescription,\n            drainError,\n            waitQueueMember.operationName\n          )\n        );\n      }\n      waitQueueMember.reject(drainError);\n    }\n  }\n}\n\nfunction processWaitQueue(topology: Topology) {\n  if (topology.s.state === STATE_CLOSED) {\n    drainWaitQueue(topology.waitQueue, new MongoTopologyClosedError());\n    return;\n  }\n\n  const isSharded = topology.description.type === TopologyType.Sharded;\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology.waitQueue.length;\n  for (let i = 0; i < membersToProcess; ++i) {\n    const waitQueueMember = topology.waitQueue.shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember.cancelled) {\n      continue;\n    }\n\n    let selectedDescriptions;\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      const previousServer = waitQueueMember.previousServer;\n      selectedDescriptions = serverSelector\n        ? serverSelector(\n            topology.description,\n            serverDescriptions,\n            previousServer ? [previousServer] : []\n          )\n        : serverDescriptions;\n    } catch (selectorError) {\n      if (\n        topology.client.mongoLogger?.willLog(\n          MongoLoggableComponent.SERVER_SELECTION,\n          SeverityLevel.DEBUG\n        )\n      ) {\n        topology.client.mongoLogger?.debug(\n          MongoLoggableComponent.SERVER_SELECTION,\n          new ServerSelectionFailedEvent(\n            waitQueueMember.serverSelector,\n            topology.description,\n            selectorError,\n            waitQueueMember.operationName\n          )\n        );\n      }\n      waitQueueMember.reject(selectorError);\n      continue;\n    }\n\n    let selectedServer: Server | undefined;\n    if (selectedDescriptions.length === 0) {\n      if (!waitQueueMember.waitingLogged) {\n        if (\n          topology.client.mongoLogger?.willLog(\n            MongoLoggableComponent.SERVER_SELECTION,\n            SeverityLevel.INFORMATIONAL\n          )\n        ) {\n          topology.client.mongoLogger?.info(\n            MongoLoggableComponent.SERVER_SELECTION,\n            new WaitingForSuitableServerEvent(\n              waitQueueMember.serverSelector,\n              topology.description,\n              topology.s.serverSelectionTimeoutMS !== 0\n                ? topology.s.serverSelectionTimeoutMS - (now() - waitQueueMember.startTime)\n                : -1,\n              waitQueueMember.operationName\n            )\n          );\n        }\n        waitQueueMember.waitingLogged = true;\n      }\n      topology.waitQueue.push(waitQueueMember);\n      continue;\n    } else if (selectedDescriptions.length === 1) {\n      selectedServer = topology.s.servers.get(selectedDescriptions[0].address);\n    } else {\n      const descriptions = shuffle(selectedDescriptions, 2);\n      const server1 = topology.s.servers.get(descriptions[0].address);\n      const server2 = topology.s.servers.get(descriptions[1].address);\n\n      selectedServer =\n        server1 && server2 && server1.s.operationCount < server2.s.operationCount\n          ? server1\n          : server2;\n    }\n\n    if (!selectedServer) {\n      const serverSelectionError = new MongoServerSelectionError(\n        'server selection returned a server description but the server was not found in the topology',\n        topology.description\n      );\n      if (\n        topology.client.mongoLogger?.willLog(\n          MongoLoggableComponent.SERVER_SELECTION,\n          SeverityLevel.DEBUG\n        )\n      ) {\n        topology.client.mongoLogger?.debug(\n          MongoLoggableComponent.SERVER_SELECTION,\n          new ServerSelectionFailedEvent(\n            waitQueueMember.serverSelector,\n            topology.description,\n            serverSelectionError,\n            waitQueueMember.operationName\n          )\n        );\n      }\n      waitQueueMember.reject(serverSelectionError);\n      return;\n    }\n    const transaction = waitQueueMember.transaction;\n    if (isSharded && transaction && transaction.isActive && selectedServer) {\n      transaction.pinServer(selectedServer);\n    }\n\n    if (\n      topology.client.mongoLogger?.willLog(\n        MongoLoggableComponent.SERVER_SELECTION,\n        SeverityLevel.DEBUG\n      )\n    ) {\n      topology.client.mongoLogger?.debug(\n        MongoLoggableComponent.SERVER_SELECTION,\n        new ServerSelectionSucceededEvent(\n          waitQueueMember.serverSelector,\n          waitQueueMember.topologyDescription,\n          selectedServer.pool.address,\n          waitQueueMember.operationName\n        )\n      );\n    }\n    waitQueueMember.resolve(selectedServer);\n  }\n\n  if (topology.waitQueue.length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    for (const [, server] of topology.s.servers) {\n      process.nextTick(function scheduleServerCheck() {\n        return server.requestCheck();\n      });\n    }\n  }\n}\n\nfunction isStaleServerDescription(\n  topologyDescription: TopologyDescription,\n  incomingServerDescription: ServerDescription\n) {\n  const currentServerDescription = topologyDescription.servers.get(\n    incomingServerDescription.address\n  );\n  const currentTopologyVersion = currentServerDescription?.topologyVersion;\n  return (\n    compareTopologyVersion(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0\n  );\n}\n\n/** @public */\nexport class ServerCapabilities {\n  maxWireVersion: number;\n  minWireVersion: number;\n\n  constructor(hello: Document) {\n    this.minWireVersion = hello.minWireVersion || 0;\n    this.maxWireVersion = hello.maxWireVersion || 0;\n  }\n\n  get hasAggregationCursor(): boolean {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasWriteCommands(): boolean {\n    return this.maxWireVersion >= 2;\n  }\n  get hasTextSearch(): boolean {\n    return this.minWireVersion >= 0;\n  }\n\n  get hasAuthCommands(): boolean {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasListCollectionsCommand(): boolean {\n    return this.maxWireVersion >= 3;\n  }\n\n  get hasListIndexesCommand(): boolean {\n    return this.maxWireVersion >= 3;\n  }\n\n  get supportsSnapshotReads(): boolean {\n    return this.maxWireVersion >= 13;\n  }\n\n  get commandsTakeWriteConcern(): boolean {\n    return this.maxWireVersion >= 5;\n  }\n\n  get commandsTakeCollation(): boolean {\n    return this.maxWireVersion >= 5;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}