{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/glebch/workprojects/baumna/client/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Db = void 0;\nconst admin_1 = require(\"./admin\");\nconst bson_1 = require(\"./bson\");\nconst change_stream_1 = require(\"./change_stream\");\nconst collection_1 = require(\"./collection\");\nconst CONSTANTS = require(\"./constants\");\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\nconst list_collections_cursor_1 = require(\"./cursor/list_collections_cursor\");\nconst run_command_cursor_1 = require(\"./cursor/run_command_cursor\");\nconst error_1 = require(\"./error\");\nconst collections_1 = require(\"./operations/collections\");\nconst create_collection_1 = require(\"./operations/create_collection\");\nconst drop_1 = require(\"./operations/drop\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst indexes_1 = require(\"./operations/indexes\");\nconst profiling_level_1 = require(\"./operations/profiling_level\");\nconst remove_user_1 = require(\"./operations/remove_user\");\nconst rename_1 = require(\"./operations/rename\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst set_profiling_level_1 = require(\"./operations/set_profiling_level\");\nconst stats_1 = require(\"./operations/stats\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = ['writeConcern', 'readPreference', 'readPreferenceTags', 'native_parser', 'forceServerObjectId', 'pkFactory', 'serializeFunctions', 'raw', 'authSource', 'ignoreUndefined', 'readConcern', 'retryMiliSeconds', 'numberOfRetries', 'useBigInt64', 'promoteBuffers', 'promoteLongs', 'bsonRegExp', 'enableUtf8Validation', 'promoteValues', 'compression', 'retryWrites', 'timeoutMS'];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\nclass Db {\n  /**\n   * Creates a new Db instance.\n   *\n   * Db name cannot contain a dot, the server may apply more restrictions when an operation is run.\n   *\n   * @param client - The MongoClient for the database.\n   * @param databaseName - The name of the database this instance represents.\n   * @param options - Optional settings for Db construction.\n   */\n  constructor(client, databaseName, options) {\n    var _options$pkFactory, _options;\n    options = options !== null && options !== void 0 ? options : {};\n    // Filter the options\n    options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST);\n    // Ensure there are no dots in database name\n    if (typeof databaseName === 'string' && databaseName.includes('.')) {\n      throw new error_1.MongoInvalidArgumentError(\"Database names cannot contain the character '.'\");\n    }\n    // Internal state of the db object\n    this.s = {\n      // Options\n      options,\n      // Unpack read preference\n      readPreference: read_preference_1.ReadPreference.fromOptions(options),\n      // Merge bson options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n      // Set up the primary key factory or fallback to ObjectId\n      pkFactory: (_options$pkFactory = (_options = options) === null || _options === void 0 ? void 0 : _options.pkFactory) !== null && _options$pkFactory !== void 0 ? _options$pkFactory : utils_1.DEFAULT_PK_FACTORY,\n      // ReadConcern\n      readConcern: read_concern_1.ReadConcern.fromOptions(options),\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Namespace\n      namespace: new utils_1.MongoDBNamespace(databaseName)\n    };\n    this.client = client;\n  }\n  get databaseName() {\n    return this.s.namespace.db;\n  }\n  // Options\n  get options() {\n    return this.s.options;\n  }\n  /**\n   * Check if a secondary can be used (because the read preference is *not* set to primary)\n   */\n  get secondaryOk() {\n    var _this$s$readPreferenc;\n    return ((_this$s$readPreferenc = this.s.readPreference) === null || _this$s$readPreferenc === void 0 ? void 0 : _this$s$readPreferenc.preference) !== 'primary' || false;\n  }\n  get readConcern() {\n    return this.s.readConcern;\n  }\n  /**\n   * The current readPreference of the Db. If not explicitly defined for\n   * this Db, will be inherited from the parent MongoClient\n   */\n  get readPreference() {\n    if (this.s.readPreference == null) {\n      return this.client.readPreference;\n    }\n    return this.s.readPreference;\n  }\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n  // get the write Concern\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n  get namespace() {\n    return this.s.namespace.toString();\n  }\n  get timeoutMS() {\n    var _this$s$options;\n    return (_this$s$options = this.s.options) === null || _this$s$options === void 0 ? void 0 : _this$s$options.timeoutMS;\n  }\n  /**\n   * Create a new collection on a server with the specified options. Use this to create capped collections.\n   * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\n   *\n   * Collection namespace validation is performed server-side.\n   *\n   * @param name - The name of the collection to create\n   * @param options - Optional settings for the command\n   */\n  async createCollection(name, options) {\n    return await (0, execute_operation_1.executeOperation)(this.client, new create_collection_1.CreateCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Execute a command\n   *\n   * @remarks\n   * This command does not inherit options from the MongoClient.\n   *\n   * The driver will ensure the following fields are attached to the command sent to the server:\n   * - `lsid` - sourced from an implicit session or options.session\n   * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n   * - `$db` - sourced from the name of this database\n   *\n   * If the client has a serverApi setting:\n   * - `apiVersion`\n   * - `apiStrict`\n   * - `apiDeprecationErrors`\n   *\n   * When in a transaction:\n   * - `readConcern` - sourced from readConcern set on the TransactionOptions\n   * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n   *\n   * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n   *\n   * @param command - The command to run\n   * @param options - Optional settings for the command\n   */\n  async command(command, options) {\n    var _options$timeoutMS;\n    // Intentionally, we do not inherit options from parent for this operation.\n    return await (0, execute_operation_1.executeOperation)(this.client, new run_command_1.RunCommandOperation(this, command, (0, utils_1.resolveOptions)(undefined, _objectSpread(_objectSpread({}, (0, bson_1.resolveBSONOptions)(options)), {}, {\n      timeoutMS: (_options$timeoutMS = options === null || options === void 0 ? void 0 : options.timeoutMS) !== null && _options$timeoutMS !== void 0 ? _options$timeoutMS : this.timeoutMS,\n      session: options === null || options === void 0 ? void 0 : options.session,\n      readPreference: options === null || options === void 0 ? void 0 : options.readPreference,\n      signal: options === null || options === void 0 ? void 0 : options.signal\n    }))));\n  }\n  /**\n   * Execute an aggregation framework pipeline against the database.\n   *\n   * @param pipeline - An array of aggregation stages to be executed\n   * @param options - Optional settings for the command\n   */\n  aggregate() {\n    let pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    return new aggregation_cursor_1.AggregationCursor(this.client, this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /** Return the Admin db instance */\n  admin() {\n    return new admin_1.Admin(this);\n  }\n  /**\n   * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n   *\n   * Collection namespace validation is performed server-side.\n   *\n   * @param name - the collection name we wish to access.\n   * @returns return the new Collection instance\n   */\n  collection(name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (typeof options === 'function') {\n      throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n    }\n    return new collection_1.Collection(this, name, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Get all the db statistics.\n   *\n   * @param options - Optional settings for the command\n   */\n  async stats(options) {\n    return await (0, execute_operation_1.executeOperation)(this.client, new stats_1.DbStatsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  listCollections() {\n    let filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new list_collections_cursor_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Rename a collection.\n   *\n   * @remarks\n   * This operation does not inherit options from the MongoClient.\n   *\n   * @param fromCollection - Name of current collection to rename\n   * @param toCollection - New name of of the collection\n   * @param options - Optional settings for the command\n   */\n  async renameCollection(fromCollection, toCollection, options) {\n    // Intentionally, we do not inherit options from parent for this operation.\n    return await (0, execute_operation_1.executeOperation)(this.client, new rename_1.RenameOperation(this.collection(fromCollection), toCollection, (0, utils_1.resolveOptions)(undefined, _objectSpread(_objectSpread({}, options), {}, {\n      new_collection: true,\n      readPreference: read_preference_1.ReadPreference.primary\n    }))));\n  }\n  /**\n   * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n   *\n   * @param name - Name of collection to drop\n   * @param options - Optional settings for the command\n   */\n  async dropCollection(name, options) {\n    return await (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Drop a database, removing it permanently from the server.\n   *\n   * @param options - Optional settings for the command\n   */\n  async dropDatabase(options) {\n    return await (0, execute_operation_1.executeOperation)(this.client, new drop_1.DropDatabaseOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Fetch all collections for the current db.\n   *\n   * @param options - Optional settings for the command\n   */\n  async collections(options) {\n    return await (0, execute_operation_1.executeOperation)(this.client, new collections_1.CollectionsOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Creates an index on the db and collection.\n   *\n   * @param name - Name of the collection to create the index on.\n   * @param indexSpec - Specify the field to index, or an index specification\n   * @param options - Optional settings for the command\n   */\n  async createIndex(name, indexSpec, options) {\n    const indexes = await (0, execute_operation_1.executeOperation)(this.client, indexes_1.CreateIndexesOperation.fromIndexSpecification(this, name, indexSpec, options));\n    return indexes[0];\n  }\n  /**\n   * Remove a user from a database\n   *\n   * @param username - The username to remove\n   * @param options - Optional settings for the command\n   */\n  async removeUser(username, options) {\n    return await (0, execute_operation_1.executeOperation)(this.client, new remove_user_1.RemoveUserOperation(this, username, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Set the current profiling level of MongoDB\n   *\n   * @param level - The new profiling level (off, slow_only, all).\n   * @param options - Optional settings for the command\n   */\n  async setProfilingLevel(level, options) {\n    return await (0, execute_operation_1.executeOperation)(this.client, new set_profiling_level_1.SetProfilingLevelOperation(this, level, (0, utils_1.resolveOptions)(this, options)));\n  }\n  /**\n   * Retrieve the current profiling Level for MongoDB\n   *\n   * @param options - Optional settings for the command\n   */\n  async profilingLevel(options) {\n    return await (0, execute_operation_1.executeOperation)(this.client, new profiling_level_1.ProfilingLevelOperation(this, (0, utils_1.resolveOptions)(this, options)));\n  }\n  async indexInformation(name, options) {\n    return await this.collection(name).indexInformation((0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates,\n   * replacements, deletions, and invalidations) in this database. Will ignore all\n   * changes to system collections.\n   *\n   * @remarks\n   * watch() accepts two generic arguments for distinct use cases:\n   * - The first is to provide the schema that may be defined for all the collections within this database\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n   *\n   * @remarks\n   * When `timeoutMS` is configured for a change stream, it will have different behaviour depending\n   * on whether the change stream is in iterator mode or emitter mode. In both cases, a change\n   * stream will time out if it does not receive a change event within `timeoutMS` of the last change\n   * event.\n   *\n   * Note that if a change stream is consistently timing out when watching a collection, database or\n   * client that is being changed, then this may be due to the server timing out before it can finish\n   * processing the existing oplog. To address this, restart the change stream with a higher\n   * `timeoutMS`.\n   *\n   * If the change stream times out the initial aggregate operation to establish the change stream on\n   * the server, then the client will close the change stream. If the getMore calls to the server\n   * time out, then the change stream will be left open, but will throw a MongoOperationTimeoutError\n   * when in iterator mode and emit an error event that returns a MongoOperationTimeoutError in\n   * emitter mode.\n   *\n   * To determine whether or not the change stream is still open following a timeout, check the\n   * {@link ChangeStream.closed} getter.\n   *\n   * @example\n   * In iterator mode, if a next() call throws a timeout error, it will attempt to resume the change stream.\n   * The next call can just be retried after this succeeds.\n   * ```ts\n   * const changeStream = collection.watch([], { timeoutMS: 100 });\n   * try {\n   *     await changeStream.next();\n   * } catch (e) {\n   *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n   *       await changeStream.next();\n   *     }\n   *     throw e;\n   * }\n   * ```\n   *\n   * @example\n   * In emitter mode, if the change stream goes `timeoutMS` without emitting a change event, it will\n   * emit an error event that returns a MongoOperationTimeoutError, but will not close the change\n   * stream unless the resume attempt fails. There is no need to re-establish change listeners as\n   * this will automatically continue emitting change events once the resume attempt completes.\n   *\n   * ```ts\n   * const changeStream = collection.watch([], { timeoutMS: 100 });\n   * changeStream.on('change', console.log);\n   * changeStream.on('error', e => {\n   *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n   *         // do nothing\n   *     } else {\n   *         changeStream.close();\n   *     }\n   * });\n   * ```\n   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   * @typeParam TSchema - Type of the data being detected by the change stream\n   * @typeParam TChange - Type of the whole change stream document emitted\n   */\n  watch() {\n    let pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n    return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * A low level cursor API providing basic driver functionality:\n   * - ClientSession management\n   * - ReadPreference for server selection\n   * - Running getMores automatically when a local batch is exhausted\n   *\n   * @param command - The command that will start a cursor on the server.\n   * @param options - Configurations for running the command, bson options will apply to getMores\n   */\n  runCursorCommand(command, options) {\n    return new run_command_cursor_1.RunCommandCursor(this, command, options);\n  }\n}\nexports.Db = Db;\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;","map":{"version":3,"names":["admin_1","require","bson_1","change_stream_1","collection_1","CONSTANTS","aggregation_cursor_1","list_collections_cursor_1","run_command_cursor_1","error_1","collections_1","create_collection_1","drop_1","execute_operation_1","indexes_1","profiling_level_1","remove_user_1","rename_1","run_command_1","set_profiling_level_1","stats_1","read_concern_1","read_preference_1","utils_1","write_concern_1","DB_OPTIONS_ALLOW_LIST","Db","constructor","client","databaseName","options","_options$pkFactory","_options","filterOptions","includes","MongoInvalidArgumentError","s","readPreference","ReadPreference","fromOptions","bsonOptions","resolveBSONOptions","pkFactory","DEFAULT_PK_FACTORY","readConcern","ReadConcern","writeConcern","WriteConcern","namespace","MongoDBNamespace","db","secondaryOk","_this$s$readPreferenc","preference","toString","timeoutMS","_this$s$options","createCollection","name","executeOperation","CreateCollectionOperation","resolveOptions","command","_options$timeoutMS","RunCommandOperation","undefined","_objectSpread","session","signal","aggregate","pipeline","arguments","length","AggregationCursor","admin","Admin","collection","Collection","stats","DbStatsOperation","listCollections","filter","ListCollectionsCursor","renameCollection","fromCollection","toCollection","RenameOperation","new_collection","primary","dropCollection","DropCollectionOperation","dropDatabase","DropDatabaseOperation","collections","CollectionsOperation","createIndex","indexSpec","indexes","CreateIndexesOperation","fromIndexSpecification","removeUser","username","RemoveUserOperation","setProfilingLevel","level","SetProfilingLevelOperation","profilingLevel","ProfilingLevelOperation","indexInformation","watch","Array","isArray","ChangeStream","runCursorCommand","RunCommandCursor","exports","SYSTEM_NAMESPACE_COLLECTION","SYSTEM_INDEX_COLLECTION","SYSTEM_PROFILE_COLLECTION","SYSTEM_USER_COLLECTION","SYSTEM_COMMAND_COLLECTION","SYSTEM_JS_COLLECTION"],"sources":["/Users/glebch/workprojects/baumna/client/node_modules/mongodb/src/db.ts"],"sourcesContent":["import { Admin } from './admin';\nimport { type BSONSerializeOptions, type Document, resolveBSONOptions } from './bson';\nimport { ChangeStream, type ChangeStreamDocument, type ChangeStreamOptions } from './change_stream';\nimport { Collection, type CollectionOptions } from './collection';\nimport * as CONSTANTS from './constants';\nimport { AggregationCursor } from './cursor/aggregation_cursor';\nimport { ListCollectionsCursor } from './cursor/list_collections_cursor';\nimport { RunCommandCursor, type RunCursorCommandOptions } from './cursor/run_command_cursor';\nimport { MongoInvalidArgumentError } from './error';\nimport type { MongoClient, PkFactory } from './mongo_client';\nimport type { Abortable, TODO_NODE_3286 } from './mongo_types';\nimport type { AggregateOptions } from './operations/aggregate';\nimport { CollectionsOperation } from './operations/collections';\nimport {\n  CreateCollectionOperation,\n  type CreateCollectionOptions\n} from './operations/create_collection';\nimport {\n  DropCollectionOperation,\n  type DropCollectionOptions,\n  DropDatabaseOperation,\n  type DropDatabaseOptions\n} from './operations/drop';\nimport { executeOperation } from './operations/execute_operation';\nimport {\n  CreateIndexesOperation,\n  type CreateIndexesOptions,\n  type IndexDescriptionCompact,\n  type IndexDescriptionInfo,\n  type IndexInformationOptions,\n  type IndexSpecification\n} from './operations/indexes';\nimport type { CollectionInfo, ListCollectionsOptions } from './operations/list_collections';\nimport { ProfilingLevelOperation, type ProfilingLevelOptions } from './operations/profiling_level';\nimport { RemoveUserOperation, type RemoveUserOptions } from './operations/remove_user';\nimport { RenameOperation, type RenameOptions } from './operations/rename';\nimport { RunCommandOperation, type RunCommandOptions } from './operations/run_command';\nimport {\n  type ProfilingLevel,\n  SetProfilingLevelOperation,\n  type SetProfilingLevelOptions\n} from './operations/set_profiling_level';\nimport { DbStatsOperation, type DbStatsOptions } from './operations/stats';\nimport { ReadConcern } from './read_concern';\nimport { ReadPreference, type ReadPreferenceLike } from './read_preference';\nimport { DEFAULT_PK_FACTORY, filterOptions, MongoDBNamespace, resolveOptions } from './utils';\nimport { WriteConcern, type WriteConcernOptions } from './write_concern';\n\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = [\n  'writeConcern',\n  'readPreference',\n  'readPreferenceTags',\n  'native_parser',\n  'forceServerObjectId',\n  'pkFactory',\n  'serializeFunctions',\n  'raw',\n  'authSource',\n  'ignoreUndefined',\n  'readConcern',\n  'retryMiliSeconds',\n  'numberOfRetries',\n  'useBigInt64',\n  'promoteBuffers',\n  'promoteLongs',\n  'bsonRegExp',\n  'enableUtf8Validation',\n  'promoteValues',\n  'compression',\n  'retryWrites',\n  'timeoutMS'\n];\n\n/** @internal */\nexport interface DbPrivate {\n  options?: DbOptions;\n  readPreference?: ReadPreference;\n  pkFactory: PkFactory;\n  readConcern?: ReadConcern;\n  bsonOptions: BSONSerializeOptions;\n  writeConcern?: WriteConcern;\n  namespace: MongoDBNamespace;\n}\n\n/** @public */\nexport interface DbOptions extends BSONSerializeOptions, WriteConcernOptions {\n  /** If the database authentication is dependent on another databaseName. */\n  authSource?: string;\n  /** Force server to assign _id values instead of driver. */\n  forceServerObjectId?: boolean;\n  /** The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST). */\n  readPreference?: ReadPreferenceLike;\n  /** A primary key factory object for generation of custom _id keys. */\n  pkFactory?: PkFactory;\n  /** Specify a read concern for the collection. (only MongoDB 3.2 or higher supported) */\n  readConcern?: ReadConcern;\n  /** Should retry failed writes */\n  retryWrites?: boolean;\n  /**\n   * @experimental\n   * Specifies the time an operation will run until it throws a timeout error\n   */\n  timeoutMS?: number;\n}\n\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\nexport class Db {\n  /** @internal */\n  s: DbPrivate;\n\n  /** @internal */\n  readonly client: MongoClient;\n\n  public static SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\n  public static SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\n  public static SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\n  public static SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\n  public static SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\n  public static SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\n\n  /**\n   * Creates a new Db instance.\n   *\n   * Db name cannot contain a dot, the server may apply more restrictions when an operation is run.\n   *\n   * @param client - The MongoClient for the database.\n   * @param databaseName - The name of the database this instance represents.\n   * @param options - Optional settings for Db construction.\n   */\n  constructor(client: MongoClient, databaseName: string, options?: DbOptions) {\n    options = options ?? {};\n\n    // Filter the options\n    options = filterOptions(options, DB_OPTIONS_ALLOW_LIST);\n\n    // Ensure there are no dots in database name\n    if (typeof databaseName === 'string' && databaseName.includes('.')) {\n      throw new MongoInvalidArgumentError(`Database names cannot contain the character '.'`);\n    }\n\n    // Internal state of the db object\n    this.s = {\n      // Options\n      options,\n      // Unpack read preference\n      readPreference: ReadPreference.fromOptions(options),\n      // Merge bson options\n      bsonOptions: resolveBSONOptions(options, client),\n      // Set up the primary key factory or fallback to ObjectId\n      pkFactory: options?.pkFactory ?? DEFAULT_PK_FACTORY,\n      // ReadConcern\n      readConcern: ReadConcern.fromOptions(options),\n      writeConcern: WriteConcern.fromOptions(options),\n      // Namespace\n      namespace: new MongoDBNamespace(databaseName)\n    };\n\n    this.client = client;\n  }\n\n  get databaseName(): string {\n    return this.s.namespace.db;\n  }\n\n  // Options\n  get options(): DbOptions | undefined {\n    return this.s.options;\n  }\n\n  /**\n   * Check if a secondary can be used (because the read preference is *not* set to primary)\n   */\n  get secondaryOk(): boolean {\n    return this.s.readPreference?.preference !== 'primary' || false;\n  }\n\n  get readConcern(): ReadConcern | undefined {\n    return this.s.readConcern;\n  }\n\n  /**\n   * The current readPreference of the Db. If not explicitly defined for\n   * this Db, will be inherited from the parent MongoClient\n   */\n  get readPreference(): ReadPreference {\n    if (this.s.readPreference == null) {\n      return this.client.readPreference;\n    }\n\n    return this.s.readPreference;\n  }\n\n  get bsonOptions(): BSONSerializeOptions {\n    return this.s.bsonOptions;\n  }\n\n  // get the write Concern\n  get writeConcern(): WriteConcern | undefined {\n    return this.s.writeConcern;\n  }\n\n  get namespace(): string {\n    return this.s.namespace.toString();\n  }\n\n  public get timeoutMS(): number | undefined {\n    return this.s.options?.timeoutMS;\n  }\n\n  /**\n   * Create a new collection on a server with the specified options. Use this to create capped collections.\n   * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\n   *\n   * Collection namespace validation is performed server-side.\n   *\n   * @param name - The name of the collection to create\n   * @param options - Optional settings for the command\n   */\n  async createCollection<TSchema extends Document = Document>(\n    name: string,\n    options?: CreateCollectionOptions\n  ): Promise<Collection<TSchema>> {\n    return await executeOperation(\n      this.client,\n      new CreateCollectionOperation(this, name, resolveOptions(this, options)) as TODO_NODE_3286\n    );\n  }\n\n  /**\n   * Execute a command\n   *\n   * @remarks\n   * This command does not inherit options from the MongoClient.\n   *\n   * The driver will ensure the following fields are attached to the command sent to the server:\n   * - `lsid` - sourced from an implicit session or options.session\n   * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n   * - `$db` - sourced from the name of this database\n   *\n   * If the client has a serverApi setting:\n   * - `apiVersion`\n   * - `apiStrict`\n   * - `apiDeprecationErrors`\n   *\n   * When in a transaction:\n   * - `readConcern` - sourced from readConcern set on the TransactionOptions\n   * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n   *\n   * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n   *\n   * @param command - The command to run\n   * @param options - Optional settings for the command\n   */\n  async command(command: Document, options?: RunCommandOptions & Abortable): Promise<Document> {\n    // Intentionally, we do not inherit options from parent for this operation.\n    return await executeOperation(\n      this.client,\n      new RunCommandOperation(\n        this,\n        command,\n        resolveOptions(undefined, {\n          ...resolveBSONOptions(options),\n          timeoutMS: options?.timeoutMS ?? this.timeoutMS,\n          session: options?.session,\n          readPreference: options?.readPreference,\n          signal: options?.signal\n        })\n      )\n    );\n  }\n\n  /**\n   * Execute an aggregation framework pipeline against the database.\n   *\n   * @param pipeline - An array of aggregation stages to be executed\n   * @param options - Optional settings for the command\n   */\n  aggregate<T extends Document = Document>(\n    pipeline: Document[] = [],\n    options?: AggregateOptions\n  ): AggregationCursor<T> {\n    return new AggregationCursor(\n      this.client,\n      this.s.namespace,\n      pipeline,\n      resolveOptions(this, options)\n    );\n  }\n\n  /** Return the Admin db instance */\n  admin(): Admin {\n    return new Admin(this);\n  }\n\n  /**\n   * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n   *\n   * Collection namespace validation is performed server-side.\n   *\n   * @param name - the collection name we wish to access.\n   * @returns return the new Collection instance\n   */\n  collection<TSchema extends Document = Document>(\n    name: string,\n    options: CollectionOptions = {}\n  ): Collection<TSchema> {\n    if (typeof options === 'function') {\n      throw new MongoInvalidArgumentError('The callback form of this helper has been removed.');\n    }\n    return new Collection<TSchema>(this, name, resolveOptions(this, options));\n  }\n\n  /**\n   * Get all the db statistics.\n   *\n   * @param options - Optional settings for the command\n   */\n  async stats(options?: DbStatsOptions): Promise<Document> {\n    return await executeOperation(\n      this.client,\n      new DbStatsOperation(this, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * List all collections of this database with optional filter\n   *\n   * @param filter - Query to filter collections by\n   * @param options - Optional settings for the command\n   */\n  listCollections(\n    filter: Document,\n    options: Exclude<ListCollectionsOptions, 'nameOnly'> & { nameOnly: true } & Abortable\n  ): ListCollectionsCursor<Pick<CollectionInfo, 'name' | 'type'>>;\n  listCollections(\n    filter: Document,\n    options: Exclude<ListCollectionsOptions, 'nameOnly'> & { nameOnly: false } & Abortable\n  ): ListCollectionsCursor<CollectionInfo>;\n  listCollections<\n    T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo =\n      | Pick<CollectionInfo, 'name' | 'type'>\n      | CollectionInfo\n  >(filter?: Document, options?: ListCollectionsOptions & Abortable): ListCollectionsCursor<T>;\n  listCollections<\n    T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo =\n      | Pick<CollectionInfo, 'name' | 'type'>\n      | CollectionInfo\n  >(\n    filter: Document = {},\n    options: ListCollectionsOptions & Abortable = {}\n  ): ListCollectionsCursor<T> {\n    return new ListCollectionsCursor<T>(this, filter, resolveOptions(this, options));\n  }\n\n  /**\n   * Rename a collection.\n   *\n   * @remarks\n   * This operation does not inherit options from the MongoClient.\n   *\n   * @param fromCollection - Name of current collection to rename\n   * @param toCollection - New name of of the collection\n   * @param options - Optional settings for the command\n   */\n  async renameCollection<TSchema extends Document = Document>(\n    fromCollection: string,\n    toCollection: string,\n    options?: RenameOptions\n  ): Promise<Collection<TSchema>> {\n    // Intentionally, we do not inherit options from parent for this operation.\n    return await executeOperation(\n      this.client,\n      new RenameOperation(\n        this.collection<TSchema>(fromCollection) as TODO_NODE_3286,\n        toCollection,\n        resolveOptions(undefined, {\n          ...options,\n          new_collection: true,\n          readPreference: ReadPreference.primary\n        })\n      ) as TODO_NODE_3286\n    );\n  }\n\n  /**\n   * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n   *\n   * @param name - Name of collection to drop\n   * @param options - Optional settings for the command\n   */\n  async dropCollection(name: string, options?: DropCollectionOptions): Promise<boolean> {\n    return await executeOperation(\n      this.client,\n      new DropCollectionOperation(this, name, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Drop a database, removing it permanently from the server.\n   *\n   * @param options - Optional settings for the command\n   */\n  async dropDatabase(options?: DropDatabaseOptions): Promise<boolean> {\n    return await executeOperation(\n      this.client,\n      new DropDatabaseOperation(this, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Fetch all collections for the current db.\n   *\n   * @param options - Optional settings for the command\n   */\n  async collections(options?: ListCollectionsOptions): Promise<Collection[]> {\n    return await executeOperation(\n      this.client,\n      new CollectionsOperation(this, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Creates an index on the db and collection.\n   *\n   * @param name - Name of the collection to create the index on.\n   * @param indexSpec - Specify the field to index, or an index specification\n   * @param options - Optional settings for the command\n   */\n  async createIndex(\n    name: string,\n    indexSpec: IndexSpecification,\n    options?: CreateIndexesOptions\n  ): Promise<string> {\n    const indexes = await executeOperation(\n      this.client,\n      CreateIndexesOperation.fromIndexSpecification(this, name, indexSpec, options)\n    );\n    return indexes[0];\n  }\n\n  /**\n   * Remove a user from a database\n   *\n   * @param username - The username to remove\n   * @param options - Optional settings for the command\n   */\n  async removeUser(username: string, options?: RemoveUserOptions): Promise<boolean> {\n    return await executeOperation(\n      this.client,\n      new RemoveUserOperation(this, username, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Set the current profiling level of MongoDB\n   *\n   * @param level - The new profiling level (off, slow_only, all).\n   * @param options - Optional settings for the command\n   */\n  async setProfilingLevel(\n    level: ProfilingLevel,\n    options?: SetProfilingLevelOptions\n  ): Promise<ProfilingLevel> {\n    return await executeOperation(\n      this.client,\n      new SetProfilingLevelOperation(this, level, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Retrieve the current profiling Level for MongoDB\n   *\n   * @param options - Optional settings for the command\n   */\n  async profilingLevel(options?: ProfilingLevelOptions): Promise<string> {\n    return await executeOperation(\n      this.client,\n      new ProfilingLevelOperation(this, resolveOptions(this, options))\n    );\n  }\n\n  /**\n   * Retrieves this collections index info.\n   *\n   * @param name - The name of the collection.\n   * @param options - Optional settings for the command\n   */\n  indexInformation(\n    name: string,\n    options: IndexInformationOptions & { full: true }\n  ): Promise<IndexDescriptionInfo[]>;\n  indexInformation(\n    name: string,\n    options: IndexInformationOptions & { full?: false }\n  ): Promise<IndexDescriptionCompact>;\n  indexInformation(\n    name: string,\n    options: IndexInformationOptions\n  ): Promise<IndexDescriptionCompact | IndexDescriptionInfo[]>;\n  indexInformation(name: string): Promise<IndexDescriptionCompact>;\n  async indexInformation(\n    name: string,\n    options?: IndexInformationOptions\n  ): Promise<IndexDescriptionCompact | IndexDescriptionInfo[]> {\n    return await this.collection(name).indexInformation(resolveOptions(this, options));\n  }\n\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates,\n   * replacements, deletions, and invalidations) in this database. Will ignore all\n   * changes to system collections.\n   *\n   * @remarks\n   * watch() accepts two generic arguments for distinct use cases:\n   * - The first is to provide the schema that may be defined for all the collections within this database\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n   *\n   * @remarks\n   * When `timeoutMS` is configured for a change stream, it will have different behaviour depending\n   * on whether the change stream is in iterator mode or emitter mode. In both cases, a change\n   * stream will time out if it does not receive a change event within `timeoutMS` of the last change\n   * event.\n   *\n   * Note that if a change stream is consistently timing out when watching a collection, database or\n   * client that is being changed, then this may be due to the server timing out before it can finish\n   * processing the existing oplog. To address this, restart the change stream with a higher\n   * `timeoutMS`.\n   *\n   * If the change stream times out the initial aggregate operation to establish the change stream on\n   * the server, then the client will close the change stream. If the getMore calls to the server\n   * time out, then the change stream will be left open, but will throw a MongoOperationTimeoutError\n   * when in iterator mode and emit an error event that returns a MongoOperationTimeoutError in\n   * emitter mode.\n   *\n   * To determine whether or not the change stream is still open following a timeout, check the\n   * {@link ChangeStream.closed} getter.\n   *\n   * @example\n   * In iterator mode, if a next() call throws a timeout error, it will attempt to resume the change stream.\n   * The next call can just be retried after this succeeds.\n   * ```ts\n   * const changeStream = collection.watch([], { timeoutMS: 100 });\n   * try {\n   *     await changeStream.next();\n   * } catch (e) {\n   *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n   *       await changeStream.next();\n   *     }\n   *     throw e;\n   * }\n   * ```\n   *\n   * @example\n   * In emitter mode, if the change stream goes `timeoutMS` without emitting a change event, it will\n   * emit an error event that returns a MongoOperationTimeoutError, but will not close the change\n   * stream unless the resume attempt fails. There is no need to re-establish change listeners as\n   * this will automatically continue emitting change events once the resume attempt completes.\n   *\n   * ```ts\n   * const changeStream = collection.watch([], { timeoutMS: 100 });\n   * changeStream.on('change', console.log);\n   * changeStream.on('error', e => {\n   *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n   *         // do nothing\n   *     } else {\n   *         changeStream.close();\n   *     }\n   * });\n   * ```\n   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   * @typeParam TSchema - Type of the data being detected by the change stream\n   * @typeParam TChange - Type of the whole change stream document emitted\n   */\n  watch<\n    TSchema extends Document = Document,\n    TChange extends Document = ChangeStreamDocument<TSchema>\n  >(pipeline: Document[] = [], options: ChangeStreamOptions = {}): ChangeStream<TSchema, TChange> {\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n\n    return new ChangeStream<TSchema, TChange>(this, pipeline, resolveOptions(this, options));\n  }\n\n  /**\n   * A low level cursor API providing basic driver functionality:\n   * - ClientSession management\n   * - ReadPreference for server selection\n   * - Running getMores automatically when a local batch is exhausted\n   *\n   * @param command - The command that will start a cursor on the server.\n   * @param options - Configurations for running the command, bson options will apply to getMores\n   */\n  runCursorCommand(command: Document, options?: RunCursorCommandOptions): RunCommandCursor {\n    return new RunCommandCursor(this, command, options);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}