{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/glebch/workprojects/baumna/client/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.kDispose = exports.randomBytes = exports.COSMOS_DB_MSG = exports.DOCUMENT_DB_MSG = exports.COSMOS_DB_CHECK = exports.DOCUMENT_DB_CHECK = exports.MONGODB_WARNING_CODE = exports.DEFAULT_PK_FACTORY = exports.HostAddress = exports.BufferPool = exports.List = exports.MongoDBCollectionNamespace = exports.MongoDBNamespace = exports.ByteUtils = void 0;\nexports.isUint8Array = isUint8Array;\nexports.hostMatchesWildcards = hostMatchesWildcards;\nexports.normalizeHintField = normalizeHintField;\nexports.isObject = isObject;\nexports.mergeOptions = mergeOptions;\nexports.filterOptions = filterOptions;\nexports.applyRetryableWrites = applyRetryableWrites;\nexports.isPromiseLike = isPromiseLike;\nexports.decorateWithCollation = decorateWithCollation;\nexports.decorateWithReadConcern = decorateWithReadConcern;\nexports.getTopology = getTopology;\nexports.ns = ns;\nexports.makeCounter = makeCounter;\nexports.uuidV4 = uuidV4;\nexports.maxWireVersion = maxWireVersion;\nexports.arrayStrictEqual = arrayStrictEqual;\nexports.errorStrictEqual = errorStrictEqual;\nexports.makeStateMachine = makeStateMachine;\nexports.now = now;\nexports.calculateDurationInMs = calculateDurationInMs;\nexports.hasAtomicOperators = hasAtomicOperators;\nexports.resolveTimeoutOptions = resolveTimeoutOptions;\nexports.resolveOptions = resolveOptions;\nexports.isSuperset = isSuperset;\nexports.isHello = isHello;\nexports.setDifference = setDifference;\nexports.isRecord = isRecord;\nexports.emitWarning = emitWarning;\nexports.emitWarningOnce = emitWarningOnce;\nexports.enumToString = enumToString;\nexports.supportsRetryableWrites = supportsRetryableWrites;\nexports.shuffle = shuffle;\nexports.commandSupportsReadConcern = commandSupportsReadConcern;\nexports.compareObjectId = compareObjectId;\nexports.parseInteger = parseInteger;\nexports.parseUnsignedInteger = parseUnsignedInteger;\nexports.checkParentDomainMatch = checkParentDomainMatch;\nexports.get = get;\nexports.request = request;\nexports.isHostMatch = isHostMatch;\nexports.promiseWithResolvers = promiseWithResolvers;\nexports.squashError = squashError;\nexports.once = once;\nexports.maybeAddIdToDocuments = maybeAddIdToDocuments;\nexports.fileIsAccessible = fileIsAccessible;\nexports.csotMin = csotMin;\nexports.noop = noop;\nexports.decorateDecryptionResult = decorateDecryptionResult;\nexports.addAbortListener = addAbortListener;\nexports.abortable = abortable;\nconst crypto = require(\"crypto\");\nconst fs_1 = require(\"fs\");\nconst http = require(\"http\");\nconst timers_1 = require(\"timers\");\nconst url = require(\"url\");\nconst url_1 = require(\"url\");\nconst util_1 = require(\"util\");\nconst bson_1 = require(\"./bson\");\nconst constants_1 = require(\"./cmap/wire_protocol/constants\");\nconst constants_2 = require(\"./constants\");\nconst error_1 = require(\"./error\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst common_1 = require(\"./sdam/common\");\nconst write_concern_1 = require(\"./write_concern\");\nexports.ByteUtils = {\n  toLocalBufferType(buffer) {\n    return Buffer.isBuffer(buffer) ? buffer : Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n  },\n  equals(seqA, seqB) {\n    return exports.ByteUtils.toLocalBufferType(seqA).equals(seqB);\n  },\n  compare(seqA, seqB) {\n    return exports.ByteUtils.toLocalBufferType(seqA).compare(seqB);\n  },\n  toBase64(uint8array) {\n    return exports.ByteUtils.toLocalBufferType(uint8array).toString('base64');\n  }\n};\n/**\n * Returns true if value is a Uint8Array or a Buffer\n * @param value - any value that may be a Uint8Array\n */\nfunction isUint8Array(value) {\n  return value != null && typeof value === 'object' && Symbol.toStringTag in value && value[Symbol.toStringTag] === 'Uint8Array';\n}\n/**\n * Determines if a connection's address matches a user provided list\n * of domain wildcards.\n */\nfunction hostMatchesWildcards(host, wildcards) {\n  for (const wildcard of wildcards) {\n    if (host === wildcard || wildcard.startsWith('*.') && host !== null && host !== void 0 && host.endsWith(wildcard.substring(2, wildcard.length)) || wildcard.startsWith('*/') && host !== null && host !== void 0 && host.endsWith(wildcard.substring(2, wildcard.length))) {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */\nfunction normalizeHintField(hint) {\n  let finalHint = undefined;\n  if (typeof hint === 'string') {\n    finalHint = hint;\n  } else if (Array.isArray(hint)) {\n    finalHint = {};\n    hint.forEach(param => {\n      finalHint[param] = 1;\n    });\n  } else if (hint != null && typeof hint === 'object') {\n    finalHint = {};\n    for (const name in hint) {\n      finalHint[name] = hint[name];\n    }\n  }\n  return finalHint;\n}\nconst TO_STRING = object => Object.prototype.toString.call(object);\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */\nfunction isObject(arg) {\n  return '[object Object]' === TO_STRING(arg);\n}\n/** @internal */\nfunction mergeOptions(target, source) {\n  return _objectSpread(_objectSpread({}, target), source);\n}\n/** @internal */\nfunction filterOptions(options, names) {\n  const filterOptions = {};\n  for (const name in options) {\n    if (names.includes(name)) {\n      filterOptions[name] = options[name];\n    }\n  }\n  // Filtered options\n  return filterOptions;\n}\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */\nfunction applyRetryableWrites(target, db) {\n  var _db$s$options;\n  if (db && (_db$s$options = db.s.options) !== null && _db$s$options !== void 0 && _db$s$options.retryWrites) {\n    target.retryWrites = true;\n  }\n  return target;\n}\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */\n/**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The resolution type of the possible promise\n * @param value - An object that could be a promise\n * @returns true if the provided value is a Promise\n */\nfunction isPromiseLike(value) {\n  return value != null && typeof value === 'object' && 'then' in value && typeof value.then === 'function';\n}\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */\nfunction decorateWithCollation(command, target, options) {\n  const capabilities = getTopology(target).capabilities;\n  if (options.collation && typeof options.collation === 'object') {\n    if (capabilities && capabilities.commandsTakeCollation) {\n      command.collation = options.collation;\n    } else {\n      throw new error_1.MongoCompatibilityError(\"Current topology does not support collation\");\n    }\n  }\n}\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */\nfunction decorateWithReadConcern(command, coll, options) {\n  if (options && options.session && options.session.inTransaction()) {\n    return;\n  }\n  const readConcern = Object.assign({}, command.readConcern || {});\n  if (coll.s.readConcern) {\n    Object.assign(readConcern, coll.s.readConcern);\n  }\n  if (Object.keys(readConcern).length > 0) {\n    Object.assign(command, {\n      readConcern: readConcern\n    });\n  }\n}\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @throws MongoNotConnectedError\n * @internal\n */\nfunction getTopology(provider) {\n  // MongoClient or ClientSession or AbstractCursor\n  if ('topology' in provider && provider.topology) {\n    return provider.topology;\n  } else if ('client' in provider && provider.client.topology) {\n    return provider.client.topology;\n  }\n  throw new error_1.MongoNotConnectedError('MongoClient must be connected to perform this operation');\n}\n/** @internal */\nfunction ns(ns) {\n  return MongoDBNamespace.fromString(ns);\n}\n/** @public */\nclass MongoDBNamespace {\n  /**\n   * Create a namespace object\n   *\n   * @param db - database name\n   * @param collection - collection name\n   */\n  constructor(db, collection) {\n    this.db = db;\n    this.collection = collection;\n    this.collection = collection === '' ? undefined : collection;\n  }\n  toString() {\n    return this.collection ? \"\".concat(this.db, \".\").concat(this.collection) : this.db;\n  }\n  withCollection(collection) {\n    return new MongoDBCollectionNamespace(this.db, collection);\n  }\n  static fromString(namespace) {\n    if (typeof namespace !== 'string' || namespace === '') {\n      // TODO(NODE-3483): Replace with MongoNamespaceError\n      throw new error_1.MongoRuntimeError(\"Cannot parse namespace from \\\"\".concat(namespace, \"\\\"\"));\n    }\n    const [db, ...collectionParts] = namespace.split('.');\n    const collection = collectionParts.join('.');\n    return new MongoDBNamespace(db, collection === '' ? undefined : collection);\n  }\n}\nexports.MongoDBNamespace = MongoDBNamespace;\n/**\n * @public\n *\n * A class representing a collection's namespace.  This class enforces (through Typescript) that\n * the `collection` portion of the namespace is defined and should only be\n * used in scenarios where this can be guaranteed.\n */\nclass MongoDBCollectionNamespace extends MongoDBNamespace {\n  constructor(db, collection) {\n    super(db, collection);\n    this.collection = collection;\n  }\n  static fromString(namespace) {\n    return super.fromString(namespace);\n  }\n}\nexports.MongoDBCollectionNamespace = MongoDBCollectionNamespace;\n/** @internal */\nfunction makeCounter() {\n  let seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return function* () {\n    let count = seed;\n    while (true) {\n      const newCount = count;\n      count += 1;\n      yield newCount;\n    }\n  }();\n}\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */\nfunction uuidV4() {\n  const result = crypto.randomBytes(16);\n  result[6] = result[6] & 0x0f | 0x40;\n  result[8] = result[8] & 0x3f | 0x80;\n  return result;\n}\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */\nfunction maxWireVersion(topologyOrServer) {\n  if (topologyOrServer) {\n    var _topologyOrServer$ser;\n    if (topologyOrServer.loadBalanced || (_topologyOrServer$ser = topologyOrServer.serverApi) !== null && _topologyOrServer$ser !== void 0 && _topologyOrServer$ser.version) {\n      // Since we do not have a monitor in the load balanced mode,\n      // we assume the load-balanced server is always pointed at the latest mongodb version.\n      // There is a risk that for on-prem deployments\n      // that don't upgrade immediately that this could alert to the\n      // application that a feature is available that is actually not.\n      // We also return the max supported wire version for serverAPI.\n      return constants_1.MAX_SUPPORTED_WIRE_VERSION;\n    }\n    if (topologyOrServer.hello) {\n      return topologyOrServer.hello.maxWireVersion;\n    }\n    if ('lastHello' in topologyOrServer && typeof topologyOrServer.lastHello === 'function') {\n      const lastHello = topologyOrServer.lastHello();\n      if (lastHello) {\n        return lastHello.maxWireVersion;\n      }\n    }\n    if (topologyOrServer.description && 'maxWireVersion' in topologyOrServer.description && topologyOrServer.description.maxWireVersion != null) {\n      return topologyOrServer.description.maxWireVersion;\n    }\n  }\n  return 0;\n}\n/** @internal */\nfunction arrayStrictEqual(arr, arr2) {\n  if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n    return false;\n  }\n  return arr.length === arr2.length && arr.every((elt, idx) => elt === arr2[idx]);\n}\n/** @internal */\nfunction errorStrictEqual(lhs, rhs) {\n  if (lhs === rhs) {\n    return true;\n  }\n  if (!lhs || !rhs) {\n    return lhs === rhs;\n  }\n  if (lhs == null && rhs != null || lhs != null && rhs == null) {\n    return false;\n  }\n  if (lhs.constructor.name !== rhs.constructor.name) {\n    return false;\n  }\n  if (lhs.message !== rhs.message) {\n    return false;\n  }\n  return true;\n}\n/** @internal */\nfunction makeStateMachine(stateTable) {\n  return function stateTransition(target, newState) {\n    const legalStates = stateTable[target.s.state];\n    if (legalStates && legalStates.indexOf(newState) < 0) {\n      throw new error_1.MongoRuntimeError(\"illegal state transition from [\".concat(target.s.state, \"] => [\").concat(newState, \"], allowed: [\").concat(legalStates, \"]\"));\n    }\n    target.emit('stateChanged', target.s.state, newState);\n    target.s.state = newState;\n  };\n}\n/** @internal */\nfunction now() {\n  const hrtime = process.hrtime();\n  return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\n/** @internal */\nfunction calculateDurationInMs(started) {\n  if (typeof started !== 'number') {\n    return -1;\n  }\n  const elapsed = now() - started;\n  return elapsed < 0 ? 0 : elapsed;\n}\n/** @internal */\nfunction hasAtomicOperators(doc) {\n  if (Array.isArray(doc)) {\n    for (const document of doc) {\n      if (hasAtomicOperators(document)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  const keys = Object.keys(doc);\n  return keys.length > 0 && keys[0][0] === '$';\n}\nfunction resolveTimeoutOptions(client, options) {\n  const {\n    socketTimeoutMS,\n    serverSelectionTimeoutMS,\n    waitQueueTimeoutMS,\n    timeoutMS\n  } = client.s.options;\n  return _objectSpread({\n    socketTimeoutMS,\n    serverSelectionTimeoutMS,\n    waitQueueTimeoutMS,\n    timeoutMS\n  }, options);\n}\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n *\n * @param parent - An optional owning class of the operation being run. ex. Db/Collection/MongoClient.\n * @param options - The options passed to the operation method.\n *\n * @internal\n */\nfunction resolveOptions(parent, options) {\n  var _options$timeoutMS, _read_preference_1$Re;\n  const result = Object.assign({}, options, (0, bson_1.resolveBSONOptions)(options, parent));\n  const timeoutMS = (_options$timeoutMS = options === null || options === void 0 ? void 0 : options.timeoutMS) !== null && _options$timeoutMS !== void 0 ? _options$timeoutMS : parent === null || parent === void 0 ? void 0 : parent.timeoutMS;\n  // Users cannot pass a readConcern/writeConcern to operations in a transaction\n  const session = options === null || options === void 0 ? void 0 : options.session;\n  if (!(session !== null && session !== void 0 && session.inTransaction())) {\n    var _read_concern_1$ReadC, _write_concern_1$Writ;\n    const readConcern = (_read_concern_1$ReadC = read_concern_1.ReadConcern.fromOptions(options)) !== null && _read_concern_1$ReadC !== void 0 ? _read_concern_1$ReadC : parent === null || parent === void 0 ? void 0 : parent.readConcern;\n    if (readConcern) {\n      result.readConcern = readConcern;\n    }\n    let writeConcern = (_write_concern_1$Writ = write_concern_1.WriteConcern.fromOptions(options)) !== null && _write_concern_1$Writ !== void 0 ? _write_concern_1$Writ : parent === null || parent === void 0 ? void 0 : parent.writeConcern;\n    if (writeConcern) {\n      if (timeoutMS != null) {\n        writeConcern = write_concern_1.WriteConcern.fromOptions(_objectSpread(_objectSpread({}, writeConcern), {}, {\n          wtimeout: undefined,\n          wtimeoutMS: undefined\n        }));\n      }\n      result.writeConcern = writeConcern;\n    }\n  }\n  result.timeoutMS = timeoutMS;\n  const readPreference = (_read_preference_1$Re = read_preference_1.ReadPreference.fromOptions(options)) !== null && _read_preference_1$Re !== void 0 ? _read_preference_1$Re : parent === null || parent === void 0 ? void 0 : parent.readPreference;\n  if (readPreference) {\n    result.readPreference = readPreference;\n  }\n  const isConvenientTransaction = (session === null || session === void 0 ? void 0 : session.explicit) && (session === null || session === void 0 ? void 0 : session.timeoutContext) != null;\n  if (isConvenientTransaction && (options === null || options === void 0 ? void 0 : options.timeoutMS) != null) {\n    throw new error_1.MongoInvalidArgumentError('An operation cannot be given a timeoutMS setting when inside a withTransaction call that has a timeoutMS setting');\n  }\n  return result;\n}\nfunction isSuperset(set, subset) {\n  set = Array.isArray(set) ? new Set(set) : set;\n  subset = Array.isArray(subset) ? new Set(subset) : subset;\n  for (const elem of subset) {\n    if (!set.has(elem)) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Checks if the document is a Hello request\n * @internal\n */\nfunction isHello(doc) {\n  return doc[constants_2.LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\n/** Returns the items that are uniquely in setA */\nfunction setDifference(setA, setB) {\n  const difference = new Set(setA);\n  for (const elem of setB) {\n    difference.delete(elem);\n  }\n  return difference;\n}\nconst HAS_OWN = (object, prop) => Object.prototype.hasOwnProperty.call(object, prop);\nfunction isRecord(value) {\n  let requiredKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  if (!isObject(value)) {\n    return false;\n  }\n  const ctor = value.constructor;\n  if (ctor && ctor.prototype) {\n    if (!isObject(ctor.prototype)) {\n      return false;\n    }\n    // Check to see if some method exists from the Object exists\n    if (!HAS_OWN(ctor.prototype, 'isPrototypeOf')) {\n      return false;\n    }\n  }\n  if (requiredKeys) {\n    const keys = Object.keys(value);\n    return isSuperset(keys, requiredKeys);\n  }\n  return true;\n}\n/**\n * A sequential list of items in a circularly linked list\n * @remarks\n * The head node is special, it is always defined and has a value of null.\n * It is never \"included\" in the list, in that, it is not returned by pop/shift or yielded by the iterator.\n * The circular linkage and always defined head node are to reduce checks for null next/prev references to zero.\n * New nodes are declared as object literals with keys always in the same order: next, prev, value.\n * @internal\n */\nclass List {\n  get length() {\n    return this.count;\n  }\n  get [Symbol.toStringTag]() {\n    return 'List';\n  }\n  constructor() {\n    this.count = 0;\n    // this is carefully crafted:\n    // declaring a complete and consistently key ordered\n    // object is beneficial to the runtime optimizations\n    this.head = {\n      next: null,\n      prev: null,\n      value: null\n    };\n    this.head.next = this.head;\n    this.head.prev = this.head;\n  }\n  toArray() {\n    return Array.from(this);\n  }\n  toString() {\n    return \"head <=> \".concat(this.toArray().join(' <=> '), \" <=> head\");\n  }\n  *[Symbol.iterator]() {\n    for (const node of this.nodes()) {\n      yield node.value;\n    }\n  }\n  *nodes() {\n    let ptr = this.head.next;\n    while (ptr !== this.head) {\n      // Save next before yielding so that we make removing within iteration safe\n      const {\n        next\n      } = ptr;\n      yield ptr;\n      ptr = next;\n    }\n  }\n  /** Insert at end of list */\n  push(value) {\n    this.count += 1;\n    const newNode = {\n      next: this.head,\n      prev: this.head.prev,\n      value\n    };\n    this.head.prev.next = newNode;\n    this.head.prev = newNode;\n  }\n  /** Inserts every item inside an iterable instead of the iterable itself */\n  pushMany(iterable) {\n    for (const value of iterable) {\n      this.push(value);\n    }\n  }\n  /** Insert at front of list */\n  unshift(value) {\n    this.count += 1;\n    const newNode = {\n      next: this.head.next,\n      prev: this.head,\n      value\n    };\n    this.head.next.prev = newNode;\n    this.head.next = newNode;\n  }\n  remove(node) {\n    if (node === this.head || this.length === 0) {\n      return null;\n    }\n    this.count -= 1;\n    const prevNode = node.prev;\n    const nextNode = node.next;\n    prevNode.next = nextNode;\n    nextNode.prev = prevNode;\n    return node.value;\n  }\n  /** Removes the first node at the front of the list */\n  shift() {\n    return this.remove(this.head.next);\n  }\n  /** Removes the last node at the end of the list */\n  pop() {\n    return this.remove(this.head.prev);\n  }\n  /** Iterates through the list and removes nodes where filter returns true */\n  prune(filter) {\n    for (const node of this.nodes()) {\n      if (filter(node.value)) {\n        this.remove(node);\n      }\n    }\n  }\n  clear() {\n    this.count = 0;\n    this.head.next = this.head;\n    this.head.prev = this.head;\n  }\n  /** Returns the first item in the list, does not remove */\n  first() {\n    // If the list is empty, value will be the head's null\n    return this.head.next.value;\n  }\n  /** Returns the last item in the list, does not remove */\n  last() {\n    // If the list is empty, value will be the head's null\n    return this.head.prev.value;\n  }\n}\nexports.List = List;\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */\nclass BufferPool {\n  constructor() {\n    this.buffers = new List();\n    this.totalByteLength = 0;\n  }\n  get length() {\n    return this.totalByteLength;\n  }\n  /** Adds a buffer to the internal buffer pool list */\n  append(buffer) {\n    this.buffers.push(buffer);\n    this.totalByteLength += buffer.length;\n  }\n  /**\n   * If BufferPool contains 4 bytes or more construct an int32 from the leading bytes,\n   * otherwise return null. Size can be negative, caller should error check.\n   */\n  getInt32() {\n    if (this.totalByteLength < 4) {\n      return null;\n    }\n    const firstBuffer = this.buffers.first();\n    if (firstBuffer != null && firstBuffer.byteLength >= 4) {\n      return firstBuffer.readInt32LE(0);\n    }\n    // Unlikely case: an int32 is split across buffers.\n    // Use read and put the returned buffer back on top\n    const top4Bytes = this.read(4);\n    const value = top4Bytes.readInt32LE(0);\n    // Put it back.\n    this.totalByteLength += 4;\n    this.buffers.unshift(top4Bytes);\n    return value;\n  }\n  /** Reads the requested number of bytes, optionally consuming them */\n  read(size) {\n    if (typeof size !== 'number' || size < 0) {\n      throw new error_1.MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n    }\n    // oversized request returns empty buffer\n    if (size > this.totalByteLength) {\n      return Buffer.alloc(0);\n    }\n    // We know we have enough, we just don't know how it is spread across chunks\n    // TODO(NODE-4732): alloc API should change based on raw option\n    const result = Buffer.allocUnsafe(size);\n    for (let bytesRead = 0; bytesRead < size;) {\n      const buffer = this.buffers.shift();\n      if (buffer == null) {\n        break;\n      }\n      const bytesRemaining = size - bytesRead;\n      const bytesReadable = Math.min(bytesRemaining, buffer.byteLength);\n      const bytes = buffer.subarray(0, bytesReadable);\n      result.set(bytes, bytesRead);\n      bytesRead += bytesReadable;\n      this.totalByteLength -= bytesReadable;\n      if (bytesReadable < buffer.byteLength) {\n        this.buffers.unshift(buffer.subarray(bytesReadable));\n      }\n    }\n    return result;\n  }\n}\nexports.BufferPool = BufferPool;\n/** @public */\nclass HostAddress {\n  constructor(hostString) {\n    this.host = undefined;\n    this.port = undefined;\n    this.socketPath = undefined;\n    this.isIPv6 = false;\n    const escapedHost = hostString.split(' ').join('%20'); // escape spaces, for socket path hosts\n    if (escapedHost.endsWith('.sock')) {\n      // heuristically determine if we're working with a domain socket\n      this.socketPath = decodeURIComponent(escapedHost);\n      return;\n    }\n    const urlString = \"iLoveJS://\".concat(escapedHost);\n    let url;\n    try {\n      url = new url_1.URL(urlString);\n    } catch (urlError) {\n      const runtimeError = new error_1.MongoRuntimeError(\"Unable to parse \".concat(escapedHost, \" with URL\"));\n      runtimeError.cause = urlError;\n      throw runtimeError;\n    }\n    const hostname = url.hostname;\n    const port = url.port;\n    let normalized = decodeURIComponent(hostname).toLowerCase();\n    if (normalized.startsWith('[') && normalized.endsWith(']')) {\n      this.isIPv6 = true;\n      normalized = normalized.substring(1, hostname.length - 1);\n    }\n    this.host = normalized.toLowerCase();\n    if (typeof port === 'number') {\n      this.port = port;\n    } else if (typeof port === 'string' && port !== '') {\n      this.port = Number.parseInt(port, 10);\n    } else {\n      this.port = 27017;\n    }\n    if (this.port === 0) {\n      throw new error_1.MongoParseError('Invalid port (zero) with hostname');\n    }\n    Object.freeze(this);\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.inspect();\n  }\n  inspect() {\n    return \"new HostAddress('\".concat(this.toString(), \"')\");\n  }\n  toString() {\n    if (typeof this.host === 'string') {\n      if (this.isIPv6) {\n        return \"[\".concat(this.host, \"]:\").concat(this.port);\n      }\n      return \"\".concat(this.host, \":\").concat(this.port);\n    }\n    return \"\".concat(this.socketPath);\n  }\n  static fromString(s) {\n    return new HostAddress(s);\n  }\n  static fromHostPort(host, port) {\n    if (host.includes(':')) {\n      host = \"[\".concat(host, \"]\"); // IPv6 address\n    }\n    return HostAddress.fromString(\"\".concat(host, \":\").concat(port));\n  }\n  static fromSrvRecord(_ref) {\n    let {\n      name,\n      port\n    } = _ref;\n    return HostAddress.fromHostPort(name, port);\n  }\n  toHostPort() {\n    var _this$host, _this$port;\n    if (this.socketPath) {\n      return {\n        host: this.socketPath,\n        port: 0\n      };\n    }\n    const host = (_this$host = this.host) !== null && _this$host !== void 0 ? _this$host : '';\n    const port = (_this$port = this.port) !== null && _this$port !== void 0 ? _this$port : 0;\n    return {\n      host,\n      port\n    };\n  }\n}\nexports.HostAddress = HostAddress;\nexports.DEFAULT_PK_FACTORY = {\n  // We prefer not to rely on ObjectId having a createPk method\n  createPk() {\n    return new bson_1.ObjectId();\n  }\n};\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```ts\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */\nexports.MONGODB_WARNING_CODE = 'MONGODB DRIVER';\n/** @internal */\nfunction emitWarning(message) {\n  return process.emitWarning(message, {\n    code: exports.MONGODB_WARNING_CODE\n  });\n}\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */\nfunction emitWarningOnce(message) {\n  if (!emittedWarnings.has(message)) {\n    emittedWarnings.add(message);\n    return emitWarning(message);\n  }\n}\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */\nfunction enumToString(en) {\n  return Object.values(en).join(', ');\n}\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */\nfunction supportsRetryableWrites(server) {\n  if (!server) {\n    return false;\n  }\n  if (server.loadBalanced) {\n    // Loadbalanced topologies will always support retry writes\n    return true;\n  }\n  if (server.description.logicalSessionTimeoutMinutes != null) {\n    // that supports sessions\n    if (server.description.type !== common_1.ServerType.Standalone) {\n      // and that is not a standalone\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */\nfunction shuffle(sequence) {\n  let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n  if (limit > items.length) {\n    throw new error_1.MongoRuntimeError('Limit must be less than the number of items');\n  }\n  let remainingItemsToShuffle = items.length;\n  const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n  while (remainingItemsToShuffle > lowerBound) {\n    // Pick a remaining element\n    const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n    remainingItemsToShuffle -= 1;\n    // And swap it with the current element\n    const swapHold = items[remainingItemsToShuffle];\n    items[remainingItemsToShuffle] = items[randomIndex];\n    items[randomIndex] = swapHold;\n  }\n  return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\n/**\n * TODO(NODE-4936): read concern eligibility for commands should be codified in command construction\n * @internal\n * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.md#read-concern\n */\nfunction commandSupportsReadConcern(command) {\n  if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n    return true;\n  }\n  return false;\n}\n/**\n * Compare objectIds. `null` is always less\n * - `+1 = oid1 is greater than oid2`\n * - `-1 = oid1 is less than oid2`\n * - `+0 = oid1 is equal oid2`\n */\nfunction compareObjectId(oid1, oid2) {\n  if (oid1 == null && oid2 == null) {\n    return 0;\n  }\n  if (oid1 == null) {\n    return -1;\n  }\n  if (oid2 == null) {\n    return 1;\n  }\n  return exports.ByteUtils.compare(oid1.id, oid2.id);\n}\nfunction parseInteger(value) {\n  if (typeof value === 'number') return Math.trunc(value);\n  const parsedValue = Number.parseInt(String(value), 10);\n  return Number.isNaN(parsedValue) ? null : parsedValue;\n}\nfunction parseUnsignedInteger(value) {\n  const parsedInt = parseInteger(value);\n  return parsedInt != null && parsedInt >= 0 ? parsedInt : null;\n}\n/**\n * This function throws a MongoAPIError in the event that either of the following is true:\n * * If the provided address domain does not match the provided parent domain\n * * If the parent domain contains less than three `.` separated parts and the provided address does not contain at least one more domain level than its parent\n *\n * If a DNS server were to become compromised SRV records would still need to\n * advertise addresses that are under the same domain as the srvHost.\n *\n * @param address - The address to check against a domain\n * @param srvHost - The domain to check the provided address against\n * @returns void\n */\nfunction checkParentDomainMatch(address, srvHost) {\n  // Remove trailing dot if exists on either the resolved address or the srv hostname\n  const normalizedAddress = address.endsWith('.') ? address.slice(0, address.length - 1) : address;\n  const normalizedSrvHost = srvHost.endsWith('.') ? srvHost.slice(0, srvHost.length - 1) : srvHost;\n  const allCharacterBeforeFirstDot = /^.*?\\./;\n  const srvIsLessThanThreeParts = normalizedSrvHost.split('.').length < 3;\n  // Remove all characters before first dot\n  // Add leading dot back to string so\n  //   an srvHostDomain = '.trusted.site'\n  //   will not satisfy an addressDomain that endsWith '.fake-trusted.site'\n  const addressDomain = \".\".concat(normalizedAddress.replace(allCharacterBeforeFirstDot, ''));\n  let srvHostDomain = srvIsLessThanThreeParts ? normalizedSrvHost : \".\".concat(normalizedSrvHost.replace(allCharacterBeforeFirstDot, ''));\n  if (!srvHostDomain.startsWith('.')) {\n    srvHostDomain = '.' + srvHostDomain;\n  }\n  if (srvIsLessThanThreeParts && normalizedAddress.split('.').length <= normalizedSrvHost.split('.').length) {\n    throw new error_1.MongoAPIError('Server record does not have at least one more domain level than parent URI');\n  }\n  if (!addressDomain.endsWith(srvHostDomain)) {\n    throw new error_1.MongoAPIError('Server record does not share hostname with parent URI');\n  }\n}\n/**\n * Perform a get request that returns status and body.\n * @internal\n */\nfunction get(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise((resolve, reject) => {\n    /* eslint-disable prefer-const */\n    let timeoutId;\n    const request = http.get(url, options, response => {\n      response.setEncoding('utf8');\n      let body = '';\n      response.on('data', chunk => body += chunk);\n      response.on('end', () => {\n        (0, timers_1.clearTimeout)(timeoutId);\n        resolve({\n          status: response.statusCode,\n          body\n        });\n      });\n    }).on('error', error => {\n      (0, timers_1.clearTimeout)(timeoutId);\n      reject(error);\n    }).end();\n    timeoutId = (0, timers_1.setTimeout)(() => {\n      request.destroy(new error_1.MongoNetworkTimeoutError(\"request timed out after 10 seconds\"));\n    }, 10000);\n  });\n}\nasync function request(uri) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return await new Promise((resolve, reject) => {\n    const requestOptions = _objectSpread(_objectSpread({\n      method: 'GET',\n      timeout: 10000,\n      json: true\n    }, url.parse(uri)), options);\n    const req = http.request(requestOptions, res => {\n      res.setEncoding('utf8');\n      let data = '';\n      res.on('data', d => {\n        data += d;\n      });\n      res.once('end', () => {\n        if (options.json === false) {\n          resolve(data);\n          return;\n        }\n        try {\n          const parsed = JSON.parse(data);\n          resolve(parsed);\n        } catch (_unused) {\n          // TODO(NODE-3483)\n          reject(new error_1.MongoRuntimeError(\"Invalid JSON response: \\\"\".concat(data, \"\\\"\")));\n        }\n      });\n    });\n    req.once('timeout', () => req.destroy(new error_1.MongoNetworkTimeoutError(\"Network request to \".concat(uri, \" timed out after \").concat(options.timeout, \" ms\"))));\n    req.once('error', error => reject(error));\n    req.end();\n  });\n}\n/** @internal */\nexports.DOCUMENT_DB_CHECK = /(\\.docdb\\.amazonaws\\.com$)|(\\.docdb-elastic\\.amazonaws\\.com$)/;\n/** @internal */\nexports.COSMOS_DB_CHECK = /\\.cosmos\\.azure\\.com$/;\n/** @internal */\nexports.DOCUMENT_DB_MSG = 'You appear to be connected to a DocumentDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/documentdb';\n/** @internal */\nexports.COSMOS_DB_MSG = 'You appear to be connected to a CosmosDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/cosmosdb';\n/** @internal */\nfunction isHostMatch(match, host) {\n  return host && match.test(host.toLowerCase()) ? true : false;\n}\nfunction promiseWithResolvers() {\n  let resolve;\n  let reject;\n  const promise = new Promise(function withResolversExecutor(promiseResolve, promiseReject) {\n    resolve = promiseResolve;\n    reject = promiseReject;\n  });\n  return {\n    promise,\n    resolve,\n    reject\n  };\n}\n/**\n * A noop function intended for use in preventing unhandled rejections.\n *\n * @example\n * ```js\n * const promise = myAsyncTask();\n * // eslint-disable-next-line github/no-then\n * promise.then(undefined, squashError);\n * ```\n */\nfunction squashError(_error) {\n  return;\n}\nexports.randomBytes = (0, util_1.promisify)(crypto.randomBytes);\n/**\n * Replicates the events.once helper.\n *\n * Removes unused signal logic and It **only** supports 0 or 1 argument events.\n *\n * @param ee - An event emitter that may emit `ev`\n * @param name - An event name to wait for\n */\nasync function once(ee, name, options) {\n  var _options$signal;\n  options === null || options === void 0 || (_options$signal = options.signal) === null || _options$signal === void 0 || _options$signal.throwIfAborted();\n  const {\n    promise,\n    resolve,\n    reject\n  } = promiseWithResolvers();\n  const onEvent = data => resolve(data);\n  const onError = error => reject(error);\n  const abortListener = addAbortListener(options === null || options === void 0 ? void 0 : options.signal, function () {\n    reject(this.reason);\n  });\n  ee.once(name, onEvent).once('error', onError);\n  try {\n    return await promise;\n  } finally {\n    ee.off(name, onEvent);\n    ee.off('error', onError);\n    abortListener === null || abortListener === void 0 || abortListener[exports.kDispose]();\n  }\n}\nfunction maybeAddIdToDocuments(coll, docOrDocs, options) {\n  var _coll$s$db$options;\n  const forceServerObjectId = typeof options.forceServerObjectId === 'boolean' ? options.forceServerObjectId : (_coll$s$db$options = coll.s.db.options) === null || _coll$s$db$options === void 0 ? void 0 : _coll$s$db$options.forceServerObjectId;\n  // no need to modify the docs if server sets the ObjectId\n  if (forceServerObjectId === true) {\n    return docOrDocs;\n  }\n  const transform = doc => {\n    if (doc._id == null) {\n      doc._id = coll.s.pkFactory.createPk();\n    }\n    return doc;\n  };\n  return Array.isArray(docOrDocs) ? docOrDocs.map(transform) : transform(docOrDocs);\n}\nasync function fileIsAccessible(fileName, mode) {\n  try {\n    await fs_1.promises.access(fileName, mode);\n    return true;\n  } catch (_unused2) {\n    return false;\n  }\n}\nfunction csotMin(duration1, duration2) {\n  if (duration1 === 0) return duration2;\n  if (duration2 === 0) return duration1;\n  return Math.min(duration1, duration2);\n}\nfunction noop() {\n  return;\n}\n/**\n * Recurse through the (identically-shaped) `decrypted` and `original`\n * objects and attach a `decryptedKeys` property on each sub-object that\n * contained encrypted fields. Because we only call this on BSON responses,\n * we do not need to worry about circular references.\n *\n * @internal\n */\nfunction decorateDecryptionResult(decrypted, original) {\n  let isTopLevelDecorateCall = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (isTopLevelDecorateCall) {\n    // The original value could have been either a JS object or a BSON buffer\n    if (Buffer.isBuffer(original)) {\n      original = (0, bson_1.deserialize)(original);\n    }\n    if (Buffer.isBuffer(decrypted)) {\n      throw new error_1.MongoRuntimeError('Expected result of decryption to be deserialized BSON object');\n    }\n  }\n  if (!decrypted || typeof decrypted !== 'object') return;\n  for (const k of Object.keys(decrypted)) {\n    const originalValue = original[k];\n    // An object was decrypted by libmongocrypt if and only if it was\n    // a BSON Binary object with subtype 6.\n    if (originalValue && originalValue._bsontype === 'Binary' && originalValue.sub_type === 6) {\n      if (!decrypted[constants_2.kDecoratedKeys]) {\n        Object.defineProperty(decrypted, constants_2.kDecoratedKeys, {\n          value: [],\n          configurable: true,\n          enumerable: false,\n          writable: false\n        });\n      }\n      // this is defined in the preceding if-statement\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      decrypted[constants_2.kDecoratedKeys].push(k);\n      // Do not recurse into this decrypted value. It could be a sub-document/array,\n      // in which case there is no original value associated with its subfields.\n      continue;\n    }\n    decorateDecryptionResult(decrypted[k], originalValue, false);\n  }\n}\n/** @internal */\nexports.kDispose = Symbol.dispose !== null && Symbol.dispose !== void 0 ? Symbol.dispose : Symbol('dispose');\n/**\n * A utility that helps with writing listener code idiomatically\n *\n * @example\n * ```js\n * using listener = addAbortListener(signal, function () {\n *   console.log('aborted', this.reason);\n * });\n * ```\n *\n * @param signal - if exists adds an abort listener\n * @param listener - the listener to be added to signal\n * @returns A disposable that will remove the abort listener\n */\nfunction addAbortListener(signal, listener) {\n  if (signal == null) return;\n  signal.addEventListener('abort', listener, {\n    once: true\n  });\n  return {\n    [exports.kDispose]: () => signal.removeEventListener('abort', listener)\n  };\n}\n/**\n * Takes a promise and races it with a promise wrapping the abort event of the optionally provided signal.\n * The given promise is _always_ ordered before the signal's abort promise.\n * When given an already rejected promise and an already aborted signal, the promise's rejection takes precedence.\n *\n * Any asynchronous processing in `promise` will continue even after the abort signal has fired,\n * but control will be returned to the caller\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\n *\n * @param promise - A promise to discard if the signal aborts\n * @param options - An options object carrying an optional signal\n */\nasync function abortable(promise, _ref2) {\n  let {\n    signal\n  } = _ref2;\n  if (signal == null) {\n    return await promise;\n  }\n  const {\n    promise: aborted,\n    reject\n  } = promiseWithResolvers();\n  const abortListener = signal.aborted ? reject(signal.reason) : addAbortListener(signal, function () {\n    reject(this.reason);\n  });\n  try {\n    return await Promise.race([promise, aborted]);\n  } finally {\n    abortListener === null || abortListener === void 0 || abortListener[exports.kDispose]();\n  }\n}","map":{"version":3,"names":["exports","isUint8Array","hostMatchesWildcards","normalizeHintField","isObject","mergeOptions","filterOptions","applyRetryableWrites","isPromiseLike","decorateWithCollation","decorateWithReadConcern","getTopology","ns","makeCounter","uuidV4","maxWireVersion","arrayStrictEqual","errorStrictEqual","makeStateMachine","now","calculateDurationInMs","hasAtomicOperators","resolveTimeoutOptions","resolveOptions","isSuperset","isHello","setDifference","isRecord","emitWarning","emitWarningOnce","enumToString","supportsRetryableWrites","shuffle","commandSupportsReadConcern","compareObjectId","parseInteger","parseUnsignedInteger","checkParentDomainMatch","get","request","isHostMatch","promiseWithResolvers","squashError","once","maybeAddIdToDocuments","fileIsAccessible","csotMin","noop","decorateDecryptionResult","addAbortListener","abortable","crypto","require","fs_1","http","timers_1","url","url_1","util_1","bson_1","constants_1","constants_2","error_1","read_concern_1","read_preference_1","common_1","write_concern_1","ByteUtils","toLocalBufferType","buffer","Buffer","isBuffer","from","byteOffset","byteLength","equals","seqA","seqB","compare","toBase64","uint8array","toString","value","Symbol","toStringTag","host","wildcards","wildcard","startsWith","endsWith","substring","length","hint","finalHint","undefined","Array","isArray","forEach","param","name","TO_STRING","object","Object","prototype","call","arg","target","source","_objectSpread","options","names","includes","db","_db$s$options","s","retryWrites","then","command","capabilities","collation","commandsTakeCollation","MongoCompatibilityError","coll","session","inTransaction","readConcern","assign","keys","provider","topology","client","MongoNotConnectedError","MongoDBNamespace","fromString","constructor","collection","concat","withCollection","MongoDBCollectionNamespace","namespace","MongoRuntimeError","collectionParts","split","join","seed","arguments","count","newCount","result","randomBytes","topologyOrServer","_topologyOrServer$ser","loadBalanced","serverApi","version","MAX_SUPPORTED_WIRE_VERSION","hello","lastHello","description","arr","arr2","every","elt","idx","lhs","rhs","message","stateTable","stateTransition","newState","legalStates","state","indexOf","emit","hrtime","process","Math","floor","started","elapsed","doc","document","socketTimeoutMS","serverSelectionTimeoutMS","waitQueueTimeoutMS","timeoutMS","parent","_options$timeoutMS","_read_preference_1$Re","resolveBSONOptions","_read_concern_1$ReadC","_write_concern_1$Writ","ReadConcern","fromOptions","writeConcern","WriteConcern","wtimeout","wtimeoutMS","readPreference","ReadPreference","isConvenientTransaction","explicit","timeoutContext","MongoInvalidArgumentError","set","subset","Set","elem","has","LEGACY_HELLO_COMMAND","setA","setB","difference","delete","HAS_OWN","prop","hasOwnProperty","requiredKeys","ctor","List","head","next","prev","toArray","iterator","node","nodes","ptr","push","newNode","pushMany","iterable","unshift","remove","prevNode","nextNode","shift","pop","prune","filter","clear","first","last","BufferPool","buffers","totalByteLength","append","getInt32","firstBuffer","readInt32LE","top4Bytes","read","size","alloc","allocUnsafe","bytesRead","bytesRemaining","bytesReadable","min","bytes","subarray","HostAddress","hostString","port","socketPath","isIPv6","escapedHost","decodeURIComponent","urlString","URL","urlError","runtimeError","cause","hostname","normalized","toLowerCase","Number","parseInt","MongoParseError","freeze","for","inspect","fromHostPort","fromSrvRecord","_ref","toHostPort","_this$host","_this$port","DEFAULT_PK_FACTORY","createPk","ObjectId","MONGODB_WARNING_CODE","code","emittedWarnings","add","en","values","server","logicalSessionTimeoutMinutes","type","ServerType","Standalone","sequence","limit","items","remainingItemsToShuffle","lowerBound","randomIndex","random","swapHold","slice","aggregate","distinct","find","geoNear","oid1","oid2","id","trunc","parsedValue","String","isNaN","parsedInt","address","srvHost","normalizedAddress","normalizedSrvHost","allCharacterBeforeFirstDot","srvIsLessThanThreeParts","addressDomain","replace","srvHostDomain","MongoAPIError","Promise","resolve","reject","timeoutId","response","setEncoding","body","on","chunk","clearTimeout","status","statusCode","error","end","setTimeout","destroy","MongoNetworkTimeoutError","uri","requestOptions","method","timeout","json","parse","req","res","data","d","parsed","JSON","_unused","DOCUMENT_DB_CHECK","COSMOS_DB_CHECK","DOCUMENT_DB_MSG","COSMOS_DB_MSG","match","test","promise","withResolversExecutor","promiseResolve","promiseReject","_error","promisify","ee","_options$signal","signal","throwIfAborted","onEvent","onError","abortListener","reason","off","kDispose","docOrDocs","_coll$s$db$options","forceServerObjectId","transform","_id","pkFactory","map","fileName","mode","promises","access","_unused2","duration1","duration2","decrypted","original","isTopLevelDecorateCall","deserialize","k","originalValue","_bsontype","sub_type","kDecoratedKeys","defineProperty","configurable","enumerable","writable","dispose","listener","addEventListener","removeEventListener","_ref2","aborted","race"],"sources":["/Users/glebch/workprojects/baumna/client/node_modules/mongodb/src/utils.ts"],"sourcesContent":["import * as crypto from 'crypto';\nimport type { SrvRecord } from 'dns';\nimport { type EventEmitter } from 'events';\nimport { promises as fs } from 'fs';\nimport * as http from 'http';\nimport { clearTimeout, setTimeout } from 'timers';\nimport * as url from 'url';\nimport { URL } from 'url';\nimport { promisify } from 'util';\n\nimport { deserialize, type Document, ObjectId, resolveBSONOptions } from './bson';\nimport type { Connection } from './cmap/connection';\nimport { MAX_SUPPORTED_WIRE_VERSION } from './cmap/wire_protocol/constants';\nimport type { Collection } from './collection';\nimport { kDecoratedKeys, LEGACY_HELLO_COMMAND } from './constants';\nimport type { AbstractCursor } from './cursor/abstract_cursor';\nimport type { FindCursor } from './cursor/find_cursor';\nimport type { Db } from './db';\nimport {\n  type AnyError,\n  MongoAPIError,\n  MongoCompatibilityError,\n  MongoInvalidArgumentError,\n  MongoNetworkTimeoutError,\n  MongoNotConnectedError,\n  MongoParseError,\n  MongoRuntimeError\n} from './error';\nimport type { MongoClient } from './mongo_client';\nimport { type Abortable } from './mongo_types';\nimport type { CommandOperationOptions, OperationParent } from './operations/command';\nimport type { Hint, OperationOptions } from './operations/operation';\nimport { ReadConcern } from './read_concern';\nimport { ReadPreference } from './read_preference';\nimport { ServerType } from './sdam/common';\nimport type { Server } from './sdam/server';\nimport type { Topology } from './sdam/topology';\nimport type { ClientSession } from './sessions';\nimport { type TimeoutContextOptions } from './timeout';\nimport { WriteConcern } from './write_concern';\n\n/**\n * MongoDB Driver style callback\n * @public\n */\nexport type Callback<T = any> = (error?: AnyError, result?: T) => void;\n\nexport type AnyOptions = Document;\n\nexport const ByteUtils = {\n  toLocalBufferType(this: void, buffer: Buffer | Uint8Array): Buffer {\n    return Buffer.isBuffer(buffer)\n      ? buffer\n      : Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n  },\n\n  equals(this: void, seqA: Uint8Array, seqB: Uint8Array) {\n    return ByteUtils.toLocalBufferType(seqA).equals(seqB);\n  },\n\n  compare(this: void, seqA: Uint8Array, seqB: Uint8Array) {\n    return ByteUtils.toLocalBufferType(seqA).compare(seqB);\n  },\n\n  toBase64(this: void, uint8array: Uint8Array) {\n    return ByteUtils.toLocalBufferType(uint8array).toString('base64');\n  }\n};\n\n/**\n * Returns true if value is a Uint8Array or a Buffer\n * @param value - any value that may be a Uint8Array\n */\nexport function isUint8Array(value: unknown): value is Uint8Array {\n  return (\n    value != null &&\n    typeof value === 'object' &&\n    Symbol.toStringTag in value &&\n    value[Symbol.toStringTag] === 'Uint8Array'\n  );\n}\n\n/**\n * Determines if a connection's address matches a user provided list\n * of domain wildcards.\n */\nexport function hostMatchesWildcards(host: string, wildcards: string[]): boolean {\n  for (const wildcard of wildcards) {\n    if (\n      host === wildcard ||\n      (wildcard.startsWith('*.') && host?.endsWith(wildcard.substring(2, wildcard.length))) ||\n      (wildcard.startsWith('*/') && host?.endsWith(wildcard.substring(2, wildcard.length)))\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */\nexport function normalizeHintField(hint?: Hint): Hint | undefined {\n  let finalHint = undefined;\n\n  if (typeof hint === 'string') {\n    finalHint = hint;\n  } else if (Array.isArray(hint)) {\n    finalHint = {};\n\n    hint.forEach(param => {\n      finalHint[param] = 1;\n    });\n  } else if (hint != null && typeof hint === 'object') {\n    finalHint = {} as Document;\n    for (const name in hint) {\n      finalHint[name] = hint[name];\n    }\n  }\n\n  return finalHint;\n}\n\nconst TO_STRING = (object: unknown) => Object.prototype.toString.call(object);\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */\n\nexport function isObject(arg: unknown): arg is object {\n  return '[object Object]' === TO_STRING(arg);\n}\n\n/** @internal */\nexport function mergeOptions<T, S>(target: T, source: S): T & S {\n  return { ...target, ...source };\n}\n\n/** @internal */\nexport function filterOptions(options: AnyOptions, names: ReadonlyArray<string>): AnyOptions {\n  const filterOptions: AnyOptions = {};\n\n  for (const name in options) {\n    if (names.includes(name)) {\n      filterOptions[name] = options[name];\n    }\n  }\n\n  // Filtered options\n  return filterOptions;\n}\n\ninterface HasRetryableWrites {\n  retryWrites?: boolean;\n}\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */\nexport function applyRetryableWrites<T extends HasRetryableWrites>(target: T, db?: Db): T {\n  if (db && db.s.options?.retryWrites) {\n    target.retryWrites = true;\n  }\n\n  return target;\n}\n\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */\n\n/**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The resolution type of the possible promise\n * @param value - An object that could be a promise\n * @returns true if the provided value is a Promise\n */\nexport function isPromiseLike<T = unknown>(value?: unknown): value is PromiseLike<T> {\n  return (\n    value != null &&\n    typeof value === 'object' &&\n    'then' in value &&\n    typeof value.then === 'function'\n  );\n}\n\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */\nexport function decorateWithCollation(\n  command: Document,\n  target: MongoClient | Db | Collection,\n  options: AnyOptions\n): void {\n  const capabilities = getTopology(target).capabilities;\n  if (options.collation && typeof options.collation === 'object') {\n    if (capabilities && capabilities.commandsTakeCollation) {\n      command.collation = options.collation;\n    } else {\n      throw new MongoCompatibilityError(`Current topology does not support collation`);\n    }\n  }\n}\n\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */\nexport function decorateWithReadConcern(\n  command: Document,\n  coll: { s: { readConcern?: ReadConcern } },\n  options?: OperationOptions\n): void {\n  if (options && options.session && options.session.inTransaction()) {\n    return;\n  }\n  const readConcern = Object.assign({}, command.readConcern || {});\n  if (coll.s.readConcern) {\n    Object.assign(readConcern, coll.s.readConcern);\n  }\n\n  if (Object.keys(readConcern).length > 0) {\n    Object.assign(command, { readConcern: readConcern });\n  }\n}\n\n/**\n * @internal\n */\nexport type TopologyProvider =\n  | MongoClient\n  | ClientSession\n  | FindCursor\n  | AbstractCursor\n  | Collection<any>\n  | Db;\n\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @throws MongoNotConnectedError\n * @internal\n */\nexport function getTopology(provider: TopologyProvider): Topology {\n  // MongoClient or ClientSession or AbstractCursor\n  if ('topology' in provider && provider.topology) {\n    return provider.topology;\n  } else if ('client' in provider && provider.client.topology) {\n    return provider.client.topology;\n  }\n\n  throw new MongoNotConnectedError('MongoClient must be connected to perform this operation');\n}\n\n/** @internal */\nexport function ns(ns: string): MongoDBNamespace {\n  return MongoDBNamespace.fromString(ns);\n}\n\n/** @public */\nexport class MongoDBNamespace {\n  /**\n   * Create a namespace object\n   *\n   * @param db - database name\n   * @param collection - collection name\n   */\n  constructor(\n    public db: string,\n    public collection?: string\n  ) {\n    this.collection = collection === '' ? undefined : collection;\n  }\n\n  toString(): string {\n    return this.collection ? `${this.db}.${this.collection}` : this.db;\n  }\n\n  withCollection(collection: string): MongoDBCollectionNamespace {\n    return new MongoDBCollectionNamespace(this.db, collection);\n  }\n\n  static fromString(namespace?: string): MongoDBNamespace {\n    if (typeof namespace !== 'string' || namespace === '') {\n      // TODO(NODE-3483): Replace with MongoNamespaceError\n      throw new MongoRuntimeError(`Cannot parse namespace from \"${namespace}\"`);\n    }\n\n    const [db, ...collectionParts] = namespace.split('.');\n    const collection = collectionParts.join('.');\n    return new MongoDBNamespace(db, collection === '' ? undefined : collection);\n  }\n}\n\n/**\n * @public\n *\n * A class representing a collection's namespace.  This class enforces (through Typescript) that\n * the `collection` portion of the namespace is defined and should only be\n * used in scenarios where this can be guaranteed.\n */\nexport class MongoDBCollectionNamespace extends MongoDBNamespace {\n  constructor(\n    db: string,\n    override collection: string\n  ) {\n    super(db, collection);\n  }\n\n  static override fromString(namespace?: string): MongoDBCollectionNamespace {\n    return super.fromString(namespace) as MongoDBCollectionNamespace;\n  }\n}\n\n/** @internal */\nexport function* makeCounter(seed = 0): Generator<number> {\n  let count = seed;\n  while (true) {\n    const newCount = count;\n    count += 1;\n    yield newCount;\n  }\n}\n\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */\nexport function uuidV4(): Buffer {\n  const result = crypto.randomBytes(16);\n  result[6] = (result[6] & 0x0f) | 0x40;\n  result[8] = (result[8] & 0x3f) | 0x80;\n  return result;\n}\n\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */\nexport function maxWireVersion(topologyOrServer?: Connection | Topology | Server): number {\n  if (topologyOrServer) {\n    if (topologyOrServer.loadBalanced || topologyOrServer.serverApi?.version) {\n      // Since we do not have a monitor in the load balanced mode,\n      // we assume the load-balanced server is always pointed at the latest mongodb version.\n      // There is a risk that for on-prem deployments\n      // that don't upgrade immediately that this could alert to the\n      // application that a feature is available that is actually not.\n      // We also return the max supported wire version for serverAPI.\n      return MAX_SUPPORTED_WIRE_VERSION;\n    }\n    if (topologyOrServer.hello) {\n      return topologyOrServer.hello.maxWireVersion;\n    }\n\n    if ('lastHello' in topologyOrServer && typeof topologyOrServer.lastHello === 'function') {\n      const lastHello = topologyOrServer.lastHello();\n      if (lastHello) {\n        return lastHello.maxWireVersion;\n      }\n    }\n\n    if (\n      topologyOrServer.description &&\n      'maxWireVersion' in topologyOrServer.description &&\n      topologyOrServer.description.maxWireVersion != null\n    ) {\n      return topologyOrServer.description.maxWireVersion;\n    }\n  }\n\n  return 0;\n}\n\n/** @internal */\nexport function arrayStrictEqual(arr: unknown[], arr2: unknown[]): boolean {\n  if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n    return false;\n  }\n\n  return arr.length === arr2.length && arr.every((elt, idx) => elt === arr2[idx]);\n}\n\n/** @internal */\nexport function errorStrictEqual(lhs?: AnyError | null, rhs?: AnyError | null): boolean {\n  if (lhs === rhs) {\n    return true;\n  }\n\n  if (!lhs || !rhs) {\n    return lhs === rhs;\n  }\n\n  if ((lhs == null && rhs != null) || (lhs != null && rhs == null)) {\n    return false;\n  }\n\n  if (lhs.constructor.name !== rhs.constructor.name) {\n    return false;\n  }\n\n  if (lhs.message !== rhs.message) {\n    return false;\n  }\n\n  return true;\n}\n\ninterface StateTable {\n  [key: string]: string[];\n}\ninterface ObjectWithState {\n  s: { state: string };\n  emit(event: 'stateChanged', state: string, newState: string): void;\n}\ninterface StateTransitionFunction {\n  (target: ObjectWithState, newState: string): void;\n}\n\n/** @public */\nexport type EventEmitterWithState = {\n  /** @internal */\n  stateChanged(previous: string, current: string): void;\n};\n\n/** @internal */\nexport function makeStateMachine(stateTable: StateTable): StateTransitionFunction {\n  return function stateTransition(target, newState) {\n    const legalStates = stateTable[target.s.state];\n    if (legalStates && legalStates.indexOf(newState) < 0) {\n      throw new MongoRuntimeError(\n        `illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`\n      );\n    }\n\n    target.emit('stateChanged', target.s.state, newState);\n    target.s.state = newState;\n  };\n}\n\n/** @internal */\nexport function now(): number {\n  const hrtime = process.hrtime();\n  return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\n\n/** @internal */\nexport function calculateDurationInMs(started: number | undefined): number {\n  if (typeof started !== 'number') {\n    return -1;\n  }\n\n  const elapsed = now() - started;\n  return elapsed < 0 ? 0 : elapsed;\n}\n\n/** @internal */\nexport function hasAtomicOperators(doc: Document | Document[]): boolean {\n  if (Array.isArray(doc)) {\n    for (const document of doc) {\n      if (hasAtomicOperators(document)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  const keys = Object.keys(doc);\n  return keys.length > 0 && keys[0][0] === '$';\n}\n\nexport function resolveTimeoutOptions<T extends Partial<TimeoutContextOptions>>(\n  client: MongoClient,\n  options: T\n): T &\n  Pick<\n    MongoClient['s']['options'],\n    'timeoutMS' | 'serverSelectionTimeoutMS' | 'waitQueueTimeoutMS' | 'socketTimeoutMS'\n  > {\n  const { socketTimeoutMS, serverSelectionTimeoutMS, waitQueueTimeoutMS, timeoutMS } =\n    client.s.options;\n  return { socketTimeoutMS, serverSelectionTimeoutMS, waitQueueTimeoutMS, timeoutMS, ...options };\n}\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n *\n * @param parent - An optional owning class of the operation being run. ex. Db/Collection/MongoClient.\n * @param options - The options passed to the operation method.\n *\n * @internal\n */\nexport function resolveOptions<T extends CommandOperationOptions>(\n  parent: OperationParent | undefined,\n  options?: T\n): T {\n  const result: T = Object.assign({}, options, resolveBSONOptions(options, parent));\n\n  const timeoutMS = options?.timeoutMS ?? parent?.timeoutMS;\n  // Users cannot pass a readConcern/writeConcern to operations in a transaction\n  const session = options?.session;\n\n  if (!session?.inTransaction()) {\n    const readConcern = ReadConcern.fromOptions(options) ?? parent?.readConcern;\n    if (readConcern) {\n      result.readConcern = readConcern;\n    }\n\n    let writeConcern = WriteConcern.fromOptions(options) ?? parent?.writeConcern;\n    if (writeConcern) {\n      if (timeoutMS != null) {\n        writeConcern = WriteConcern.fromOptions({\n          ...writeConcern,\n          wtimeout: undefined,\n          wtimeoutMS: undefined\n        });\n      }\n      result.writeConcern = writeConcern;\n    }\n  }\n\n  result.timeoutMS = timeoutMS;\n\n  const readPreference = ReadPreference.fromOptions(options) ?? parent?.readPreference;\n  if (readPreference) {\n    result.readPreference = readPreference;\n  }\n\n  const isConvenientTransaction = session?.explicit && session?.timeoutContext != null;\n  if (isConvenientTransaction && options?.timeoutMS != null) {\n    throw new MongoInvalidArgumentError(\n      'An operation cannot be given a timeoutMS setting when inside a withTransaction call that has a timeoutMS setting'\n    );\n  }\n\n  return result;\n}\n\nexport function isSuperset(set: Set<any> | any[], subset: Set<any> | any[]): boolean {\n  set = Array.isArray(set) ? new Set(set) : set;\n  subset = Array.isArray(subset) ? new Set(subset) : subset;\n  for (const elem of subset) {\n    if (!set.has(elem)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Checks if the document is a Hello request\n * @internal\n */\nexport function isHello(doc: Document): boolean {\n  return doc[LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\n\n/** Returns the items that are uniquely in setA */\nexport function setDifference<T>(setA: Iterable<T>, setB: Iterable<T>): Set<T> {\n  const difference = new Set<T>(setA);\n  for (const elem of setB) {\n    difference.delete(elem);\n  }\n  return difference;\n}\n\nconst HAS_OWN = (object: unknown, prop: string) =>\n  Object.prototype.hasOwnProperty.call(object, prop);\n\nexport function isRecord<T extends readonly string[]>(\n  value: unknown,\n  requiredKeys: T\n): value is Record<T[number], any>;\nexport function isRecord(value: unknown): value is Record<string, any>;\nexport function isRecord(\n  value: unknown,\n  requiredKeys: string[] | undefined = undefined\n): value is Record<string, any> {\n  if (!isObject(value)) {\n    return false;\n  }\n\n  const ctor = (value as any).constructor;\n  if (ctor && ctor.prototype) {\n    if (!isObject(ctor.prototype)) {\n      return false;\n    }\n\n    // Check to see if some method exists from the Object exists\n    if (!HAS_OWN(ctor.prototype, 'isPrototypeOf')) {\n      return false;\n    }\n  }\n\n  if (requiredKeys) {\n    const keys = Object.keys(value as Record<string, any>);\n    return isSuperset(keys, requiredKeys);\n  }\n\n  return true;\n}\n\ntype ListNode<T> = {\n  value: T;\n  next: ListNode<T> | HeadNode<T>;\n  prev: ListNode<T> | HeadNode<T>;\n};\n\ntype HeadNode<T> = {\n  value: null;\n  next: ListNode<T>;\n  prev: ListNode<T>;\n};\n\n/**\n * When a list is empty the head is a reference with pointers to itself\n * So this type represents that self referential state\n */\ntype EmptyNode = {\n  value: null;\n  next: EmptyNode;\n  prev: EmptyNode;\n};\n\n/**\n * A sequential list of items in a circularly linked list\n * @remarks\n * The head node is special, it is always defined and has a value of null.\n * It is never \"included\" in the list, in that, it is not returned by pop/shift or yielded by the iterator.\n * The circular linkage and always defined head node are to reduce checks for null next/prev references to zero.\n * New nodes are declared as object literals with keys always in the same order: next, prev, value.\n * @internal\n */\nexport class List<T = unknown> {\n  private readonly head: HeadNode<T> | EmptyNode;\n  private count: number;\n\n  get length() {\n    return this.count;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'List' as const;\n  }\n\n  constructor() {\n    this.count = 0;\n\n    // this is carefully crafted:\n    // declaring a complete and consistently key ordered\n    // object is beneficial to the runtime optimizations\n    this.head = {\n      next: null,\n      prev: null,\n      value: null\n    } as unknown as EmptyNode;\n    this.head.next = this.head;\n    this.head.prev = this.head;\n  }\n\n  toArray() {\n    return Array.from(this);\n  }\n\n  toString() {\n    return `head <=> ${this.toArray().join(' <=> ')} <=> head`;\n  }\n\n  *[Symbol.iterator](): Generator<T, void, void> {\n    for (const node of this.nodes()) {\n      yield node.value;\n    }\n  }\n\n  private *nodes(): Generator<ListNode<T>, void, void> {\n    let ptr: HeadNode<T> | ListNode<T> | EmptyNode = this.head.next;\n    while (ptr !== this.head) {\n      // Save next before yielding so that we make removing within iteration safe\n      const { next } = ptr as ListNode<T>;\n      yield ptr as ListNode<T>;\n      ptr = next;\n    }\n  }\n\n  /** Insert at end of list */\n  push(value: T) {\n    this.count += 1;\n    const newNode: ListNode<T> = {\n      next: this.head as HeadNode<T>,\n      prev: this.head.prev as ListNode<T>,\n      value\n    };\n    this.head.prev.next = newNode;\n    this.head.prev = newNode;\n  }\n\n  /** Inserts every item inside an iterable instead of the iterable itself */\n  pushMany(iterable: Iterable<T>) {\n    for (const value of iterable) {\n      this.push(value);\n    }\n  }\n\n  /** Insert at front of list */\n  unshift(value: T) {\n    this.count += 1;\n    const newNode: ListNode<T> = {\n      next: this.head.next as ListNode<T>,\n      prev: this.head as HeadNode<T>,\n      value\n    };\n    this.head.next.prev = newNode;\n    this.head.next = newNode;\n  }\n\n  private remove(node: ListNode<T> | EmptyNode): T | null {\n    if (node === this.head || this.length === 0) {\n      return null;\n    }\n\n    this.count -= 1;\n\n    const prevNode = node.prev;\n    const nextNode = node.next;\n    prevNode.next = nextNode;\n    nextNode.prev = prevNode;\n\n    return node.value;\n  }\n\n  /** Removes the first node at the front of the list */\n  shift(): T | null {\n    return this.remove(this.head.next);\n  }\n\n  /** Removes the last node at the end of the list */\n  pop(): T | null {\n    return this.remove(this.head.prev);\n  }\n\n  /** Iterates through the list and removes nodes where filter returns true */\n  prune(filter: (value: T) => boolean) {\n    for (const node of this.nodes()) {\n      if (filter(node.value)) {\n        this.remove(node);\n      }\n    }\n  }\n\n  clear() {\n    this.count = 0;\n    this.head.next = this.head as EmptyNode;\n    this.head.prev = this.head as EmptyNode;\n  }\n\n  /** Returns the first item in the list, does not remove */\n  first(): T | null {\n    // If the list is empty, value will be the head's null\n    return this.head.next.value;\n  }\n\n  /** Returns the last item in the list, does not remove */\n  last(): T | null {\n    // If the list is empty, value will be the head's null\n    return this.head.prev.value;\n  }\n}\n\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */\nexport class BufferPool {\n  private buffers: List<Buffer>;\n  private totalByteLength: number;\n\n  constructor() {\n    this.buffers = new List();\n    this.totalByteLength = 0;\n  }\n\n  get length(): number {\n    return this.totalByteLength;\n  }\n\n  /** Adds a buffer to the internal buffer pool list */\n  append(buffer: Buffer): void {\n    this.buffers.push(buffer);\n    this.totalByteLength += buffer.length;\n  }\n\n  /**\n   * If BufferPool contains 4 bytes or more construct an int32 from the leading bytes,\n   * otherwise return null. Size can be negative, caller should error check.\n   */\n  getInt32(): number | null {\n    if (this.totalByteLength < 4) {\n      return null;\n    }\n    const firstBuffer = this.buffers.first();\n    if (firstBuffer != null && firstBuffer.byteLength >= 4) {\n      return firstBuffer.readInt32LE(0);\n    }\n\n    // Unlikely case: an int32 is split across buffers.\n    // Use read and put the returned buffer back on top\n    const top4Bytes = this.read(4);\n    const value = top4Bytes.readInt32LE(0);\n\n    // Put it back.\n    this.totalByteLength += 4;\n    this.buffers.unshift(top4Bytes);\n\n    return value;\n  }\n\n  /** Reads the requested number of bytes, optionally consuming them */\n  read(size: number): Buffer {\n    if (typeof size !== 'number' || size < 0) {\n      throw new MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n    }\n\n    // oversized request returns empty buffer\n    if (size > this.totalByteLength) {\n      return Buffer.alloc(0);\n    }\n\n    // We know we have enough, we just don't know how it is spread across chunks\n    // TODO(NODE-4732): alloc API should change based on raw option\n    const result = Buffer.allocUnsafe(size);\n\n    for (let bytesRead = 0; bytesRead < size; ) {\n      const buffer = this.buffers.shift();\n      if (buffer == null) {\n        break;\n      }\n      const bytesRemaining = size - bytesRead;\n      const bytesReadable = Math.min(bytesRemaining, buffer.byteLength);\n      const bytes = buffer.subarray(0, bytesReadable);\n\n      result.set(bytes, bytesRead);\n\n      bytesRead += bytesReadable;\n      this.totalByteLength -= bytesReadable;\n      if (bytesReadable < buffer.byteLength) {\n        this.buffers.unshift(buffer.subarray(bytesReadable));\n      }\n    }\n\n    return result;\n  }\n}\n\n/** @public */\nexport class HostAddress {\n  host: string | undefined = undefined;\n  port: number | undefined = undefined;\n  socketPath: string | undefined = undefined;\n  isIPv6 = false;\n\n  constructor(hostString: string) {\n    const escapedHost = hostString.split(' ').join('%20'); // escape spaces, for socket path hosts\n\n    if (escapedHost.endsWith('.sock')) {\n      // heuristically determine if we're working with a domain socket\n      this.socketPath = decodeURIComponent(escapedHost);\n      return;\n    }\n\n    const urlString = `iLoveJS://${escapedHost}`;\n    let url;\n    try {\n      url = new URL(urlString);\n    } catch (urlError) {\n      const runtimeError = new MongoRuntimeError(`Unable to parse ${escapedHost} with URL`);\n      runtimeError.cause = urlError;\n      throw runtimeError;\n    }\n\n    const hostname = url.hostname;\n    const port = url.port;\n\n    let normalized = decodeURIComponent(hostname).toLowerCase();\n    if (normalized.startsWith('[') && normalized.endsWith(']')) {\n      this.isIPv6 = true;\n      normalized = normalized.substring(1, hostname.length - 1);\n    }\n\n    this.host = normalized.toLowerCase();\n\n    if (typeof port === 'number') {\n      this.port = port;\n    } else if (typeof port === 'string' && port !== '') {\n      this.port = Number.parseInt(port, 10);\n    } else {\n      this.port = 27017;\n    }\n\n    if (this.port === 0) {\n      throw new MongoParseError('Invalid port (zero) with hostname');\n    }\n    Object.freeze(this);\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\n    return this.inspect();\n  }\n\n  inspect(): string {\n    return `new HostAddress('${this.toString()}')`;\n  }\n\n  toString(): string {\n    if (typeof this.host === 'string') {\n      if (this.isIPv6) {\n        return `[${this.host}]:${this.port}`;\n      }\n      return `${this.host}:${this.port}`;\n    }\n    return `${this.socketPath}`;\n  }\n\n  static fromString(this: void, s: string): HostAddress {\n    return new HostAddress(s);\n  }\n\n  static fromHostPort(host: string, port: number): HostAddress {\n    if (host.includes(':')) {\n      host = `[${host}]`; // IPv6 address\n    }\n    return HostAddress.fromString(`${host}:${port}`);\n  }\n\n  static fromSrvRecord({ name, port }: SrvRecord): HostAddress {\n    return HostAddress.fromHostPort(name, port);\n  }\n\n  toHostPort(): { host: string; port: number } {\n    if (this.socketPath) {\n      return { host: this.socketPath, port: 0 };\n    }\n\n    const host = this.host ?? '';\n    const port = this.port ?? 0;\n    return { host, port };\n  }\n}\n\nexport const DEFAULT_PK_FACTORY = {\n  // We prefer not to rely on ObjectId having a createPk method\n  createPk(): ObjectId {\n    return new ObjectId();\n  }\n};\n\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```ts\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */\nexport const MONGODB_WARNING_CODE = 'MONGODB DRIVER';\n\n/** @internal */\nexport function emitWarning(message: string): void {\n  return process.emitWarning(message, { code: MONGODB_WARNING_CODE } as any);\n}\n\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */\nexport function emitWarningOnce(message: string): void {\n  if (!emittedWarnings.has(message)) {\n    emittedWarnings.add(message);\n    return emitWarning(message);\n  }\n}\n\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */\nexport function enumToString(en: Record<string, unknown>): string {\n  return Object.values(en).join(', ');\n}\n\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */\nexport function supportsRetryableWrites(server?: Server): boolean {\n  if (!server) {\n    return false;\n  }\n\n  if (server.loadBalanced) {\n    // Loadbalanced topologies will always support retry writes\n    return true;\n  }\n\n  if (server.description.logicalSessionTimeoutMinutes != null) {\n    // that supports sessions\n    if (server.description.type !== ServerType.Standalone) {\n      // and that is not a standalone\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */\nexport function shuffle<T>(sequence: Iterable<T>, limit = 0): Array<T> {\n  const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n\n  if (limit > items.length) {\n    throw new MongoRuntimeError('Limit must be less than the number of items');\n  }\n\n  let remainingItemsToShuffle = items.length;\n  const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n  while (remainingItemsToShuffle > lowerBound) {\n    // Pick a remaining element\n    const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n    remainingItemsToShuffle -= 1;\n\n    // And swap it with the current element\n    const swapHold = items[remainingItemsToShuffle];\n    items[remainingItemsToShuffle] = items[randomIndex];\n    items[randomIndex] = swapHold;\n  }\n\n  return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\n\n/**\n * TODO(NODE-4936): read concern eligibility for commands should be codified in command construction\n * @internal\n * @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.md#read-concern\n */\nexport function commandSupportsReadConcern(command: Document): boolean {\n  if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Compare objectIds. `null` is always less\n * - `+1 = oid1 is greater than oid2`\n * - `-1 = oid1 is less than oid2`\n * - `+0 = oid1 is equal oid2`\n */\nexport function compareObjectId(oid1?: ObjectId | null, oid2?: ObjectId | null): 0 | 1 | -1 {\n  if (oid1 == null && oid2 == null) {\n    return 0;\n  }\n\n  if (oid1 == null) {\n    return -1;\n  }\n\n  if (oid2 == null) {\n    return 1;\n  }\n\n  return ByteUtils.compare(oid1.id, oid2.id);\n}\n\nexport function parseInteger(value: unknown): number | null {\n  if (typeof value === 'number') return Math.trunc(value);\n  const parsedValue = Number.parseInt(String(value), 10);\n\n  return Number.isNaN(parsedValue) ? null : parsedValue;\n}\n\nexport function parseUnsignedInteger(value: unknown): number | null {\n  const parsedInt = parseInteger(value);\n\n  return parsedInt != null && parsedInt >= 0 ? parsedInt : null;\n}\n\n/**\n * This function throws a MongoAPIError in the event that either of the following is true:\n * * If the provided address domain does not match the provided parent domain\n * * If the parent domain contains less than three `.` separated parts and the provided address does not contain at least one more domain level than its parent\n *\n * If a DNS server were to become compromised SRV records would still need to\n * advertise addresses that are under the same domain as the srvHost.\n *\n * @param address - The address to check against a domain\n * @param srvHost - The domain to check the provided address against\n * @returns void\n */\nexport function checkParentDomainMatch(address: string, srvHost: string): void {\n  // Remove trailing dot if exists on either the resolved address or the srv hostname\n  const normalizedAddress = address.endsWith('.') ? address.slice(0, address.length - 1) : address;\n  const normalizedSrvHost = srvHost.endsWith('.') ? srvHost.slice(0, srvHost.length - 1) : srvHost;\n\n  const allCharacterBeforeFirstDot = /^.*?\\./;\n  const srvIsLessThanThreeParts = normalizedSrvHost.split('.').length < 3;\n  // Remove all characters before first dot\n  // Add leading dot back to string so\n  //   an srvHostDomain = '.trusted.site'\n  //   will not satisfy an addressDomain that endsWith '.fake-trusted.site'\n  const addressDomain = `.${normalizedAddress.replace(allCharacterBeforeFirstDot, '')}`;\n  let srvHostDomain = srvIsLessThanThreeParts\n    ? normalizedSrvHost\n    : `.${normalizedSrvHost.replace(allCharacterBeforeFirstDot, '')}`;\n\n  if (!srvHostDomain.startsWith('.')) {\n    srvHostDomain = '.' + srvHostDomain;\n  }\n  if (\n    srvIsLessThanThreeParts &&\n    normalizedAddress.split('.').length <= normalizedSrvHost.split('.').length\n  ) {\n    throw new MongoAPIError(\n      'Server record does not have at least one more domain level than parent URI'\n    );\n  }\n  if (!addressDomain.endsWith(srvHostDomain)) {\n    throw new MongoAPIError('Server record does not share hostname with parent URI');\n  }\n}\n\ninterface RequestOptions {\n  json?: boolean;\n  method?: string;\n  timeout?: number;\n  headers?: http.OutgoingHttpHeaders;\n}\n\n/**\n * Perform a get request that returns status and body.\n * @internal\n */\nexport function get(\n  url: URL | string,\n  options: http.RequestOptions = {}\n): Promise<{ body: string; status: number | undefined }> {\n  return new Promise((resolve, reject) => {\n    /* eslint-disable prefer-const */\n    let timeoutId: NodeJS.Timeout;\n    const request = http\n      .get(url, options, response => {\n        response.setEncoding('utf8');\n        let body = '';\n        response.on('data', chunk => (body += chunk));\n        response.on('end', () => {\n          clearTimeout(timeoutId);\n          resolve({ status: response.statusCode, body });\n        });\n      })\n      .on('error', error => {\n        clearTimeout(timeoutId);\n        reject(error);\n      })\n      .end();\n    timeoutId = setTimeout(() => {\n      request.destroy(new MongoNetworkTimeoutError(`request timed out after 10 seconds`));\n    }, 10000);\n  });\n}\n\nexport async function request(uri: string): Promise<Record<string, any>>;\nexport async function request(\n  uri: string,\n  options?: { json?: true } & RequestOptions\n): Promise<Record<string, any>>;\nexport async function request(\n  uri: string,\n  options?: { json: false } & RequestOptions\n): Promise<string>;\nexport async function request(\n  uri: string,\n  options: RequestOptions = {}\n): Promise<string | Record<string, any>> {\n  return await new Promise<string | Record<string, any>>((resolve, reject) => {\n    const requestOptions = {\n      method: 'GET',\n      timeout: 10000,\n      json: true,\n      ...url.parse(uri),\n      ...options\n    };\n\n    const req = http.request(requestOptions, res => {\n      res.setEncoding('utf8');\n\n      let data = '';\n      res.on('data', d => {\n        data += d;\n      });\n\n      res.once('end', () => {\n        if (options.json === false) {\n          resolve(data);\n          return;\n        }\n\n        try {\n          const parsed = JSON.parse(data);\n          resolve(parsed);\n        } catch {\n          // TODO(NODE-3483)\n          reject(new MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n        }\n      });\n    });\n\n    req.once('timeout', () =>\n      req.destroy(\n        new MongoNetworkTimeoutError(\n          `Network request to ${uri} timed out after ${options.timeout} ms`\n        )\n      )\n    );\n    req.once('error', error => reject(error));\n    req.end();\n  });\n}\n\n/** @internal */\nexport const DOCUMENT_DB_CHECK = /(\\.docdb\\.amazonaws\\.com$)|(\\.docdb-elastic\\.amazonaws\\.com$)/;\n/** @internal */\nexport const COSMOS_DB_CHECK = /\\.cosmos\\.azure\\.com$/;\n\n/** @internal */\nexport const DOCUMENT_DB_MSG =\n  'You appear to be connected to a DocumentDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/documentdb';\n/** @internal */\nexport const COSMOS_DB_MSG =\n  'You appear to be connected to a CosmosDB cluster. For more information regarding feature compatibility and support please visit https://www.mongodb.com/supportability/cosmosdb';\n\n/** @internal */\nexport function isHostMatch(match: RegExp, host?: string): boolean {\n  return host && match.test(host.toLowerCase()) ? true : false;\n}\n\nexport function promiseWithResolvers<T>(): {\n  promise: Promise<T>;\n  resolve: (value: T) => void;\n  reject: (error: Error) => void;\n} {\n  let resolve!: (value: T) => void;\n  let reject!: (error: Error) => void;\n  const promise = new Promise<T>(function withResolversExecutor(promiseResolve, promiseReject) {\n    resolve = promiseResolve;\n    reject = promiseReject;\n  });\n  return { promise, resolve, reject } as const;\n}\n\n/**\n * A noop function intended for use in preventing unhandled rejections.\n *\n * @example\n * ```js\n * const promise = myAsyncTask();\n * // eslint-disable-next-line github/no-then\n * promise.then(undefined, squashError);\n * ```\n */\nexport function squashError(_error: unknown) {\n  return;\n}\n\nexport const randomBytes = promisify(crypto.randomBytes);\n\n/**\n * Replicates the events.once helper.\n *\n * Removes unused signal logic and It **only** supports 0 or 1 argument events.\n *\n * @param ee - An event emitter that may emit `ev`\n * @param name - An event name to wait for\n */\nexport async function once<T>(ee: EventEmitter, name: string, options?: Abortable): Promise<T> {\n  options?.signal?.throwIfAborted();\n\n  const { promise, resolve, reject } = promiseWithResolvers<T>();\n  const onEvent = (data: T) => resolve(data);\n  const onError = (error: Error) => reject(error);\n  const abortListener = addAbortListener(options?.signal, function () {\n    reject(this.reason);\n  });\n\n  ee.once(name, onEvent).once('error', onError);\n\n  try {\n    return await promise;\n  } finally {\n    ee.off(name, onEvent);\n    ee.off('error', onError);\n    abortListener?.[kDispose]();\n  }\n}\n\nexport function maybeAddIdToDocuments(\n  coll: Collection,\n  docs: Document[],\n  options: { forceServerObjectId?: boolean }\n): Document[];\nexport function maybeAddIdToDocuments(\n  coll: Collection,\n  docs: Document,\n  options: { forceServerObjectId?: boolean }\n): Document;\nexport function maybeAddIdToDocuments(\n  coll: Collection,\n  docOrDocs: Document[] | Document,\n  options: { forceServerObjectId?: boolean }\n): Document[] | Document {\n  const forceServerObjectId =\n    typeof options.forceServerObjectId === 'boolean'\n      ? options.forceServerObjectId\n      : coll.s.db.options?.forceServerObjectId;\n\n  // no need to modify the docs if server sets the ObjectId\n  if (forceServerObjectId === true) {\n    return docOrDocs;\n  }\n\n  const transform = (doc: Document): Document => {\n    if (doc._id == null) {\n      doc._id = coll.s.pkFactory.createPk();\n    }\n\n    return doc;\n  };\n  return Array.isArray(docOrDocs) ? docOrDocs.map(transform) : transform(docOrDocs);\n}\n\nexport async function fileIsAccessible(fileName: string, mode?: number) {\n  try {\n    await fs.access(fileName, mode);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function csotMin(duration1: number, duration2: number): number {\n  if (duration1 === 0) return duration2;\n  if (duration2 === 0) return duration1;\n  return Math.min(duration1, duration2);\n}\n\nexport function noop() {\n  return;\n}\n\n/**\n * Recurse through the (identically-shaped) `decrypted` and `original`\n * objects and attach a `decryptedKeys` property on each sub-object that\n * contained encrypted fields. Because we only call this on BSON responses,\n * we do not need to worry about circular references.\n *\n * @internal\n */\nexport function decorateDecryptionResult(\n  decrypted: Document & { [kDecoratedKeys]?: Array<string> },\n  original: Document,\n  isTopLevelDecorateCall = true\n): void {\n  if (isTopLevelDecorateCall) {\n    // The original value could have been either a JS object or a BSON buffer\n    if (Buffer.isBuffer(original)) {\n      original = deserialize(original);\n    }\n    if (Buffer.isBuffer(decrypted)) {\n      throw new MongoRuntimeError('Expected result of decryption to be deserialized BSON object');\n    }\n  }\n\n  if (!decrypted || typeof decrypted !== 'object') return;\n  for (const k of Object.keys(decrypted)) {\n    const originalValue = original[k];\n\n    // An object was decrypted by libmongocrypt if and only if it was\n    // a BSON Binary object with subtype 6.\n    if (originalValue && originalValue._bsontype === 'Binary' && originalValue.sub_type === 6) {\n      if (!decrypted[kDecoratedKeys]) {\n        Object.defineProperty(decrypted, kDecoratedKeys, {\n          value: [],\n          configurable: true,\n          enumerable: false,\n          writable: false\n        });\n      }\n      // this is defined in the preceding if-statement\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      decrypted[kDecoratedKeys]!.push(k);\n      // Do not recurse into this decrypted value. It could be a sub-document/array,\n      // in which case there is no original value associated with its subfields.\n      continue;\n    }\n\n    decorateDecryptionResult(decrypted[k], originalValue, false);\n  }\n}\n\n/** @internal */\nexport const kDispose: unique symbol = (Symbol.dispose as any) ?? Symbol('dispose');\n\n/** @internal */\nexport interface Disposable {\n  [kDispose](): void;\n}\n\n/**\n * A utility that helps with writing listener code idiomatically\n *\n * @example\n * ```js\n * using listener = addAbortListener(signal, function () {\n *   console.log('aborted', this.reason);\n * });\n * ```\n *\n * @param signal - if exists adds an abort listener\n * @param listener - the listener to be added to signal\n * @returns A disposable that will remove the abort listener\n */\nexport function addAbortListener(\n  signal: AbortSignal | undefined | null,\n  listener: (this: AbortSignal, event: Event) => void\n): Disposable | undefined {\n  if (signal == null) return;\n  signal.addEventListener('abort', listener, { once: true });\n  return { [kDispose]: () => signal.removeEventListener('abort', listener) };\n}\n\n/**\n * Takes a promise and races it with a promise wrapping the abort event of the optionally provided signal.\n * The given promise is _always_ ordered before the signal's abort promise.\n * When given an already rejected promise and an already aborted signal, the promise's rejection takes precedence.\n *\n * Any asynchronous processing in `promise` will continue even after the abort signal has fired,\n * but control will be returned to the caller\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\n *\n * @param promise - A promise to discard if the signal aborts\n * @param options - An options object carrying an optional signal\n */\nexport async function abortable<T>(\n  promise: Promise<T>,\n  { signal }: { signal?: AbortSignal }\n): Promise<T> {\n  if (signal == null) {\n    return await promise;\n  }\n\n  const { promise: aborted, reject } = promiseWithResolvers<never>();\n\n  const abortListener = signal.aborted\n    ? reject(signal.reason)\n    : addAbortListener(signal, function () {\n        reject(this.reason);\n      });\n\n  try {\n    return await Promise.race([promise, aborted]);\n  } finally {\n    abortListener?.[kDispose]();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}